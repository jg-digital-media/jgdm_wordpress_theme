-- phpMyAdmin SQL Dump
-- version 5.1.3
-- https://www.phpmyadmin.net/
--
-- Host: shareddb-g.hosting.stackcp.net
-- Generation Time: Jan 24, 2023 at 12:39 PM
-- Server version: 10.4.26-MariaDB-log
-- PHP Version: 7.1.25

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `jgdm-blog-3731ce54`
--

-- --------------------------------------------------------

--
-- Table structure for table `wp_posts`
--

CREATE TABLE `wp_posts` (
  `ID` bigint(20) UNSIGNED NOT NULL,
  `post_author` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_title` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_excerpt` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `to_ping` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `pinged` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_parent` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `guid` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT 0,
  `post_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_posts`
--

INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1, 1, '2019-02-22 12:22:45', '2019-02-22 12:22:45', '<!-- wp:paragraph -->\n<p>Welcome to WordPress. This is your first post. Edit or delete it, then start writing!</p>\n<!-- /wp:paragraph -->', 'Hello world!', '', 'publish', 'open', 'open', '', 'hello-world', '', '', '2019-02-22 12:22:45', '2019-02-22 12:22:45', '', 0, 'https://blog.jonniegrieve.co.uk/?p=1', 0, 'post', '', 0),
(2, 1, '2019-02-22 12:22:45', '2019-02-22 12:22:45', '<!-- wp:paragraph -->\n<p>Welcome to the blog page for Jonnie Grieve Digital Media. Please check back regularly for new content posted to this page and consider signing up! </p>\n<!-- /wp:paragraph -->', 'Home', '', 'publish', 'closed', 'open', '', 'sample-page', '', '', '2019-02-22 12:56:31', '2019-02-22 12:56:31', '', 0, 'https://blog.jonniegrieve.co.uk/?page_id=2', 0, 'page', '', 0),
(3, 1, '2019-02-22 12:22:45', '2019-02-22 12:22:45', '<!-- wp:heading --><h2>Who we are</h2><!-- /wp:heading --><!-- wp:paragraph --><p>Our website address is: https://blog.jonniegrieve.co.uk.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>What personal data we collect and why we collect it</h2><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>Comments</h3><!-- /wp:heading --><!-- wp:paragraph --><p>When visitors leave comments on the site we collect the data shown in the comments form, and also the visitor&#8217;s IP address and browser user agent string to help spam detection.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>An anonymised string created from your e-mail address (also called a hash) may be provided to the Gravatar service to see if you are using it. The Gravatar service Privacy Policy is available here: https://automattic.com/privacy/. After approval of your comment, your profile picture is visible to the public in the context of your comment.</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>Media</h3><!-- /wp:heading --><!-- wp:paragraph --><p>If you upload images to the website, you should avoid uploading images with embedded location data (EXIF GPS) included. Visitors to the website can download and extract any location data from images on the website.</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>Contact forms</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>Cookies</h3><!-- /wp:heading --><!-- wp:paragraph --><p>If you leave a comment on our site you may opt in to saving your name, e-mail address and website in cookies. These are for your convenience so that you do not have to fill in your details again when you leave another comment. These cookies will last for one year.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>If you have an account and you log in to this site, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>When you log in, we will also set up several cookies to save your login information and your screen display choices. Login cookies last for two days, and screen options cookies last for a year. If you select &quot;Remember Me&quot;, your login will persist for two weeks. If you log out of your account, the login cookies will be removed.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>If you edit or publish an article, an additional cookie will be saved in your browser. This cookie includes no personal data and simply indicates the post ID of the article you just edited. It expires after 1 day.</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>Embedded content from other websites</h3><!-- /wp:heading --><!-- wp:paragraph --><p>Articles on this site may include embedded content (e.g. videos, images, articles, etc.). Embedded content from other websites behaves in the exact same way as if the visitor has visited the other website.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>These websites may collect data about you, use cookies, embed additional third-party tracking, and monitor your interaction with that embedded content, including tracking your interaction with the embedded content if you have an account and are logged in to that website.</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>Analytics</h3><!-- /wp:heading --><!-- wp:heading --><h2>Who we share your data with</h2><!-- /wp:heading --><!-- wp:heading --><h2>How long we retain your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>If you leave a comment, the comment and its metadata are retained indefinitely. This is so we can recognise and approve any follow-up comments automatically instead of holding them in a moderation queue.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>For users that register on our website (if any), we also store the personal information they provide in their user profile. All users can see, edit, or delete their personal information at any time (except they cannot change their username). Website administrators can also see and edit that information.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>What rights you have over your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>If you have an account on this site, or have left comments, you can request to receive an exported file of the personal data we hold about you, including any data you have provided to us. You can also request that we erase any personal data we hold about you. This does not include any data we are obliged to keep for administrative, legal, or security purposes.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Where we send your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>Visitor comments may be checked through an automated spam detection service.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Your contact information</h2><!-- /wp:heading --><!-- wp:heading --><h2>Additional information</h2><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>How we protect your data</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>What data breach procedures we have in place</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>What third parties we receive data from</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>What automated decision making and/or profiling we do with user data</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>Industry regulatory disclosure requirements</h3><!-- /wp:heading -->', 'Privacy Policy', '', 'draft', 'closed', 'open', '', 'privacy-policy', '', '', '2019-02-22 12:22:45', '2019-02-22 12:22:45', '', 0, 'https://blog.jonniegrieve.co.uk/?page_id=3', 0, 'page', '', 0),
(6, 1, '2019-02-22 12:40:03', '2019-02-22 12:40:03', 'Small Logo for Jonnie Grieve Digital Media', 'JGDM', 'Small Logo for Jonnie Grieve Digital Media', 'inherit', 'open', 'closed', '', 'clearlogo', '', '', '2019-02-22 12:42:07', '2019-02-22 12:42:07', '', 0, 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/clearLogo.png', 0, 'attachment', 'image/png', 0),
(7, 1, '2019-02-22 12:40:36', '2019-02-22 12:40:36', 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/cropped-clearLogo.png', 'cropped-clearLogo.png', '', 'inherit', 'open', 'closed', '', 'cropped-clearlogo-png', '', '', '2019-02-22 12:40:36', '2019-02-22 12:40:36', '', 0, 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/cropped-clearLogo.png', 0, 'attachment', 'image/png', 0),
(10, 1, '2019-02-22 12:41:39', '2019-02-22 12:41:39', 'Larger Logo for Jonnie Grieve Digital Media', 'Jonnie Grieve Digital Media', 'Larger Logo for Jonnie Grieve Digital Media', 'inherit', 'open', 'closed', '', 'facebookprofilepic', '', '', '2019-02-22 12:42:48', '2019-02-22 12:42:48', '', 0, 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/FacebookProfilepic.png', 0, 'attachment', 'image/png', 0),
(11, 1, '2019-02-22 12:43:05', '2019-02-22 12:43:05', 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/cropped-FacebookProfilepic.png', 'cropped-FacebookProfilepic.png', '', 'inherit', 'open', 'closed', '', 'cropped-facebookprofilepic-png', '', '', '2019-02-22 12:43:05', '2019-02-22 12:43:05', '', 0, 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/cropped-FacebookProfilepic.png', 0, 'attachment', 'image/png', 0),
(14, 1, '2019-02-22 12:56:30', '2019-02-22 12:56:30', '<!-- wp:paragraph -->\n<p>Welcome to the blog page for Jonnie Grieve Digital Media. Please check back regularly for new content posted to this page and consider signing up! </p>\n<!-- /wp:paragraph -->', 'Home', '', 'inherit', 'closed', 'closed', '', '2-revision-v1', '', '', '2019-02-22 12:56:30', '2019-02-22 12:56:30', '', 2, 'https://blog.jonniegrieve.co.uk/2019/02/22/2-revision-v1/', 0, 'revision', '', 0),
(15, 1, '2019-02-22 12:59:01', '2019-02-22 12:59:01', '', 'Blog', '', 'publish', 'closed', 'closed', '', 'blog', '', '', '2019-02-22 12:59:01', '2019-02-22 12:59:01', '', 0, 'https://blog.jonniegrieve.co.uk/?page_id=15', 0, 'page', '', 0),
(17, 1, '2019-02-22 12:59:01', '2019-02-22 12:59:01', '', 'Blog', '', 'inherit', 'closed', 'closed', '', '15-revision-v1', '', '', '2019-02-22 12:59:01', '2019-02-22 12:59:01', '', 15, 'https://blog.jonniegrieve.co.uk/2019/02/22/15-revision-v1/', 0, 'revision', '', 0),
(18, 1, '2019-02-22 12:59:01', '2019-02-22 12:59:01', ' ', '', '', 'publish', 'closed', 'closed', '', '18', '', '', '2019-02-27 11:06:47', '2019-02-27 11:06:47', '', 0, 'https://blog.jonniegrieve.co.uk/2019/02/22/18/', 1, 'nav_menu_item', '', 0),
(19, 1, '2019-02-22 12:59:01', '2019-02-22 12:59:01', ' ', '', '', 'publish', 'closed', 'closed', '', '19', '', '', '2019-02-27 11:06:47', '2019-02-27 11:06:47', '', 0, 'https://blog.jonniegrieve.co.uk/2019/02/22/19/', 2, 'nav_menu_item', '', 0),
(21, 1, '2016-09-05 10:14:55', '2016-09-05 09:14:55', '<!-- wp:paragraph -->\n<p>Good Morning everyone. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As you know the internet is awash with scams with people trying to grab your money dishonestly with differing levels of credibility. Some emails are poorly crafted but some use persuasive and <g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del\" id=\"5\" data-gr-id=\"5\">business like</g> language to attempt to fool you out of your money.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Every so often I get one requesting me to register a domain for one of my clients. Ones that say things on the lines of “this is a courtesy email not a demand for payment.”. That’s nice isn’t it?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>“As a courtesy to domain name holders, we are sending you this notification for your business Domain name search engine registration.This letter is to inform you that it’s time to send in your registration and save.Failure to complete your Domain name search engine registration by the expiration date may result in cancellation of this offer making it difficult for your customers to locate you on the web.”</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Quite compelling, isn’t it? Almost enough for me as a web designer to look into this further and find out if there’s anything in it; find out how I can sort this out and if necessary, send payment. Then I look at the prices quoted. $75 (around £50 or so) to “keep registration” for a year. Alarm bells are ringing with me and I trust they are with you as well. It should never cost you that much to register a domain (which should already have been sorted with a Web host company) with a web domain registrar.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is, of course, another scam and I won’t be pursuing that particular matter any further. Any correspondence I need to take action on, my web host company can inform me.  :)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You don’t need to pay a huge fee to get your website listed on a search engine. Getting a top ranking on search engines and maintaining it is another matter but assuming you continue to use white label SEO techniques your actual listing shouldn’t ever be in danger.I urge anyone who happens to come by such emails to inform their web designer or web host before you lose any money you don’t need to  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here’s a link from another company letting you know what to look out for.  <a href=\"http://easykey.uk/phishing-emails-and-scams/scam-domain-registration-renewal-notice \">http://easykey.uk/phishing-emails-and-scams/scam-domain-registration-renewal-notice </a></p>\n<!-- /wp:paragraph -->', 'Be wary of \"phishing\" scams', '', 'publish', 'open', 'open', '', 'be-wary-of-phishing-scams', '', '', '2019-02-26 10:20:40', '2019-02-26 10:20:40', '', 0, 'https://blog.jonniegrieve.co.uk/?p=21', 0, 'post', '', 0),
(22, 1, '2019-02-26 10:20:39', '2019-02-26 10:20:39', '<!-- wp:paragraph -->\n<p>Good Morning everyone. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As you know the internet is awash with scams with people trying to grab your money dishonestly with differing levels of credibility. Some emails are poorly crafted but some use persuasive and <g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del\" id=\"5\" data-gr-id=\"5\">business like</g> language to attempt to fool you out of your money.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Every so often I get one requesting me to register a domain for one of my clients. Ones that say things on the lines of “this is a courtesy email not a demand for payment.”. That’s nice isn’t it?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>“As a courtesy to domain name holders, we are sending you this notification for your business Domain name search engine registration.This letter is to inform you that it’s time to send in your registration and save.Failure to complete your Domain name search engine registration by the expiration date may result in cancellation of this offer making it difficult for your customers to locate you on the web.”</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Quite compelling, isn’t it? Almost enough for me as a web designer to look into this further and find out if there’s anything in it; find out how I can sort this out and if necessary, send payment. Then I look at the prices quoted. $75 (around £50 or so) to “keep registration” for a year. Alarm bells are ringing with me and I trust they are with you as well. It should never cost you that much to register a domain (which should already have been sorted with a Web host company) with a web domain registrar.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is, of course, another scam and I won’t be pursuing that particular matter any further. Any correspondence I need to take action on, my web host company can inform me.  :)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You don’t need to pay a huge fee to get your website listed on a search engine. Getting a top ranking on search engines and maintaining it is another matter but assuming you continue to use white label SEO techniques your actual listing shouldn’t ever be in danger.I urge anyone who happens to come by such emails to inform their web designer or web host before you lose any money you don’t need to  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here’s a link from another company letting you know what to look out for.  <a href=\"http://easykey.uk/phishing-emails-and-scams/scam-domain-registration-renewal-notice \">http://easykey.uk/phishing-emails-and-scams/scam-domain-registration-renewal-notice </a></p>\n<!-- /wp:paragraph -->', 'Be wary of \"phishing\" scams', '', 'inherit', 'closed', 'closed', '', '21-revision-v1', '', '', '2019-02-26 10:20:39', '2019-02-26 10:20:39', '', 21, 'https://blog.jonniegrieve.co.uk/2019/02/26/21-revision-v1/', 0, 'revision', '', 0),
(24, 1, '2016-04-06 09:00:14', '2016-04-06 08:00:14', '<!-- wp:paragraph -->\n<p>Welcome to my blog website. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The new home for my website design, development <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"4\" data-gr-id=\"4\">and</g> business blog. I’ll be migrating posts from my previous blog over the coming weeks so please check back for updates. </p>\n<!-- /wp:paragraph -->', 'Welcome', '', 'publish', 'open', 'open', '', 'welcome', '', '', '2019-02-26 10:25:40', '2019-02-26 10:25:40', '', 0, 'https://blog.jonniegrieve.co.uk/?p=24', 0, 'post', '', 0),
(25, 1, '2019-02-26 10:25:40', '2019-02-26 10:25:40', '<!-- wp:paragraph -->\n<p>Welcome to my blog website. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The new home for my website design, development <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"4\" data-gr-id=\"4\">and</g> business blog. I’ll be migrating posts from my previous blog over the coming weeks so please check back for updates. </p>\n<!-- /wp:paragraph -->', 'Welcome', '', 'inherit', 'closed', 'closed', '', '24-revision-v1', '', '', '2019-02-26 10:25:40', '2019-02-26 10:25:40', '', 24, 'https://blog.jonniegrieve.co.uk/2019/02/26/24-revision-v1/', 0, 'revision', '', 0),
(26, 1, '2017-09-04 09:00:20', '2017-09-04 08:00:20', '<!-- wp:paragraph -->\n<p>As a Dyspraxic, my working life can be tremendously challenging.   I forget things easily. I struggle to <g class=\"gr_ gr_7 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling multiReplace\" id=\"7\" data-gr-id=\"7\">prioritise</g> tasks and generally lose my way in the hive of activity that is my brain.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Which of course doesn’t mean that I’m incapable of doing the world, but as is written on a laminated keyring card, “I need time to work things out in my own way”.  And this is exactly what I do<g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Style replaceWithoutSep\" id=\"10\" data-gr-id=\"10\">.</g></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Style replaceWithoutSep\" id=\"10\" data-gr-id=\"10\">So</g> what I wanted to do in this short blog is to share some things that really help me do my day to day work.  It might seem trivial to a lot of people but for me, it helps me feel within myself that I have done the things I need to do, to move forward in my work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So what I wanted to do in this short blog is share a few applications that really help me do my day to day work.  Some of the things I say might seem trivial to a lot of people but for me, it helps me feel within myself that I have done the things I need to do, to move forward in my work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"align\":\"center\"} -->\n<h2 style=\"text-align:center\"><a href=\"https://workflowy.com/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"WorkFlowy (opens in a new tab)\">WorkFlowy</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><br> The first thing I want to talk about is WorkFlowy. I honestly don’t know where I’d be without Workflowy or how I got by before it.  It’s simple, intuitive and does exactly what it says on the tin; It keeps my brain <g class=\"gr_ gr_8 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling multiReplace\" id=\"8\" data-gr-id=\"8\">organised</g> so I don’t have to waste time trying to remember things.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, if I have a Git project I want to clone to a particular folder so I can work as remotely as possible, I have an item on Workflowy for reminding me to do exactly this.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have a list item to remind me to do this very blog.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have an item with many child items for my business, for personal tasks, for work to do with my church and for important reminders to do with my Car.  I treat it as my personal organiser.  I can and will forget things very easily. As long as I have access to Workflowy, this is not a problem.  Just seeing an item on Workflowy is enough to keep me ahead of the game my workflow ticking nicely.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Luckily 250 list items a month is all I need at the moment to keep me going, but I’m very meticulous in my nature and if I needed to, I wouldn’t hesitate in signing up and making full use of this web application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2><a href=\"http://www.evernote.com/\">Evernote</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p> Evernote was the first of my 3 featured sites that I came to know about that I consider absolutely vital to my workflow. When I say first I mean it has been part of how I work for a number of years.  I’ve always needed notes to help retain information and this is a simple way for me to to do.  Practice helps of course but it <g class=\"gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"6\" data-gr-id=\"6\">isnt</g> always that easy for me.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I like about Evernote is that it syncs well across multiple devices, so as long as I’m connected to the internet, I always have the latest version of my notes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With Evernote, I can write reminders, thoughts and important things to remember and write code snippets. Anything I’m struggling to remember (a common occurrence) but is important is available for me to read in a set of organised note.  It’s also available on the cloud so takes up no space on my computer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’ve always to write things down when I have lists of things to remember. It’s a while since I took this to heart.  Now it’s become a huge part of my workflow</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"align\":\"center\"} -->\n<h2 style=\"text-align:center\"><a href=\"https://keepass.info/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"Keepas.info (opens in a new tab)\">Keepas.info</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Keepass is a Godsend. As I write this I have passwords for 236, websites, databases, logins and customer areas.  236. And there’s no way I can remember them all, nor would I want to set all these passwords to automatically log in.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Instead, I commit one password to memory and have access to all my used passwords in an organised database.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With Keypass, all I have to do is remember one password with the only tradeoff being the convenience to simply to the chosen website and login.  With that time, that minor inconvenience simply disappears. Working this way saves me time and a lot of headaches. I thoroughly recommend this and the other apps mentioned as part of your workflow.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’d love to hear about what works for you and what you wou;d recommend. Feel free to comment below.  ?</p>\n<!-- /wp:paragraph -->', 'My Workflow as a Dyspraxic Developer', '', 'publish', 'open', 'open', '', 'my-workflow-as-a-dyspraxic-developer', '', '', '2019-02-26 10:37:50', '2019-02-26 10:37:50', '', 0, 'https://blog.jonniegrieve.co.uk/?p=26', 0, 'post', '', 0),
(27, 1, '2019-02-26 10:37:49', '2019-02-26 10:37:49', '<!-- wp:paragraph -->\n<p>As a Dyspraxic, my working life can be tremendously challenging.   I forget things easily. I struggle to <g class=\"gr_ gr_7 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling multiReplace\" id=\"7\" data-gr-id=\"7\">prioritise</g> tasks and generally lose my way in the hive of activity that is my brain.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Which of course doesn’t mean that I’m incapable of doing the world, but as is written on a laminated keyring card, “I need time to work things out in my own way”.  And this is exactly what I do<g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Style replaceWithoutSep\" id=\"10\" data-gr-id=\"10\">.</g></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Style replaceWithoutSep\" id=\"10\" data-gr-id=\"10\">So</g> what I wanted to do in this short blog is to share some things that really help me do my day to day work.  It might seem trivial to a lot of people but for me, it helps me feel within myself that I have done the things I need to do, to move forward in my work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So what I wanted to do in this short blog is share a few applications that really help me do my day to day work.  Some of the things I say might seem trivial to a lot of people but for me, it helps me feel within myself that I have done the things I need to do, to move forward in my work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"align\":\"center\"} -->\n<h2 style=\"text-align:center\"><a href=\"https://workflowy.com/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"WorkFlowy (opens in a new tab)\">WorkFlowy</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><br> The first thing I want to talk about is WorkFlowy. I honestly don’t know where I’d be without Workflowy or how I got by before it.  It’s simple, intuitive and does exactly what it says on the tin; It keeps my brain <g class=\"gr_ gr_8 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling multiReplace\" id=\"8\" data-gr-id=\"8\">organised</g> so I don’t have to waste time trying to remember things.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, if I have a Git project I want to clone to a particular folder so I can work as remotely as possible, I have an item on Workflowy for reminding me to do exactly this.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have a list item to remind me to do this very blog.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have an item with many child items for my business, for personal tasks, for work to do with my church and for important reminders to do with my Car.  I treat it as my personal organiser.  I can and will forget things very easily. As long as I have access to Workflowy, this is not a problem.  Just seeing an item on Workflowy is enough to keep me ahead of the game my workflow ticking nicely.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Luckily 250 list items a month is all I need at the moment to keep me going, but I’m very meticulous in my nature and if I needed to, I wouldn’t hesitate in signing up and making full use of this web application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2><a href=\"http://www.evernote.com/\">Evernote</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p> Evernote was the first of my 3 featured sites that I came to know about that I consider absolutely vital to my workflow. When I say first I mean it has been part of how I work for a number of years.  I’ve always needed notes to help retain information and this is a simple way for me to to do.  Practice helps of course but it <g class=\"gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"6\" data-gr-id=\"6\">isnt</g> always that easy for me.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I like about Evernote is that it syncs well across multiple devices, so as long as I’m connected to the internet, I always have the latest version of my notes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With Evernote, I can write reminders, thoughts and important things to remember and write code snippets. Anything I’m struggling to remember (a common occurrence) but is important is available for me to read in a set of organised note.  It’s also available on the cloud so takes up no space on my computer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’ve always to write things down when I have lists of things to remember. It’s a while since I took this to heart.  Now it’s become a huge part of my workflow</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"align\":\"center\"} -->\n<h2 style=\"text-align:center\"><a href=\"https://keepass.info/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"Keepas.info (opens in a new tab)\">Keepas.info</a></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Keepass is a Godsend. As I write this I have passwords for 236, websites, databases, logins and customer areas.  236. And there’s no way I can remember them all, nor would I want to set all these passwords to automatically log in.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Instead, I commit one password to memory and have access to all my used passwords in an organised database.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With Keypass, all I have to do is remember one password with the only tradeoff being the convenience to simply to the chosen website and login.  With that time, that minor inconvenience simply disappears. Working this way saves me time and a lot of headaches. I thoroughly recommend this and the other apps mentioned as part of your workflow.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’d love to hear about what works for you and what you wou;d recommend. Feel free to comment below.  ?</p>\n<!-- /wp:paragraph -->', 'My Workflow as a Dyspraxic Developer', '', 'inherit', 'closed', 'closed', '', '26-revision-v1', '', '', '2019-02-26 10:37:49', '2019-02-26 10:37:49', '', 26, 'https://blog.jonniegrieve.co.uk/2019/02/26/26-revision-v1/', 0, 'revision', '', 0),
(28, 1, '2016-10-10 09:00:20', '2016-10-10 08:00:20', '<!-- wp:paragraph -->\n<p>I was having a conversation with someone earlier today about coding and it triggered some thoughts in my mind that I’d like to express while they’re fresh.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I don’t doubt that coding, website design and IT is the work area I’m most suited too. I’ve always been most comfortable working with computers.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The thing about computers is they’re only as good as the instructions or the information they’ve been given. They will not work for themselves. They need to be given input.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The human brain is a different thing. I’ve often seen it referred to as the most advanced computer there is. And I think its true. It can process information and instructions but it can also think for itself. It’s aware of things in a way no computer I’ve ever known is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then, there’s my brain.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I spend a lot of time working on websites like&nbsp;<a href=\"http://www.teamtreehouse.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Treehouse</a>&nbsp;to try to keep up with my degree. I love to keep learning and try new things in the world of tech.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And I like to do this because… I HAVE to.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With my Dyspraxia I don’t just struggle with organisation of movement; I’m not just a little bit clumsy. I struggle with organising my thoughts and planning ahead. I can very easily forget things I’ve learned because it’s being properly stored in my memory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For instance, I’ve been trying to learn about the all-purpose programming language known as Java. Java is everywhere, not just in the world of web development.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is not just a case of not understanding the concepts I am learning. If I don’t understand something I keep going until I do.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if I’m getting it, tomorrow is a another&nbsp;day and I realise that I’m not yet ready to apply the new-found knowledge because by then it is highly likely that knowledge has already gone.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It might be a confidence issue. It might be an issue that my brain simply cannot get round complex tasks. So either way, I keep going. I keep learning new things in the hope that one day it will just click. &nbsp;If I can’t do it, then at least I know what’s out there and I comfort myself I’ve at least introduced myself to new concepts.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’ve been doing this for nearly 3 years now and studying tech for longer than that and it is the same process in my mind.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>I set my sights on a new learning goal.</li><li>I start learning, note taking on the most important points, and I maybe build an example for my portfolio</li><li>By the time its done I have moved on to something else and there’s no more room for the information I’ve previously been trying to learn.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Can you imagine how frustrating this is? My brain once to be a brainbox. It wants to learn and to learn NOW. But doesn’t know why it can’t quite get there.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But it isn’t always like this. The last time all my learning and development bore some real fruit was when I looked into developing WordPress websites.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I haven’t by any means learned everything but I have made giant strides. I’m comfortable my way around the back-end of WordPress, making basic themes and managed to gain lots of work with Websites that use the system.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I would never have been able to do this so confidently if it wasn’t for the time and effort I put in to learning these things.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And I’ll keep doing it. It is always good to learn new things and to chase a dream. Dyspraxia might be a barrier but barriers can be overcome.</p>\n<!-- /wp:paragraph -->', 'Dyspraxia and its barriers to learning', '', 'publish', 'open', 'open', '', 'dyspraxia-and-its-barriers-to-learning', '', '', '2019-02-26 10:40:48', '2019-02-26 10:40:48', '', 0, 'https://blog.jonniegrieve.co.uk/?p=28', 0, 'post', '', 0),
(29, 1, '2019-02-26 10:40:47', '2019-02-26 10:40:47', '<!-- wp:paragraph -->\n<p>I was having a conversation with someone earlier today about coding and it triggered some thoughts in my mind that I’d like to express while they’re fresh.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I don’t doubt that coding, website design and IT is the work area I’m most suited too. I’ve always been most comfortable working with computers.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The thing about computers is they’re only as good as the instructions or the information they’ve been given. They will not work for themselves. They need to be given input.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The human brain is a different thing. I’ve often seen it referred to as the most advanced computer there is. And I think its true. It can process information and instructions but it can also think for itself. It’s aware of things in a way no computer I’ve ever known is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then, there’s my brain.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I spend a lot of time working on websites like&nbsp;<a href=\"http://www.teamtreehouse.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Treehouse</a>&nbsp;to try to keep up with my degree. I love to keep learning and try new things in the world of tech.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And I like to do this because… I HAVE to.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With my Dyspraxia I don’t just struggle with organisation of movement; I’m not just a little bit clumsy. I struggle with organising my thoughts and planning ahead. I can very easily forget things I’ve learned because it’s being properly stored in my memory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For instance, I’ve been trying to learn about the all-purpose programming language known as Java. Java is everywhere, not just in the world of web development.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is not just a case of not understanding the concepts I am learning. If I don’t understand something I keep going until I do.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if I’m getting it, tomorrow is a another&nbsp;day and I realise that I’m not yet ready to apply the new-found knowledge because by then it is highly likely that knowledge has already gone.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It might be a confidence issue. It might be an issue that my brain simply cannot get round complex tasks. So either way, I keep going. I keep learning new things in the hope that one day it will just click. &nbsp;If I can’t do it, then at least I know what’s out there and I comfort myself I’ve at least introduced myself to new concepts.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’ve been doing this for nearly 3 years now and studying tech for longer than that and it is the same process in my mind.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>I set my sights on a new learning goal.</li><li>I start learning, note taking on the most important points, and I maybe build an example for my portfolio</li><li>By the time its done I have moved on to something else and there’s no more room for the information I’ve previously been trying to learn.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Can you imagine how frustrating this is? My brain once to be a brainbox. It wants to learn and to learn NOW. But doesn’t know why it can’t quite get there.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But it isn’t always like this. The last time all my learning and development bore some real fruit was when I looked into developing WordPress websites.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I haven’t by any means learned everything but I have made giant strides. I’m comfortable my way around the back-end of WordPress, making basic themes and managed to gain lots of work with Websites that use the system.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I would never have been able to do this so confidently if it wasn’t for the time and effort I put in to learning these things.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And I’ll keep doing it. It is always good to learn new things and to chase a dream. Dyspraxia might be a barrier but barriers can be overcome.</p>\n<!-- /wp:paragraph -->', 'Dyspraxia and its barriers to learning', '', 'inherit', 'closed', 'closed', '', '28-revision-v1', '', '', '2019-02-26 10:40:47', '2019-02-26 10:40:47', '', 28, 'https://blog.jonniegrieve.co.uk/2019/02/26/28-revision-v1/', 0, 'revision', '', 0),
(30, 1, '2016-07-26 09:00:32', '2016-07-26 08:00:32', '<!-- wp:paragraph -->\n<p>I created this post as an attempt to explain forum markdown code for internet forums like those on <a rel=\"noreferrer noopener\" aria-label=\" Treehouse (opens in a new tab)\" href=\"https://teamtreehouse.com\" target=\"_blank\">Treehouse</a>. Forum Markdown is a set of special tags that make displaying code for web projects easy. It can also be used for formatting text and displaying images. But not everyone knows how to use them and of <g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"9\" data-gr-id=\"9\">course</g> there’s always a first time someone comes across it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I hope this post will be useful for people who need help understanding Markdown and its many uses.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Text Formatting</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>First the easy bits; making posts <em>italic </em>and <strong>bold </strong>to add clarity to your post or reinforce a point.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you want to embolden your text, you would <strong>surround the text</strong> in double asterisks, as shown here (**text**). Markdown will then display the text in bold.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Text in italics is just as straight forward, surrounding text <em>with one asterisk</em> on each side. Now, Markdown will display the text in italics.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>bolditalics</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Italic<br> Here’s a word that is *<g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling multiReplace\" id=\"5\" data-gr-id=\"5\">emphasised</g></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Bold<br> Here’s a word that is **bold**</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Writing lists in Markdown</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you want to write lists, simply entering list items on freehand won’t work as the browser will simply treat it as a line space. Luckily Markdown has simple options for formatting lists to a web forum.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The syntax for an unordered list is as follows.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unordered list</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ JavaScript<br>+ PHP<br>+Java<br>+CSS</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ordered lists work the same way. The difference is you add the number of the list item, where the + sign would otherwise be, before the text of the item itself.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ordered List</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Red</li><li>Green</li><li>Blue</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2>Adding images to posts in Markdown</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Images are a great way to add screenshots or <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"6\" data-gr-id=\"6\">alternative</g> way of displaying code. To add images you need to provide a link to the image on the internet. This could be either on your own web server or a path given to by an image hosting website.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The syntax is as follows.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>![alt text](/path/to/img.jpg “Title”)</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With the images markdown syntax you can provide the absolute URL in () as well as the regular image alternative text and title attributes. The image should then show up correctly in your post.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>e.g. ![alternative text](https://s19.postimg.org/6hk1k387j/wordpress_custom.png “Title text”)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Adding Hyperlinks to your post</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Syntax: </strong>The Syntax for adding links to posts via markdown is very straightforward. First, you add the text that you want to display on your link in square brackets. []. Next you need to provide the absolute URL of the link you want to add inside the regular brackets (). The URL must exist somewhere on a web server.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>e.g.  This is an [example link](http://example.com/) </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Adding Code to the forum.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>One of the best things about markdown in forums is its ability to add formatted text that reflects the computer language you want to display.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to display code, you need to wrap your code with 3 backticks <strong>(`)</strong> on the line before and after the code you write.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you specify the language after the first set of backticks markdown will use the syntax highlighting appropriate to the language.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The languages available are numerous.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>HTML</li><li> CSS</li><li> Ruby</li><li> JavaScript</li><li> Java</li><li> PHP</li><li> SQL</li><li> cSharp (C#)</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>If you know the language name to type into the code, it’s probably available in Markdown although the language name is always option and you can simply display formatted regular text.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><code><code><code><code><code><code><code><code><code>```html</code></code></code></code></code></code></code><code><br>&lt;p>This is code&lt;/p><br><code><code><code>```<br>```javascript<br>```</code></code></code></code></code></code></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>And that’s it.  You know the basics of adding code to a forum that uses Markdown code.  I hope this has been useful in showing you how easy it is to add forum markdown to compatible online forums of the internet</p>\n<!-- /wp:paragraph -->', 'How to add code to compatible forums with Markdown', '', 'publish', 'open', 'open', '', 'how-to-add-code-to-compatible-forums-with-markdown', '', '', '2019-02-26 10:56:31', '2019-02-26 10:56:31', '', 0, 'https://blog.jonniegrieve.co.uk/?p=30', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(31, 1, '2019-02-26 10:55:32', '2019-02-26 10:55:32', '<!-- wp:paragraph -->\n<p>I created this post as an attempt to explain forum markdown code for internet forums like those on <a rel=\"noreferrer noopener\" aria-label=\" Treehouse (opens in a new tab)\" href=\"https://teamtreehouse.com\" target=\"_blank\">Treehouse</a>. Forum Markdown is a set of special tags that make displaying code for web projects easy. It can also be used for formatting text and displaying images. But not everyone knows how to use them and of <g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"9\" data-gr-id=\"9\">course</g> there’s always a first time someone comes across it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I hope this post will be useful for people who need help understanding Markdown and its many uses.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Text Formatting</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>First the easy bits; making posts <em>italic </em>and <strong>bold </strong>to add clarity to your post or reinforce a point.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you want to embolden your text, you would <strong>surround the text</strong> in double asterisks, as shown here (**text**). Markdown will then display the text in bold.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Text in italics is just as straight forward, surrounding text <em>with one asterisk</em> on each side. Now, Markdown will display the text in italics.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>bolditalics</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Italic<br> Here’s a word that is *<g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling multiReplace\" id=\"5\" data-gr-id=\"5\">emphasised</g></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Bold<br> Here’s a word that is **bold**</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Writing lists in Markdown</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you want to write lists, simply entering list items on freehand won’t work as the browser will simply treat it as a line space. Luckily Markdown has simple options for formatting lists to a web forum.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The syntax for an unordered list is as follows.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unordered list</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>+ JavaScript<br>+ PHP<br>+Java<br>+CSS</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ordered lists work the same way. The difference is you add the number of the list item, where the + sign would otherwise be, before the text of the item itself.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ordered List</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Red</li><li>Green</li><li>Blue</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2>Adding images to posts in Markdown</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Images are a great way to add screenshots or <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"6\" data-gr-id=\"6\">alternative</g> way of displaying code. To add images you need to provide a link to the image on the internet. This could be either on your own web server or a path given to by an image hosting website.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The syntax is as follows.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>![alt text](/path/to/img.jpg “Title”)</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With the images markdown syntax you can provide the absolute URL in () as well as the regular image alternative text and title attributes. The image should then show up correctly in your post.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>e.g. ![alternative text](https://s19.postimg.org/6hk1k387j/wordpress_custom.png “Title text”)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Adding Hyperlinks to your post</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Syntax: </strong>The Syntax for adding links to posts via markdown is very straightforward. First, you add the text that you want to display on your link in square brackets. []. Next you need to provide the absolute URL of the link you want to add inside the regular brackets (). The URL must exist somewhere on a web server.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>e.g.  This is an [example link](http://example.com/) </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Adding Code to the forum.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>One of the best things about markdown in forums is its ability to add formatted text that reflects the computer language you want to display.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to display code, you need to wrap your code with 3 backticks <strong>(`)</strong> on the line before and after the code you write.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you specify the language after the first set of backticks markdown will use the syntax highlighting appropriate to the language.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The languages available are numerous.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>HTML</li><li> CSS</li><li> Ruby</li><li> JavaScript</li><li> Java</li><li> PHP</li><li> SQL</li><li> cSharp (C#)</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>If you know the language name to type into the code, it’s probably available in Markdown although the language name is always option and you can simply display formatted regular text.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><code><code><code><code><code><code><code><code><code>```html</code></code></code></code></code></code></code><code><br>&lt;p>This is code&lt;/p><br><code><code><code>```<br>```javascript<br>```</code></code></code></code></code></code></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>And that’s it.  You know the basics of adding code to a forum that uses Markdown code.  I hope this has been useful in showing you how easy it is to add forum markdown to compatible online forums of the internet</p>\n<!-- /wp:paragraph -->', 'How to add code to compatible forums with Markdown', '', 'inherit', 'closed', 'closed', '', '30-revision-v1', '', '', '2019-02-26 10:55:32', '2019-02-26 10:55:32', '', 30, 'https://blog.jonniegrieve.co.uk/2019/02/26/30-revision-v1/', 0, 'revision', '', 0),
(32, 1, '2016-05-10 11:08:44', '2016-05-10 10:08:44', '<!-- wp:paragraph -->\n<p>Up until very recently, in fact not even a week ago Git was still very far from my mind.  I was all set up with Git Powershell and the GUI application for Windows but it was still a forgotten about the icon on my desktop. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But <g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"10\" data-gr-id=\"10\">something,</g> always keeps dragging me back.   Repetition. I keep seeing Git projects sourced online.  If I find a web application or project online that’s good for anything it will be hosted on GitHub.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Everyone I have asked tells me that every web application worth their salt is run via Version Control System and the most popular of these is Git. So just before last <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">weekend</g> I got back into it to try and flex my <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"4\" data-gr-id=\"4\">git</g> muscles and try and get over any bugs in the system that have put me off in the past.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I wanted to answer a number of questions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Firstly I’ve been trying to work out what makes Git work, where the files live. One annoying thing is that some of the file paths weren’t visible in Windows Explorer in the Windows environment.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I didn’t quite understand </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>How Git knows where to send files. </li><li>How it authenticates usernames and remote repositories; </li><li>How does Git know How projects of upwards of thousands of “commits” are managed.</li><li>Can I get over this hang up I have in my mind about Git Merge conflicts</li><li>Can I get into the habit of using Git in a large scale project despite having worked all my professional like without <g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation multiReplace\" id=\"10\" data-gr-id=\"10\"><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation multiReplace\" id=\"10\" data-gr-id=\"10\">VCS.</g></g></li><li>All this and more has in the past stopped me from working with Git regularly.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>To answer the first point, it is perfectly natural for Git to work with files “under the bonnet” as it were so they don’t show up in Windows Explorer or Konquerer, or any other file system you use for your platform. But they’re always visible with Git  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>ls -a</p><cite>List every file and directory contained in the current directory (including hidden files)</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>which will show the behind the scenes files that git uses to track changes..</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"6\" data-gr-id=\"6\">terms</g> working out how the command line links with <g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"7\" data-gr-id=\"7\">GitHub</g> I’ve made some recent breakthroughs.  I was scratching my head, endlessly flicking through GitHub, the command line and the documentation... when inspiration struck.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I was able to locate the path to Git by opening the file location and seeing the application in the AppData folder which isn’t openly visible.  Therefore I was able to copy the file path.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Path to Git: C:\\Users\\PC2\\AppData\\Local\\GitHub</p><cite>Typical Path to the Git Executable file</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Another important file path was the ca-bundle CRT file.  In the Git Powershell the path given on my system is this.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>http.sslcainfo=/path/to/Git/mingw64/ssl/certs/ca-bundle.crt</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I noticed that one of the directories was mingw64. I didn’t have that. I only had mingw32.  I didn’t know if that would mean anything in terms of being able to set up cloning of repositories. All that fishing around for the core Git files didn’t seem to help.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But earlier on something weird and unexpected happened. I got an email in my associated GitHub email account telling me a new public key was added.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I didn’t have a clue how that happened or what it meant, but earlier on I had opened the GitHub GUI application and had a poke a round.  A cleaned out a couple of redundant repositories and scanned for the latest ones.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As a test, I attempted to clone a remote repository on Github.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote {\"align\":\"left\"} -->\n<blockquote style=\"text-align:left\" class=\"wp-block-quote\"><p>C:\\path\\to\\repo> git clone http://github.com/username/repo.<br> git<br> Cloning into \'ugliestcss\'…<br> remote: Counting objects: 37, done.<br> remote: Compressing objects: 100% (26/26), done.<br> remote: Total 37 (delta 10), reused 36 (delta 9), pack-reused 0<br> Unpacking objects: 100% (37/37), done.<br> Checking connectivity… done.</p><cite>git clone output in a Git terminal</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I gasped with excitement  I’d just successfully cloned a GitHub repository .</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I pressed on.  If I’ve been able to get on to GitHub and fork a repository to my computer, surely I’ll be able to put my local repository onto my remote. If I’m right, here I next needed to set up the local files to be pushed up to GitHub.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>cd new_repo<br> C:\\path\\to\\repo\\new_repo [master]> git remote add origin https://github.com/jg-digital-media/new_repo.git<br> fatal: remote origin already exists.</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Not exactly encouraging; I didn’t quite know what that meant. but I took a leap of faith. I think it’s telling me that the files are ready to pushed to GitHub. A link to the remote repository as it were</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I just tried the next step</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote {\"align\":\"left\"} -->\n<blockquote style=\"text-align:left\" class=\"wp-block-quote\"><p>C:\\path\\to\\repo\\new_repo [master]> git push origin master<br> Counting objects: 3, done.<br> Delta compression using up to 4 threads.<br> Compressing objects: 100% (2/2), done.<br> Writing objects: 100% (3/3), 787 bytes | 0 bytes/s, done.<br> Total 3 (delta 0), reused 0 (delta 0)<br> To https://github.com/jg-digital-media/new_repo.git</p><cite>Create a link to a github repository and push commits to it.</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:list -->\n<ul><li>[new branch]      master -&gt; master<br>\nC:\\Users\\PC2\\Documents\\GitHub\\new_repo [master]&gt;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>And sure enough the repository, just a simple file at the moment is now up on GitHub.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So what was it that made it work? Opening the GUI application automatically sending an SSH key?  I believe so. I’m reliably informed that behind the scenes the GUI application that ships with Git/GitHub communicates with your GitHub account to create a connection, for each repository so you don#’t have to input a username and password every time you push and pull changes to your work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the last few days I’ve created small repositories with dummy/test work, broken things and started a fresh with new repositories. With practice, I’m getting there and the foggy areas of the Git workflow for me are clearing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote {\"align\":\"left\"} -->\n<blockquote style=\"text-align:left\" class=\"wp-block-quote\"><p>git remote add origin https://github.com/jg-digital-media/new_repo.git<br> git push origin master</p><cite>Command to create a link to a repository and then push commits</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Where the first command creates a connection to a repository called origin (this could in fact be any name you give) the second command actually looks for the repository and sends the updated files to Github, branch by branch with the master branch being the default branch.  You’d have to specify a different branch if you wanted to update the contents of that branch.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So what about large scale projects like WordPress websites or game/software development? Well I suppose that will only come with time spent and self confidence.  The thing to remember about scrolling through the commits is to make them identifiable and memorable.  So long as we make fast and frequent comments to the work the work history will always be there.</p>\n<!-- /wp:paragraph -->', 'Managing projects with Git', '', 'publish', 'open', 'open', '', 'managing-projects-with-git', '', '', '2019-02-26 11:09:31', '2019-02-26 11:09:31', '', 0, 'https://blog.jonniegrieve.co.uk/?p=32', 0, 'post', '', 0),
(33, 1, '2019-02-26 11:08:15', '2019-02-26 11:08:15', '<!-- wp:paragraph -->\n<p>Up until very recently, in fact not even a week ago Git was still very far from my mind.  I was all set up with Git Powershell and the GUI application for Windows but it was still a forgotten about the icon on my desktop. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But <g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"10\" data-gr-id=\"10\">something,</g> always keeps dragging me back.   Repetition. I keep seeing Git projects sourced online.  If I find a web application or project online that’s good for anything it will be hosted on GitHub.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Everyone I have asked tells me that every web application worth their salt is run via Version Control System and the most popular of these is Git. So just before last <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">weekend</g> I got back into it to try and flex my <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"4\" data-gr-id=\"4\">git</g> muscles and try and get over any bugs in the system that have put me off in the past.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I wanted to answer a number of questions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Firstly I’ve been trying to work out what makes Git work, where the files live. One annoying thing is that some of the file paths weren’t visible in Windows Explorer in the Windows environment.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I didn’t quite understand </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>How Git knows where to send files. </li><li>How it authenticates usernames and remote repositories; </li><li>How does Git know How projects of upwards of thousands of “commits” are managed.</li><li>Can I get over this hang up I have in my mind about Git Merge conflicts</li><li>Can I get into the habit of using Git in a large scale project despite having worked all my professional like without <g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation multiReplace\" id=\"10\" data-gr-id=\"10\"><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation multiReplace\" id=\"10\" data-gr-id=\"10\">VCS.</g></g></li><li>All this and more has in the past stopped me from working with Git regularly.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>To answer the first point, it is perfectly natural for Git to work with files “under the bonnet” as it were so they don’t show up in Windows Explorer or Konquerer, or any other file system you use for your platform. But they’re always visible with Git  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>ls -a</p><cite>List every file and directory contained in the current directory (including hidden files)</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>which will show the behind the scenes files that git uses to track changes..</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"6\" data-gr-id=\"6\">terms</g> working out how the command line links with <g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"7\" data-gr-id=\"7\">GitHub</g> I’ve made some recent breakthroughs.  I was scratching my head, endlessly flicking through GitHub, the command line and the documentation... when inspiration struck.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I was able to locate the path to Git by opening the file location and seeing the application in the AppData folder which isn’t openly visible.  Therefore I was able to copy the file path.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Path to Git: C:\\Users\\PC2\\AppData\\Local\\GitHub</p><cite>Typical Path to the Git Executable file</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Another important file path was the ca-bundle CRT file.  In the Git Powershell the path given on my system is this.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>http.sslcainfo=/path/to/Git/mingw64/ssl/certs/ca-bundle.crt</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I noticed that one of the directories was mingw64. I didn’t have that. I only had mingw32.  I didn’t know if that would mean anything in terms of being able to set up cloning of repositories. All that fishing around for the core Git files didn’t seem to help.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But earlier on something weird and unexpected happened. I got an email in my associated GitHub email account telling me a new public key was added.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I didn’t have a clue how that happened or what it meant, but earlier on I had opened the GitHub GUI application and had a poke a round.  A cleaned out a couple of redundant repositories and scanned for the latest ones.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As a test, I attempted to clone a remote repository on Github.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>C:\\path\\to\\repo> git clone http://github.com/username/repo.<br> git<br> Cloning into \'ugliestcss\'…<br> remote: Counting objects: 37, done.<br> remote: Compressing objects: 100% (26/26), done.<br> remote: Total 37 (delta 10), reused 36 (delta 9), pack-reused 0<br> Unpacking objects: 100% (37/37), done.<br> Checking connectivity… done.</p><cite>git clone output in a Git terminal</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I gasped with excitement  I’d just successfully cloned a GitHub repository .</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I pressed on.  If I’ve been able to get on to GitHub and fork a repository to my computer, surely I’ll be able to put my local repository onto my remote. If I’m right, here I next needed to set up the local files to be pushed up to GitHub.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>cd new_repo<br> C:\\path\\to\\repo\\new_repo [master]> git remote add origin https://github.com/jg-digital-media/new_repo.git<br> fatal: remote origin already exists.</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Not exactly encouraging; I didn’t quite know what that meant. but I took a leap of faith. I think it’s telling me that the files are ready to pushed to GitHub. A link to the remote repository as it were</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I just tried the next step</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>C:\\path\\to\\repo\\new_repo [master]> git push origin master<br> Counting objects: 3, done.<br> Delta compression using up to 4 threads.<br> Compressing objects: 100% (2/2), done.<br> Writing objects: 100% (3/3), 787 bytes | 0 bytes/s, done.<br> Total 3 (delta 0), reused 0 (delta 0)<br> To https://github.com/jg-digital-media/new_repo.git</p><cite>Create a link to a github repository and push commits to it.</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:list -->\n<ul><li>[new branch]      master -&gt; master<br>\nC:\\Users\\PC2\\Documents\\GitHub\\new_repo [master]&gt;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>And sure enough the repository, just a simple file at the moment is now up on GitHub.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So what was it that made it work? Opening the GUI application automatically sending an SSH key?  I believe so. I’m reliably informed that behind the scenes the GUI application that ships with Git/GitHub communicates with your GitHub account to create a connection, for each repository so you don#’t have to input a username and password every time you push and pull changes to your work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the last few days I’ve created small repositories with dummy/test work, broken things and started a fresh with new repositories. With practice, I’m getting there and the foggy areas of the Git workflow for me are clearing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>git remote add origin https://github.com/jg-digital-media/new_repo.git<br> git push origin master</p><cite>Command to create a link to a repository and then push commits</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Where the first command creates a connection to a repository called origin (this could in fact be any name you give) the second command actually looks for the repository and sends the updated files to Github, branch by branch with the master branch being the default branch.  You’d have to specify a different branch if you wanted to update the contents of that branch.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So what about large scale projects like WordPress websites or game/software development? Well I suppose that will only come with time spent and self confidence.  The thing to remember about scrolling through the commits is to make them identifiable and memorable.  So long as we make fast and frequent comments to the work the work history will always be there.</p>\n<!-- /wp:paragraph -->', 'Managing projects with Git', '', 'inherit', 'closed', 'closed', '', '32-revision-v1', '', '', '2019-02-26 11:08:15', '2019-02-26 11:08:15', '', 32, 'https://blog.jonniegrieve.co.uk/2019/02/26/32-revision-v1/', 0, 'revision', '', 0),
(34, 1, '2019-02-26 11:08:44', '2019-02-26 11:08:44', '<!-- wp:paragraph -->\n<p>Up until very recently, in fact not even a week ago Git was still very far from my mind.  I was all set up with Git Powershell and the GUI application for Windows but it was still a forgotten about the icon on my desktop. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But <g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"10\" data-gr-id=\"10\">something,</g> always keeps dragging me back.   Repetition. I keep seeing Git projects sourced online.  If I find a web application or project online that’s good for anything it will be hosted on GitHub.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Everyone I have asked tells me that every web application worth their salt is run via Version Control System and the most popular of these is Git. So just before last <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\">weekend</g> I got back into it to try and flex my <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"4\" data-gr-id=\"4\">git</g> muscles and try and get over any bugs in the system that have put me off in the past.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I wanted to answer a number of questions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Firstly I’ve been trying to work out what makes Git work, where the files live. One annoying thing is that some of the file paths weren’t visible in Windows Explorer in the Windows environment.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I didn’t quite understand </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>How Git knows where to send files. </li><li>How it authenticates usernames and remote repositories; </li><li>How does Git know How projects of upwards of thousands of “commits” are managed.</li><li>Can I get over this hang up I have in my mind about Git Merge conflicts</li><li>Can I get into the habit of using Git in a large scale project despite having worked all my professional like without <g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation multiReplace\" id=\"10\" data-gr-id=\"10\"><g class=\"gr_ gr_10 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation multiReplace\" id=\"10\" data-gr-id=\"10\">VCS.</g></g></li><li>All this and more has in the past stopped me from working with Git regularly.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>To answer the first point, it is perfectly natural for Git to work with files “under the bonnet” as it were so they don’t show up in Windows Explorer or Konquerer, or any other file system you use for your platform. But they’re always visible with Git  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>ls -a</p><cite>List every file and directory contained in the current directory (including hidden files)</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>which will show the behind the scenes files that git uses to track changes..</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"6\" data-gr-id=\"6\">terms</g> working out how the command line links with <g class=\"gr_ gr_7 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"7\" data-gr-id=\"7\">GitHub</g> I’ve made some recent breakthroughs.  I was scratching my head, endlessly flicking through GitHub, the command line and the documentation... when inspiration struck.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I was able to locate the path to Git by opening the file location and seeing the application in the AppData folder which isn’t openly visible.  Therefore I was able to copy the file path.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Path to Git: C:\\Users\\PC2\\AppData\\Local\\GitHub</p><cite>Typical Path to the Git Executable file</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Another important file path was the ca-bundle CRT file.  In the Git Powershell the path given on my system is this.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>http.sslcainfo=/path/to/Git/mingw64/ssl/certs/ca-bundle.crt</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I noticed that one of the directories was mingw64. I didn’t have that. I only had mingw32.  I didn’t know if that would mean anything in terms of being able to set up cloning of repositories. All that fishing around for the core Git files didn’t seem to help.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But earlier on something weird and unexpected happened. I got an email in my associated GitHub email account telling me a new public key was added.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I didn’t have a clue how that happened or what it meant, but earlier on I had opened the GitHub GUI application and had a poke a round.  A cleaned out a couple of redundant repositories and scanned for the latest ones.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As a test, I attempted to clone a remote repository on Github.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote {\"align\":\"left\"} -->\n<blockquote style=\"text-align:left\" class=\"wp-block-quote\"><p>C:\\path\\to\\repo> git clone http://github.com/username/repo.<br> git<br> Cloning into \'ugliestcss\'…<br> remote: Counting objects: 37, done.<br> remote: Compressing objects: 100% (26/26), done.<br> remote: Total 37 (delta 10), reused 36 (delta 9), pack-reused 0<br> Unpacking objects: 100% (37/37), done.<br> Checking connectivity… done.</p><cite>git clone output in a Git terminal</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I gasped with excitement  I’d just successfully cloned a GitHub repository .</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I pressed on.  If I’ve been able to get on to GitHub and fork a repository to my computer, surely I’ll be able to put my local repository onto my remote. If I’m right, here I next needed to set up the local files to be pushed up to GitHub.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>cd new_repo<br> C:\\path\\to\\repo\\new_repo [master]> git remote add origin https://github.com/jg-digital-media/new_repo.git<br> fatal: remote origin already exists.</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Not exactly encouraging; I didn’t quite know what that meant. but I took a leap of faith. I think it’s telling me that the files are ready to pushed to GitHub. A link to the remote repository as it were</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I just tried the next step</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote {\"align\":\"left\"} -->\n<blockquote style=\"text-align:left\" class=\"wp-block-quote\"><p>C:\\path\\to\\repo\\new_repo [master]> git push origin master<br> Counting objects: 3, done.<br> Delta compression using up to 4 threads.<br> Compressing objects: 100% (2/2), done.<br> Writing objects: 100% (3/3), 787 bytes | 0 bytes/s, done.<br> Total 3 (delta 0), reused 0 (delta 0)<br> To https://github.com/jg-digital-media/new_repo.git</p><cite>Create a link to a github repository and push commits to it.</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:list -->\n<ul><li>[new branch]      master -&gt; master<br>\nC:\\Users\\PC2\\Documents\\GitHub\\new_repo [master]&gt;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>And sure enough the repository, just a simple file at the moment is now up on GitHub.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So what was it that made it work? Opening the GUI application automatically sending an SSH key?  I believe so. I’m reliably informed that behind the scenes the GUI application that ships with Git/GitHub communicates with your GitHub account to create a connection, for each repository so you don#’t have to input a username and password every time you push and pull changes to your work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the last few days I’ve created small repositories with dummy/test work, broken things and started a fresh with new repositories. With practice, I’m getting there and the foggy areas of the Git workflow for me are clearing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote {\"align\":\"left\"} -->\n<blockquote style=\"text-align:left\" class=\"wp-block-quote\"><p>git remote add origin https://github.com/jg-digital-media/new_repo.git<br> git push origin master</p><cite>Command to create a link to a repository and then push commits</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Where the first command creates a connection to a repository called origin (this could in fact be any name you give) the second command actually looks for the repository and sends the updated files to Github, branch by branch with the master branch being the default branch.  You’d have to specify a different branch if you wanted to update the contents of that branch.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So what about large scale projects like WordPress websites or game/software development? Well I suppose that will only come with time spent and self confidence.  The thing to remember about scrolling through the commits is to make them identifiable and memorable.  So long as we make fast and frequent comments to the work the work history will always be there.</p>\n<!-- /wp:paragraph -->', 'Managing projects with Git', '', 'inherit', 'closed', 'closed', '', '32-revision-v1', '', '', '2019-02-26 11:08:44', '2019-02-26 11:08:44', '', 32, 'https://blog.jonniegrieve.co.uk/2019/02/26/32-revision-v1/', 0, 'revision', '', 0),
(35, 1, '2018-03-15 09:00:19', '2018-03-15 09:00:19', '<!-- wp:paragraph -->\n<p>This morning I looked at my Chrome Browser extensions. I have plenty that I’ve installed over the years. Many of them are about as used as an old book collecting dust on my shelf.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Many of them I’ve downloaded because it was a recommended extension of a course I was following.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Tools like:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>React Developer Tools</li><li> JWT Analyser and Inspector</li><li> JSON Formatter</li><li> ng-inspector for Angular</li><li> Augury (linked to what particular language again?</li><li> Redux Dev Tools</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Now that’s not to say that they haven’t been useful to me or they never will be useful again. I’m sure they’re perfectly good extensions. The point I’m trying to make is this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I am out of practice with all of them.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is just the same for all the languages and technologies out there.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That is not a problem unique to me, I am sure. But there is simply not enough time in my day to keep my skills sharp on everything and I have a brain that needs repetition to let complex tasks and instructions sink in.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So as you can imagine, that is the sort of environment I need to even have a hope of making my ideas a reality. Time, patience, repetition.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Last year I started learning Android Development properly, following on from learning the basics of Java a year or 2 earlier.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I had a few ideas in mind for apps I wanted to develop and I went into it with all the confidence and will in the world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But it’s a tough journey for all of us to stick with it and when your brain is as neuro-diverse as mine, requiring all of your concentration, it is energy and motivation-sapping.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Several things have forced me to stall on that particular path. Losing time for constant Android Studio Updates due to a less than speedy internet connection and lacking the time to practice the concepts I’ve been taught.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Because I also need to keep up with JavaScript. I also want to keep up with Node.js for server-side scripting. I also want to keep up with my web design skills and keep those sharp. And I need to make money for my business as well. Those are just a few examples. I cannot do everything at once.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If I accept all of that, everything is fine and I keep learning at my own pace. But even that is tricky because I still yearn to be like everyone else, even though I can’t.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I don’t say all of this to put myself down or tell myself I’m any less worthy than anyone else. I just hope this short blog gives everyone a little window into the extra challenges I face every day as I chase my dreams in the world of tech.</p>\n<!-- /wp:paragraph -->', 'My brain and keeping my motivation up', '', 'publish', 'open', 'open', '', 'my-brain-and-keeping-my-motivation-up', '', '', '2019-02-26 11:11:51', '2019-02-26 11:11:51', '', 0, 'https://blog.jonniegrieve.co.uk/?p=35', 0, 'post', '', 0),
(36, 1, '2019-02-26 11:11:50', '2019-02-26 11:11:50', '<!-- wp:paragraph -->\n<p>This morning I looked at my Chrome Browser extensions. I have plenty that I’ve installed over the years. Many of them are about as used as an old book collecting dust on my shelf.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Many of them I’ve downloaded because it was a recommended extension of a course I was following.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Tools like:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>React Developer Tools</li><li> JWT Analyser and Inspector</li><li> JSON Formatter</li><li> ng-inspector for Angular</li><li> Augury (linked to what particular language again?</li><li> Redux Dev Tools</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Now that’s not to say that they haven’t been useful to me or they never will be useful again. I’m sure they’re perfectly good extensions. The point I’m trying to make is this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I am out of practice with all of them.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is just the same for all the languages and technologies out there.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That is not a problem unique to me, I am sure. But there is simply not enough time in my day to keep my skills sharp on everything and I have a brain that needs repetition to let complex tasks and instructions sink in.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So as you can imagine, that is the sort of environment I need to even have a hope of making my ideas a reality. Time, patience, repetition.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Last year I started learning Android Development properly, following on from learning the basics of Java a year or 2 earlier.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I had a few ideas in mind for apps I wanted to develop and I went into it with all the confidence and will in the world.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But it’s a tough journey for all of us to stick with it and when your brain is as neuro-diverse as mine, requiring all of your concentration, it is energy and motivation-sapping.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Several things have forced me to stall on that particular path. Losing time for constant Android Studio Updates due to a less than speedy internet connection and lacking the time to practice the concepts I’ve been taught.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Because I also need to keep up with JavaScript. I also want to keep up with Node.js for server-side scripting. I also want to keep up with my web design skills and keep those sharp. And I need to make money for my business as well. Those are just a few examples. I cannot do everything at once.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If I accept all of that, everything is fine and I keep learning at my own pace. But even that is tricky because I still yearn to be like everyone else, even though I can’t.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I don’t say all of this to put myself down or tell myself I’m any less worthy than anyone else. I just hope this short blog gives everyone a little window into the extra challenges I face every day as I chase my dreams in the world of tech.</p>\n<!-- /wp:paragraph -->', 'My brain and keeping my motivation up', '', 'inherit', 'closed', 'closed', '', '35-revision-v1', '', '', '2019-02-26 11:11:50', '2019-02-26 11:11:50', '', 35, 'https://blog.jonniegrieve.co.uk/2019/02/26/35-revision-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(37, 1, '2016-10-28 09:00:17', '2016-10-28 08:00:17', '<!-- wp:paragraph -->\n<p>So in recent weeks my learning attention has switched from Java to PHP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When I was doing my<strong> HNC</strong> (<strong>H</strong>igher <strong>N</strong>ational <strong>C</strong>ertificate), a couple of years before I started my degree I was faced with a challenging individual project. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It was a very difficult time and a crossroads in my academic life. I faced failure and learning how to pick myself up again. The project I spoke of involved learning how to connect a website to a database.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>During my project. I had a project tutor. Every week he would ask me about something called a “confidence test” which was a very particular particular process referring to making a successful connection to a database. &nbsp;I did try but I could never manage it. And it transpired I was trying to do something I had no experience in doing from my course.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the project I ended up doing have to attempt in the end and bizarrely, it was the only module I ended up passing in my HNC but I failed that year. I had to take that hit and try again the next year.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Fast forward nearly a decade and I did pass my HNC in the end; I did go on to get a Higher National Diploma (HND); I did get my degree.  And I have gone onto tackle database connections again. This time I have made successful connections and my “confidence” in that regard has increased.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I am now learning how to create webpages that interact with databases in different ways. creating records, reading data, updating those records and deleting them. In other words all the basic interactions with data that fall under the term&nbsp;<strong>CRUD</strong>.&nbsp;<strong>C</strong>reate,&nbsp;<strong>R</strong>ead,&nbsp;<strong>U</strong>pdate,&nbsp;<strong>D</strong>elete.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Today, with a bit of painstaking research I solved a major problem that was holding my back in a small personal development project.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I was so sure that I was following the video tutorial to the letter but there was just one or 2 little differences in my code that caused the bugs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Imagine a simple web page with a drop down box, which is a form element and a button that is going to bring up a report based on data that lives in a database. &nbsp;There was a problem in that no data was being return but I kept getting this PHP notice on the page.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<table class=\"wp-block-table\"><tbody><tr><td>1</td><td>&lt;strong&gt;Notice: Undefined offset: 1 <strong>in</strong> C:\\path\\<strong>to</strong>\\file\\functions.php on line 52&lt;/strong&gt;</td></tr></tbody></table>\n<!-- /wp:table -->\n\n<!-- wp:paragraph -->\n<p>So somewhere along the line not all the data, (or none of the data at all was being retrieved and passed to the function. Eventually I traced the issue to 2 small typos.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first thing was I needed include the colon in my first echo string for the option value. I’m not sure what makes that work but I think it’s something to do with the query string. Not having it meant a property wasn’t carried over causing the offset warning.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<table class=\"wp-block-table\"><tbody><tr><td>12345678</td><td>&lt;strong&gt;&lt;span <strong>class</strong>=\"cp\"&gt;&amp;lt;?php&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"k\"&gt;<strong>foreach</strong>&lt;/span&gt; &lt;span <strong>class</strong>=\"p\"&gt;(&lt;/span&gt;&lt;span <strong>class</strong>=\"nx\"&gt;get_project_list&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;()&lt;/span&gt; &lt;span <strong>class</strong>=\"k\"&gt;<strong>as</strong>&lt;/span&gt; &lt;span <strong>class</strong>=\"nv\"&gt;$option&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;)&lt;/span&gt; &lt;span <strong>class</strong>=\"p\"&gt;{&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"k\"&gt;echo&lt;/span&gt; &lt;span <strong>class</strong>=\"s1\"&gt;\'&amp;lt;option value=\"project:\"\'&lt;/span&gt; &lt;span <strong>class</strong>=\"o\"&gt;.&lt;/span&gt; &lt;span <strong>class</strong>=\"nv\"&gt;$option&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;[&lt;/span&gt;&lt;span <strong>class</strong>=\"s1\"&gt;\'project_id\'&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;]&lt;/span&gt; &lt;span <strong>class</strong>=\"o\"&gt;.&lt;/span&gt; &lt;span <strong>class</strong>=\"s1\"&gt;\'\"&amp;gt;\'&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"k\"&gt;echo&lt;/span&gt; &lt;span <strong>class</strong>=\"nv\"&gt;$option&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;[&lt;/span&gt;&lt;span <strong>class</strong>=\"s1\"&gt;\'title\'&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;]&lt;/span&gt; &lt;span <strong>class</strong>=\"o\"&gt;.&lt;/span&gt; &lt;span <strong>class</strong>=\"s2\"&gt;\"&amp;lt;/option&amp;gt;&lt;/span&gt;&lt;span class=\"se\"&gt;\\n&lt;/span&gt;&lt;span class=\"s2\"&gt;\"&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"p\"&gt;}&lt;/span&gt;&nbsp;&lt;span <strong>class</strong>=\"cp\"&gt;?&amp;gt;&lt;/span&gt;&lt;/strong&gt;</td></tr></tbody></table>\n<!-- /wp:table -->\n\n<!-- wp:paragraph -->\n<p>So now when I tested the form I was getting this query string in the URL.<br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<table class=\"wp-block-table\"><tbody><tr><td>1</td><td>&lt;strong&gt; filter=project%3A&lt;/strong&gt;</td></tr></tbody></table>\n<!-- /wp:table -->\n\n<!-- wp:paragraph -->\n<p>But having solved&nbsp;one problem, it seemed report wasn’t generating any tasks or totals when I tested the drop down. With a keen eye, I noticed that the query string wasn’t carrying a last number in the URL; the number identifying an individual record which is a project ID.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I traced the problem to the same function. One of the things about working with soft and hard quotes is knowing when to use them and in what combination. It seems like I trying to apply a hard quote into the reference to the project ID even though this was concatenated in.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<table class=\"wp-block-table\"><tbody><tr><td>123456789</td><td>&lt;strong&gt;&lt;span <strong>class</strong>=\"cp\"&gt;&amp;lt;?php&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"k\"&gt;<strong>foreach</strong>&lt;/span&gt; &lt;span <strong>class</strong>=\"p\"&gt;(&lt;/span&gt;&lt;span <strong>class</strong>=\"nx\"&gt;get_project_list&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;()&lt;/span&gt; &lt;span <strong>class</strong>=\"k\"&gt;<strong>as</strong>&lt;/span&gt; &lt;span <strong>class</strong>=\"nv\"&gt;$option&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;)&lt;/span&gt; &lt;span <strong>class</strong>=\"p\"&gt;{&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"k\"&gt;echo&lt;/span&gt; &lt;span <strong>class</strong>=\"s1\"&gt;\'&amp;lt;option value=\"project:\'&lt;/span&gt; &lt;span <strong>class</strong>=\"o\"&gt;.&lt;/span&gt; &lt;span <strong>class</strong>=\"nv\"&gt;$option&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;[&lt;/span&gt;&lt;span <strong>class</strong>=\"s1\"&gt;\'project_id\'&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;]&lt;/span&gt; &lt;span <strong>class</strong>=\"o\"&gt;.&lt;/span&gt; &lt;span <strong>class</strong>=\"s1\"&gt;\'\"&amp;gt;\'&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"k\"&gt;echo&lt;/span&gt; &lt;span <strong>class</strong>=\"nv\"&gt;$option&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;[&lt;/span&gt;&lt;span <strong>class</strong>=\"s1\"&gt;\'title\'&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;]&lt;/span&gt; &lt;span <strong>class</strong>=\"o\"&gt;.&lt;/span&gt; &lt;span <strong>class</strong>=\"s2\"&gt;\"&amp;lt;/option&amp;gt;&lt;/span&gt;&lt;span class=\"se\"&gt;\\n&lt;/span&gt;&lt;span class=\"s2\"&gt;\"&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"p\"&gt;}&lt;/span&gt;&nbsp;&lt;span <strong>class</strong>=\"cp\"&gt;?&amp;gt;&lt;/span&gt;&lt;/strong&gt;</td></tr></tbody></table>\n<!-- /wp:table -->\n\n<!-- wp:paragraph -->\n<p>So another day passed and a new learning experience. Now, database connections aren’t such a mystery and are not so daunting. Hopefully I’m going to learn a few more things about CRUD too.</p>\n<!-- /wp:paragraph -->', 'Websites and interacting with databases', '', 'publish', 'open', 'open', '', 'websites-and-interacting-with-databases', '', '', '2019-02-26 11:19:05', '2019-02-26 11:19:05', '', 0, 'https://blog.jonniegrieve.co.uk/?p=37', 0, 'post', '', 0),
(38, 1, '2019-02-26 11:19:05', '2019-02-26 11:19:05', '<!-- wp:paragraph -->\n<p>So in recent weeks my learning attention has switched from Java to PHP.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When I was doing my<strong> HNC</strong> (<strong>H</strong>igher <strong>N</strong>ational <strong>C</strong>ertificate), a couple of years before I started my degree I was faced with a challenging individual project. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It was a very difficult time and a crossroads in my academic life. I faced failure and learning how to pick myself up again. The project I spoke of involved learning how to connect a website to a database.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>During my project. I had a project tutor. Every week he would ask me about something called a “confidence test” which was a very particular particular process referring to making a successful connection to a database. &nbsp;I did try but I could never manage it. And it transpired I was trying to do something I had no experience in doing from my course.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the project I ended up doing have to attempt in the end and bizarrely, it was the only module I ended up passing in my HNC but I failed that year. I had to take that hit and try again the next year.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Fast forward nearly a decade and I did pass my HNC in the end; I did go on to get a Higher National Diploma (HND); I did get my degree.  And I have gone onto tackle database connections again. This time I have made successful connections and my “confidence” in that regard has increased.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I am now learning how to create webpages that interact with databases in different ways. creating records, reading data, updating those records and deleting them. In other words all the basic interactions with data that fall under the term&nbsp;<strong>CRUD</strong>.&nbsp;<strong>C</strong>reate,&nbsp;<strong>R</strong>ead,&nbsp;<strong>U</strong>pdate,&nbsp;<strong>D</strong>elete.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Today, with a bit of painstaking research I solved a major problem that was holding my back in a small personal development project.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I was so sure that I was following the video tutorial to the letter but there was just one or 2 little differences in my code that caused the bugs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Imagine a simple web page with a drop down box, which is a form element and a button that is going to bring up a report based on data that lives in a database. &nbsp;There was a problem in that no data was being return but I kept getting this PHP notice on the page.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<table class=\"wp-block-table\"><tbody><tr><td>1</td><td>&lt;strong&gt;Notice: Undefined offset: 1 <strong>in</strong> C:\\path\\<strong>to</strong>\\file\\functions.php on line 52&lt;/strong&gt;</td></tr></tbody></table>\n<!-- /wp:table -->\n\n<!-- wp:paragraph -->\n<p>So somewhere along the line not all the data, (or none of the data at all was being retrieved and passed to the function. Eventually I traced the issue to 2 small typos.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first thing was I needed include the colon in my first echo string for the option value. I’m not sure what makes that work but I think it’s something to do with the query string. Not having it meant a property wasn’t carried over causing the offset warning.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<table class=\"wp-block-table\"><tbody><tr><td>12345678</td><td>&lt;strong&gt;&lt;span <strong>class</strong>=\"cp\"&gt;&amp;lt;?php&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"k\"&gt;<strong>foreach</strong>&lt;/span&gt; &lt;span <strong>class</strong>=\"p\"&gt;(&lt;/span&gt;&lt;span <strong>class</strong>=\"nx\"&gt;get_project_list&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;()&lt;/span&gt; &lt;span <strong>class</strong>=\"k\"&gt;<strong>as</strong>&lt;/span&gt; &lt;span <strong>class</strong>=\"nv\"&gt;$option&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;)&lt;/span&gt; &lt;span <strong>class</strong>=\"p\"&gt;{&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"k\"&gt;echo&lt;/span&gt; &lt;span <strong>class</strong>=\"s1\"&gt;\'&amp;lt;option value=\"project:\"\'&lt;/span&gt; &lt;span <strong>class</strong>=\"o\"&gt;.&lt;/span&gt; &lt;span <strong>class</strong>=\"nv\"&gt;$option&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;[&lt;/span&gt;&lt;span <strong>class</strong>=\"s1\"&gt;\'project_id\'&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;]&lt;/span&gt; &lt;span <strong>class</strong>=\"o\"&gt;.&lt;/span&gt; &lt;span <strong>class</strong>=\"s1\"&gt;\'\"&amp;gt;\'&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"k\"&gt;echo&lt;/span&gt; &lt;span <strong>class</strong>=\"nv\"&gt;$option&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;[&lt;/span&gt;&lt;span <strong>class</strong>=\"s1\"&gt;\'title\'&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;]&lt;/span&gt; &lt;span <strong>class</strong>=\"o\"&gt;.&lt;/span&gt; &lt;span <strong>class</strong>=\"s2\"&gt;\"&amp;lt;/option&amp;gt;&lt;/span&gt;&lt;span class=\"se\"&gt;\\n&lt;/span&gt;&lt;span class=\"s2\"&gt;\"&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"p\"&gt;}&lt;/span&gt;&nbsp;&lt;span <strong>class</strong>=\"cp\"&gt;?&amp;gt;&lt;/span&gt;&lt;/strong&gt;</td></tr></tbody></table>\n<!-- /wp:table -->\n\n<!-- wp:paragraph -->\n<p>So now when I tested the form I was getting this query string in the URL.<br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<table class=\"wp-block-table\"><tbody><tr><td>1</td><td>&lt;strong&gt; filter=project%3A&lt;/strong&gt;</td></tr></tbody></table>\n<!-- /wp:table -->\n\n<!-- wp:paragraph -->\n<p>But having solved&nbsp;one problem, it seemed report wasn’t generating any tasks or totals when I tested the drop down. With a keen eye, I noticed that the query string wasn’t carrying a last number in the URL; the number identifying an individual record which is a project ID.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I traced the problem to the same function. One of the things about working with soft and hard quotes is knowing when to use them and in what combination. It seems like I trying to apply a hard quote into the reference to the project ID even though this was concatenated in.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<table class=\"wp-block-table\"><tbody><tr><td>123456789</td><td>&lt;strong&gt;&lt;span <strong>class</strong>=\"cp\"&gt;&amp;lt;?php&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"k\"&gt;<strong>foreach</strong>&lt;/span&gt; &lt;span <strong>class</strong>=\"p\"&gt;(&lt;/span&gt;&lt;span <strong>class</strong>=\"nx\"&gt;get_project_list&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;()&lt;/span&gt; &lt;span <strong>class</strong>=\"k\"&gt;<strong>as</strong>&lt;/span&gt; &lt;span <strong>class</strong>=\"nv\"&gt;$option&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;)&lt;/span&gt; &lt;span <strong>class</strong>=\"p\"&gt;{&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"k\"&gt;echo&lt;/span&gt; &lt;span <strong>class</strong>=\"s1\"&gt;\'&amp;lt;option value=\"project:\'&lt;/span&gt; &lt;span <strong>class</strong>=\"o\"&gt;.&lt;/span&gt; &lt;span <strong>class</strong>=\"nv\"&gt;$option&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;[&lt;/span&gt;&lt;span <strong>class</strong>=\"s1\"&gt;\'project_id\'&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;]&lt;/span&gt; &lt;span <strong>class</strong>=\"o\"&gt;.&lt;/span&gt; &lt;span <strong>class</strong>=\"s1\"&gt;\'\"&amp;gt;\'&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"k\"&gt;echo&lt;/span&gt; &lt;span <strong>class</strong>=\"nv\"&gt;$option&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;[&lt;/span&gt;&lt;span <strong>class</strong>=\"s1\"&gt;\'title\'&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;]&lt;/span&gt; &lt;span <strong>class</strong>=\"o\"&gt;.&lt;/span&gt; &lt;span <strong>class</strong>=\"s2\"&gt;\"&amp;lt;/option&amp;gt;&lt;/span&gt;&lt;span class=\"se\"&gt;\\n&lt;/span&gt;&lt;span class=\"s2\"&gt;\"&lt;/span&gt;&lt;span <strong>class</strong>=\"p\"&gt;;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span <strong>class</strong>=\"p\"&gt;}&lt;/span&gt;&nbsp;&lt;span <strong>class</strong>=\"cp\"&gt;?&amp;gt;&lt;/span&gt;&lt;/strong&gt;</td></tr></tbody></table>\n<!-- /wp:table -->\n\n<!-- wp:paragraph -->\n<p>So another day passed and a new learning experience. Now, database connections aren’t such a mystery and are not so daunting. Hopefully I’m going to learn a few more things about CRUD too.</p>\n<!-- /wp:paragraph -->', 'Websites and interacting with databases', '', 'inherit', 'closed', 'closed', '', '37-revision-v1', '', '', '2019-02-26 11:19:05', '2019-02-26 11:19:05', '', 37, 'https://blog.jonniegrieve.co.uk/2019/02/26/37-revision-v1/', 0, 'revision', '', 0),
(39, 1, '2019-02-27 11:06:47', '2019-02-27 11:06:47', '', 'Back to JGDM', '', 'publish', 'closed', 'closed', '', 'back-to-jgdm', '', '', '2019-02-27 11:06:47', '2019-02-27 11:06:47', '', 0, 'https://blog.jonniegrieve.co.uk/?p=39', 3, 'nav_menu_item', '', 0),
(40, 1, '2019-02-28 12:54:49', '2019-02-28 12:54:49', '<!-- wp:paragraph -->\n<p>Today I relaunched my website for <a href=\"https://www.jonniegrieve.co.uk\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"Jonnie Grieve Digital Media (opens in a new tab)\">Jonnie Grieve Digital Media</a>.  I may be biased but I feel it\'s my most stylish, accessible and easiest to read yet.  I am however open to feedback about how I can improve things even more</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Most things about my business stay largely the same. I still believe I can offer you some of the most competitive rates for Web Design, Multimedia Design and Social media work you can get for an independent business with no compromise on quality.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here\'s a reminder of web design and business rates.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>WEB DESIGN: Flat Rate:</strong><br> £220: 1 – 5 pages<br> £250: 6 – 10 pages<br> £300: 10 – 15 pages<br> £400: 15+ pages</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Hourly Rate:</strong><br> £20</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Monthly Rate:</strong><br> £20 - £30 pcm (excluding hosting and domain rates)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>SOCIAL MEDIA: Monthly Rate:</strong><br> FROM £25 pcm </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">[evp_embed_video url=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/video.mp4\"]</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>I truly hope you will agree, my prices \"...really do take some beating!\". Contact me via my website if you would like more information on how my packages work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One I offer no real promises on is SEO. Which means <strong>S</strong>earch <strong>E</strong>ngine <strong>O</strong>ptimisation.  To get your website to the top of the most popular search engines is hard work. Proper Hard work the likes of which good money is spent not only to get to the stop but to stay there. It is one of the most competitive markets in the online work. You are always and forever somebody else\'s competition.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Having said all of this I do all I can, always, to make sure your website is up to standards that Google and other Web crawlers can find your website and meets their algorithms which means if you choose me to design your website, it should get noticed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In my new <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\"><a href=\"https://www.jonniegrieve.co.uk\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"website (opens in a new tab)\">website</a></g> you will be greeted with a stylish preview of some of my website designs for clients and other work.  <br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You will find a link to blogs like this one to keep you up to date with what\'s happening at Jonnie Grieve Digital Media.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll find a link to testimonials from people who have worked with me in the past. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll find A way to get in touch with me if you need me for any reason (other than pointless spam).  You can also connect with me via my various social media channels. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I also dedicate a section of my website to talking about <strong>Dyspraxia</strong>. Get in touch if you would like to talk with me further about this interesting but not well known topic.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Log on to <a href=\"https://www.jonniegrieve.co.uk\">https://www.jonniegrieve.co.uk</a> if you haven\'t already and let me know if you have any other questions or feedback. I can\'t wait to see what we can do together.</p>\n<!-- /wp:paragraph -->', 'My New Website is Here!', '', 'publish', 'open', 'open', '', 'my-new-website-is-here', '', '', '2019-02-28 12:54:50', '2019-02-28 12:54:50', '', 0, 'https://blog.jonniegrieve.co.uk/?p=40', 0, 'post', '', 0),
(41, 1, '2019-02-28 12:41:37', '2019-02-28 12:41:37', '<!-- wp:paragraph -->\n<p>Today I relaunched my website for Jonnie Grieve Digital Media.  I may be biased but I feel it\'s my most stylish, accessible and easiest to read yet.  I am however open to feedback about how I can improve things even more</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Most things about my business stay largely the same. I still believe I can offer you some of the most competitive rates for Web Design, Multimedia Design and Social media work you can get for an indepedent business with no compromise on quality.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here\'s a reminder of web design and business rates.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>WEB DESIGN: Flat Rate:<br>\n£220: 1 – 5 pages<br>\n£250: 6 – 10 pages<br>\n£300: 10 – 15 pages<br>\n£400: 15+ pages</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Hourly Rate:<br>\n£20</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Monthly Rate:<br>\n£20 - £30 pcm (excluding hosting and domain rates)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>SOCIAL MEDIA: Monthly Rate:<br>\nFROM £25 pcm </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://www.jonniegrieve.co.uk/assets/video.mp4\">https://www.jonniegrieve.co.uk/assets/video.mp4</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I truly hope you will agree, my prices \"Really do take some beating!\" Contact me via my website if you would like more information on how my packages work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One I offer no real promises on is SEO. Which is Search Engine Optimisation.  To get your website to the top of the most popular search engines is hard work. Proper Hard work the likes of which good money is spent not only to get to the stop but to stay there.  It is one of the most competitive markets in the online work. You are always and forever somebdoy elses competition.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Having said all of this I do all I can, always, to make sure your website is up to standards that Google and other Web crawlers can find your website and meets their algorithms which means if you choose me to design your website, it should get noticed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In my new website you will be greeted with a stylish preview of some of my website designs for clients and other work.  <br>\nYou will find a link to blogs like this one to keep you up to date with what\'s happening at Jonnie Grieve Digital Media.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll find a link to testimonials from people who have worked with me in the past. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll find A way to get in touch with me if you need me for any reason (other than pointless spam).  You can also connect with me via my various social media channels. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I also dedicate a section of my website to talking about Dyspraxia. Get in touch if you would like to talk with me further about this interesting but not well known topic.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Log on to https://www.jonniegrieve.co.uk if you haven\'t already and let me know if you have any other questions or feedback.  I can\'t wait to see what we can do together.</p>\n<!-- /wp:paragraph -->', 'My New Website is Here!', '', 'inherit', 'closed', 'closed', '', '40-revision-v1', '', '', '2019-02-28 12:41:37', '2019-02-28 12:41:37', '', 40, 'https://blog.jonniegrieve.co.uk/40-revision-v1/', 0, 'revision', '', 0),
(42, 1, '2019-02-28 12:43:28', '2019-02-28 12:43:28', '', 'video', '', 'inherit', 'open', 'closed', '', 'video', '', '', '2019-02-28 12:43:28', '2019-02-28 12:43:28', '', 0, 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/video.mp4', 0, 'attachment', 'video/mp4', 0),
(43, 1, '2019-02-28 12:45:49', '2019-02-28 12:45:49', '<!-- wp:paragraph -->\n<p>Today I relaunched my website for Jonnie Grieve Digital Media.  I may be biased but I feel it\'s my most stylish, accessible and easiest to read yet.  I am however open to feedback about how I can improve things even more</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Most things about my business stay largely the same. I still believe I can offer you some of the most competitive rates for Web Design, Multimedia Design and Social media work you can get for an indepedent business with no compromise on quality.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here\'s a reminder of web design and business rates.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>WEB DESIGN: Flat Rate:<br>\n£220: 1 – 5 pages<br>\n£250: 6 – 10 pages<br>\n£300: 10 – 15 pages<br>\n£400: 15+ pages</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Hourly Rate:<br>\n£20</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Monthly Rate:<br>\n£20 - £30 pcm (excluding hosting and domain rates)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>SOCIAL MEDIA: Monthly Rate:<br>\nFROM £25 pcm </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I truly hope you will agree, my prices \"Really do take some beating!\" Contact me via my website if you would like more information on how my packages work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One I offer no real promises on is SEO. Which is Search Engine Optimisation.  To get your website to the top of the most popular search engines is hard work. Proper Hard work the likes of which good money is spent not only to get to the stop but to stay there.  It is one of the most competitive markets in the online work. You are always and forever somebdoy elses competition.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Having said all of this I do all I can, always, to make sure your website is up to standards that Google and other Web crawlers can find your website and meets their algorithms which means if you choose me to design your website, it should get noticed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In my new website you will be greeted with a stylish preview of some of my website designs for clients and other work.  <br>\nYou will find a link to blogs like this one to keep you up to date with what\'s happening at Jonnie Grieve Digital Media.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll find a link to testimonials from people who have worked with me in the past. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll find A way to get in touch with me if you need me for any reason (other than pointless spam).  You can also connect with me via my various social media channels. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I also dedicate a section of my website to talking about Dyspraxia. Get in touch if you would like to talk with me further about this interesting but not well known topic.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Log on to https://www.jonniegrieve.co.uk if you haven\'t already and let me know if you have any other questions or feedback.  I can\'t wait to see what we can do together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:embed {\"url\":\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/video.mp4\"} -->\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttps://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/video.mp4\n</div></figure>\n<!-- /wp:embed -->', 'My New Website is Here!', '', 'inherit', 'closed', 'closed', '', '40-revision-v1', '', '', '2019-02-28 12:45:49', '2019-02-28 12:45:49', '', 40, 'https://blog.jonniegrieve.co.uk/40-revision-v1/', 0, 'revision', '', 0),
(44, 1, '2019-02-28 12:49:06', '2019-02-28 12:49:06', '<!-- wp:paragraph -->\n<p>Today I relaunched my website for Jonnie Grieve Digital Media.  I may be biased but I feel it\'s my most stylish, accessible and easiest to read yet.  I am however open to feedback about how I can improve things even more</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Most things about my business stay largely the same. I still believe I can offer you some of the most competitive rates for Web Design, Multimedia Design and Social media work you can get for an indepedent business with no compromise on quality.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here\'s a reminder of web design and business rates.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>WEB DESIGN: Flat Rate:<br>\n£220: 1 – 5 pages<br>\n£250: 6 – 10 pages<br>\n£300: 10 – 15 pages<br>\n£400: 15+ pages</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Hourly Rate:<br>\n£20</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Monthly Rate:<br>\n£20 - £30 pcm (excluding hosting and domain rates)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>SOCIAL MEDIA: Monthly Rate:<br>\nFROM £25 pcm </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I truly hope you will agree, my prices \"Really do take some beating!\" Contact me via my website if you would like more information on how my packages work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One I offer no real promises on is SEO. Which is Search Engine Optimisation.  To get your website to the top of the most popular search engines is hard work. Proper Hard work the likes of which good money is spent not only to get to the stop but to stay there.  It is one of the most competitive markets in the online work. You are always and forever somebdoy elses competition.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Having said all of this I do all I can, always, to make sure your website is up to standards that Google and other Web crawlers can find your website and meets their algorithms which means if you choose me to design your website, it should get noticed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In my new website you will be greeted with a stylish preview of some of my website designs for clients and other work.  <br>\nYou will find a link to blogs like this one to keep you up to date with what\'s happening at Jonnie Grieve Digital Media.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll find a link to testimonials from people who have worked with me in the past. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll find A way to get in touch with me if you need me for any reason (other than pointless spam).  You can also connect with me via my various social media channels. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I also dedicate a section of my website to talking about Dyspraxia. Get in touch if you would like to talk with me further about this interesting but not well known topic.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Log on to https://www.jonniegrieve.co.uk if you haven\'t already and let me know if you have any other questions or feedback.  I can\'t wait to see what we can do together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">[evp_embed_video url=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/video.mp4<a href=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/video.mp4\">4</a>\"]</pre>\n<!-- /wp:preformatted -->', 'My New Website is Here!', '', 'inherit', 'closed', 'closed', '', '40-revision-v1', '', '', '2019-02-28 12:49:06', '2019-02-28 12:49:06', '', 40, 'https://blog.jonniegrieve.co.uk/40-revision-v1/', 0, 'revision', '', 0),
(45, 1, '2019-02-28 12:49:55', '2019-02-28 12:49:55', '<!-- wp:paragraph -->\n<p>Today I relaunched my website for Jonnie Grieve Digital Media.  I may be biased but I feel it\'s my most stylish, accessible and easiest to read yet.  I am however open to feedback about how I can improve things even more</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Most things about my business stay largely the same. I still believe I can offer you some of the most competitive rates for Web Design, Multimedia Design and Social media work you can get for an indepedent business with no compromise on quality.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here\'s a reminder of web design and business rates.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>WEB DESIGN: Flat Rate:<br>\n£220: 1 – 5 pages<br>\n£250: 6 – 10 pages<br>\n£300: 10 – 15 pages<br>\n£400: 15+ pages</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Hourly Rate:<br>\n£20</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Monthly Rate:<br>\n£20 - £30 pcm (excluding hosting and domain rates)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>SOCIAL MEDIA: Monthly Rate:<br>\nFROM £25 pcm </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I truly hope you will agree, my prices \"Really do take some beating!\" Contact me via my website if you would like more information on how my packages work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One I offer no real promises on is SEO. Which is Search Engine Optimisation.  To get your website to the top of the most popular search engines is hard work. Proper Hard work the likes of which good money is spent not only to get to the stop but to stay there.  It is one of the most competitive markets in the online work. You are always and forever somebdoy elses competition.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Having said all of this I do all I can, always, to make sure your website is up to standards that Google and other Web crawlers can find your website and meets their algorithms which means if you choose me to design your website, it should get noticed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In my new website you will be greeted with a stylish preview of some of my website designs for clients and other work.  <br>\nYou will find a link to blogs like this one to keep you up to date with what\'s happening at Jonnie Grieve Digital Media.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll find a link to testimonials from people who have worked with me in the past. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll find A way to get in touch with me if you need me for any reason (other than pointless spam).  You can also connect with me via my various social media channels. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I also dedicate a section of my website to talking about Dyspraxia. Get in touch if you would like to talk with me further about this interesting but not well known topic.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Log on to https://www.jonniegrieve.co.uk if you haven\'t already and let me know if you have any other questions or feedback.  I can\'t wait to see what we can do together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">[evp_embed_video url=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/video.mp4\"]</pre>\n<!-- /wp:preformatted -->', 'My New Website is Here!', '', 'inherit', 'closed', 'closed', '', '40-revision-v1', '', '', '2019-02-28 12:49:55', '2019-02-28 12:49:55', '', 40, 'https://blog.jonniegrieve.co.uk/40-revision-v1/', 0, 'revision', '', 0),
(46, 1, '2019-02-28 12:54:49', '2019-02-28 12:54:49', '<!-- wp:paragraph -->\n<p>Today I relaunched my website for <a href=\"https://www.jonniegrieve.co.uk\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"Jonnie Grieve Digital Media (opens in a new tab)\">Jonnie Grieve Digital Media</a>.  I may be biased but I feel it\'s my most stylish, accessible and easiest to read yet.  I am however open to feedback about how I can improve things even more</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Most things about my business stay largely the same. I still believe I can offer you some of the most competitive rates for Web Design, Multimedia Design and Social media work you can get for an independent business with no compromise on quality.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here\'s a reminder of web design and business rates.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>WEB DESIGN: Flat Rate:</strong><br> £220: 1 – 5 pages<br> £250: 6 – 10 pages<br> £300: 10 – 15 pages<br> £400: 15+ pages</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Hourly Rate:</strong><br> £20</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Monthly Rate:</strong><br> £20 - £30 pcm (excluding hosting and domain rates)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>SOCIAL MEDIA: Monthly Rate:</strong><br> FROM £25 pcm </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">[evp_embed_video url=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/video.mp4\"]</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>I truly hope you will agree, my prices \"...really do take some beating!\". Contact me via my website if you would like more information on how my packages work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One I offer no real promises on is SEO. Which means <strong>S</strong>earch <strong>E</strong>ngine <strong>O</strong>ptimisation.  To get your website to the top of the most popular search engines is hard work. Proper Hard work the likes of which good money is spent not only to get to the stop but to stay there. It is one of the most competitive markets in the online work. You are always and forever somebody else\'s competition.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Having said all of this I do all I can, always, to make sure your website is up to standards that Google and other Web crawlers can find your website and meets their algorithms which means if you choose me to design your website, it should get noticed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In my new <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"5\" data-gr-id=\"5\"><a href=\"https://www.jonniegrieve.co.uk\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"website (opens in a new tab)\">website</a></g> you will be greeted with a stylish preview of some of my website designs for clients and other work.  <br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You will find a link to blogs like this one to keep you up to date with what\'s happening at Jonnie Grieve Digital Media.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll find a link to testimonials from people who have worked with me in the past. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll find A way to get in touch with me if you need me for any reason (other than pointless spam).  You can also connect with me via my various social media channels. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I also dedicate a section of my website to talking about <strong>Dyspraxia</strong>. Get in touch if you would like to talk with me further about this interesting but not well known topic.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Log on to <a href=\"https://www.jonniegrieve.co.uk\">https://www.jonniegrieve.co.uk</a> if you haven\'t already and let me know if you have any other questions or feedback. I can\'t wait to see what we can do together.</p>\n<!-- /wp:paragraph -->', 'My New Website is Here!', '', 'inherit', 'closed', 'closed', '', '40-revision-v1', '', '', '2019-02-28 12:54:49', '2019-02-28 12:54:49', '', 40, 'https://blog.jonniegrieve.co.uk/40-revision-v1/', 0, 'revision', '', 0),
(48, 1, '2019-03-05 15:21:38', '2019-03-05 15:21:38', '<!-- wp:paragraph -->\n<p>I didn\'t have a chance to do my report for the latest day of #100daysofcode,  yesterday but the last couple of days have been about refreshing and sharpening my skills in Input and output in Python.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\'ve got the basis of the little project nailed down (which was basically a mini Madlibs game script and here it is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>print(\"---------------------------------\")\nprint(\"Welcome to my Simple Madlibs game\")\nprint(\"---------------------------------\")\n\nverb = input(\"Give me a Verb: \")\nnoun = input(\"Give me noun: \")\nadjective = input(\"Give me an adjective: \")\n\n# TODO: Output the template to the screen with the blanks filled out with what the user stated\n\nprint(\"\\nThank you.  Here are your results\\n\")\n\nprint(\"I enjoy practice! I find it helps me to {%verb} better\", verb)\nprint(\"Without practice, {%s} would probably not even work\", noun)\nprint(\"My code is getting more {%d} every single day!\", adjective)\nprint(\"\\n\\nThat\'s it! Thanks for using Madlibs\\n\\n\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>So it takes in input, captures it correctly with the <em>input()</em> method. The tricky part is getting the input to display correctly in the \"results\" part of the script.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>My main issue is that I think I\'m confusing the syntax with Java with the use of format specifiers and variables as an argument to the print method.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>print(\"I enjoy practice! I find it helps me to {%verb} better\", verb)\nprint(\"My code is getting more {%adjective} every single day\", adjective)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>which merely outputs things like </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre class=\"wp-block-code\">I enjoy practice! I find it helps me to {%s} better raf</pre>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>The Syntax is more like</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre class=\"wp-block-code\"><code>print(\"I enjoy practice! I find it helps me to\", verb, \"better.\")</code></pre>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Being sure to perfect things like spacing of words between the variable and the rest of the string.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>print(\"I enjoy practice! I find it helps me to \" +  verb + \" better.\")\nprint(\"Without practice my\", noun, \"would probably not even work.\")\nprint(\"My code is getting more\", adjective,\"every single day!\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>If you concatenate (join strings together with the + operator, you need to include spaces in your strings.  If you do it with a comma as above, the strings seem to be applied to the output variables. </p>\n<!-- /wp:paragraph -->', 'Input and Output Scripts in Python', '', 'publish', 'open', 'open', '', 'input-and-output-scripts-in-python', '', '', '2019-03-05 15:21:39', '2019-03-05 15:21:39', '', 0, 'https://blog.jonniegrieve.co.uk/?p=48', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(49, 1, '2019-03-05 15:19:31', '2019-03-05 15:19:31', '<!-- wp:paragraph -->\n<p>I didn\'t have a chance to do my report for the latest day of #100daysofcode,  yesterday but the last couple of days have been about refreshing and sharpening my skills in Input and output in Python.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\'ve got the basis of the little project nailed down (which was basically a mini Madlibs game script and here it is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>print(\"---------------------------------\")\nprint(\"Welcome to my Simple Madlibs game\")\nprint(\"---------------------------------\")\n\nverb = input(\"Give me a Verb: \")\nnoun = input(\"Give me noun: \")\nadjective = input(\"Give me an adjective: \")\n\n# TODO: Output the template to the screen with the blanks filled out with what the user stated\n\nprint(\"\\nThank you.  Here are your results\\n\")\n\nprint(\"I enjoy practice! I find it helps me to {%verb} better\", verb)\nprint(\"Without practice, {%s} would probably not even work\", noun)\nprint(\"My code is getting more {%d} every single day!\", adjective)\nprint(\"\\n\\nThat\'s it! Thanks for using Madlibs\\n\\n\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>So it takes in input, captures it correctly with the <em>input()</em> method. The tricky part is getting the input to display correctly in the \"results\" part of the script.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>My main issue is that I think I\'m confusing the syntax with Java with the use of format specifiers and variables as an argument to the print method.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>print(\"I enjoy practice! I find it helps me to {%verb} better\", verb)\nprint(\"I enjoy practice! I find it helps me to {%verb} better\", verb)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>which merely outputs things like </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre class=\"wp-block-code\">I enjoy practice! I find it helps me to {%s} better raf</pre>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>The Syntax is more like</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre class=\"wp-block-code\"><code>print(\"I enjoy practice! I find it helps me to\", verb, \"better.\")</code></pre>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Being sure to perfect things like spacing of words between the variable and the rest of the string.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>print(\"I enjoy practice! I find it helps me to \" +  verb + \" better.\")\nprint(\"Without practice my\", noun, \"would probably not even work.\")\nprint(\"My code is getting more\", adjective,\"every single day!\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>If you concatenate (join strings together with the + operator, you need to include spaces in your strings.  If you do it with a comma as above, the strings seem to be applied to the output variables. </p>\n<!-- /wp:paragraph -->', '', '', 'inherit', 'closed', 'closed', '', '48-revision-v1', '', '', '2019-03-05 15:19:31', '2019-03-05 15:19:31', '', 48, 'https://blog.jonniegrieve.co.uk/48-revision-v1/', 0, 'revision', '', 0),
(50, 1, '2019-03-05 15:21:38', '2019-03-05 15:21:38', '<!-- wp:paragraph -->\n<p>I didn\'t have a chance to do my report for the latest day of #100daysofcode,  yesterday but the last couple of days have been about refreshing and sharpening my skills in Input and output in Python.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\'ve got the basis of the little project nailed down (which was basically a mini Madlibs game script and here it is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>print(\"---------------------------------\")\nprint(\"Welcome to my Simple Madlibs game\")\nprint(\"---------------------------------\")\n\nverb = input(\"Give me a Verb: \")\nnoun = input(\"Give me noun: \")\nadjective = input(\"Give me an adjective: \")\n\n# TODO: Output the template to the screen with the blanks filled out with what the user stated\n\nprint(\"\\nThank you.  Here are your results\\n\")\n\nprint(\"I enjoy practice! I find it helps me to {%verb} better\", verb)\nprint(\"Without practice, {%s} would probably not even work\", noun)\nprint(\"My code is getting more {%d} every single day!\", adjective)\nprint(\"\\n\\nThat\'s it! Thanks for using Madlibs\\n\\n\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>So it takes in input, captures it correctly with the <em>input()</em> method. The tricky part is getting the input to display correctly in the \"results\" part of the script.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>My main issue is that I think I\'m confusing the syntax with Java with the use of format specifiers and variables as an argument to the print method.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>print(\"I enjoy practice! I find it helps me to {%verb} better\", verb)\nprint(\"My code is getting more {%adjective} every single day\", adjective)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>which merely outputs things like </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre class=\"wp-block-code\">I enjoy practice! I find it helps me to {%s} better raf</pre>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>The Syntax is more like</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre class=\"wp-block-code\"><code>print(\"I enjoy practice! I find it helps me to\", verb, \"better.\")</code></pre>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Being sure to perfect things like spacing of words between the variable and the rest of the string.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>print(\"I enjoy practice! I find it helps me to \" +  verb + \" better.\")\nprint(\"Without practice my\", noun, \"would probably not even work.\")\nprint(\"My code is getting more\", adjective,\"every single day!\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>If you concatenate (join strings together with the + operator, you need to include spaces in your strings.  If you do it with a comma as above, the strings seem to be applied to the output variables. </p>\n<!-- /wp:paragraph -->', 'Input and Output Scripts in Python', '', 'inherit', 'closed', 'closed', '', '48-revision-v1', '', '', '2019-03-05 15:21:38', '2019-03-05 15:21:38', '', 48, 'https://blog.jonniegrieve.co.uk/48-revision-v1/', 0, 'revision', '', 0),
(52, 1, '2019-03-11 15:15:57', '2019-03-11 15:15:57', '<!-- wp:paragraph -->\n<p> I don\'t know<g class=\"gr_ gr_24 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation multiReplace\" id=\"24\" data-gr-id=\"24\">....</g>&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You post a slick stylish new image you\'ve been working on for a little while and when you\'re ready to post it that\'s what you do and then... Uh oh!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You get a message from a concerned and kind follower warning you need to re-post it to prevent losing potential new followers.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here\'s the image I worked on.   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":54} -->\n<figure class=\"wp-block-image\"><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/03/jgdm-img-mistake.png\" alt=\"\" class=\"wp-image-54\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Spot the (not quite so deliberate mistake)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That\'s the danger when you work on your own. You don\'t always have the second pair of eyes you need to spot mistakes when you take a project live. I do of course check all my work for spellings and mistakes but I can\'t spot them all.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>More often than not, of course, they are easy to fix. It\'s just a simple image with my own branding to try and promote my main social media channels.  I\'ve been thinking a lot in recent weeks about improving my own social media promotion and that was just one attempt.  Hopefully, you\'ll be seeing me a lot more active on social media in the weeks and months to come. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Having been made aware of the mistake it\'s not the best feeling in the world but it\'s important not to shy away from it. Front up to the fact a mistake has been made and work as hard as you can to fix the problem. But not fast. Slow down and make absolutely sure you have fixed the issue before publishing again.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Don\'t do what I did and work on the change, then try to upload the fix from the wrong location and then announce your work. :)  Don\'t go into autopilot and just assume the problem is fixed but be assured that mistakes happen and are not the end of the world when they do.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here, once again is the improved, unblemished final image that I tried to share with the world today. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":57} -->\n<figure class=\"wp-block-image\"><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/03/jgdm-img-mistake1-1.png\" alt=\"\" class=\"wp-image-57\"/></figure>\n<!-- /wp:image -->', 'Handling Mistakes', '', 'publish', 'open', 'open', '', 'handling-mistakes', '', '', '2019-03-11 15:15:57', '2019-03-11 15:15:57', '', 0, 'https://blog.jonniegrieve.co.uk/?p=52', 0, 'post', '', 0),
(54, 1, '2019-03-11 15:01:53', '2019-03-11 15:01:53', '', 'jgdm-img-mistake', '', 'inherit', 'open', 'closed', '', 'jgdm-img-mistake', '', '', '2019-03-11 15:01:53', '2019-03-11 15:01:53', '', 0, 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/03/jgdm-img-mistake.png', 0, 'attachment', 'image/png', 0),
(56, 1, '2019-03-11 15:04:15', '2019-03-11 15:04:15', '', 'jgdm-img-mistake1', '', 'inherit', 'open', 'closed', '', 'jgdm-img-mistake1', '', '', '2019-03-11 15:04:15', '2019-03-11 15:04:15', '', 0, 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/03/jgdm-img-mistake1.png', 0, 'attachment', 'image/png', 0),
(57, 1, '2019-03-11 15:05:03', '2019-03-11 15:05:03', '', 'jgdm-img-mistake1', '', 'inherit', 'open', 'closed', '', 'jgdm-img-mistake1-2', '', '', '2019-03-11 15:05:03', '2019-03-11 15:05:03', '', 52, 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/03/jgdm-img-mistake1-1.png', 0, 'attachment', 'image/png', 0),
(58, 1, '2019-03-11 15:15:57', '2019-03-11 15:15:57', '<!-- wp:paragraph -->\n<p> I don\'t know<g class=\"gr_ gr_24 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation multiReplace\" id=\"24\" data-gr-id=\"24\">....</g>&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You post a slick stylish new image you\'ve been working on for a little while and when you\'re ready to post it that\'s what you do and then... Uh oh!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You get a message from a concerned and kind follower warning you need to re-post it to prevent losing potential new followers.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here\'s the image I worked on.   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":54} -->\n<figure class=\"wp-block-image\"><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/03/jgdm-img-mistake.png\" alt=\"\" class=\"wp-image-54\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> Spot the (not quite so deliberate mistake)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That\'s the danger when you work on your own. You don\'t always have the second pair of eyes you need to spot mistakes when you take a project live. I do of course check all my work for spellings and mistakes but I can\'t spot them all.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>More often than not, of course, they are easy to fix. It\'s just a simple image with my own branding to try and promote my main social media channels.  I\'ve been thinking a lot in recent weeks about improving my own social media promotion and that was just one attempt.  Hopefully, you\'ll be seeing me a lot more active on social media in the weeks and months to come. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Having been made aware of the mistake it\'s not the best feeling in the world but it\'s important not to shy away from it. Front up to the fact a mistake has been made and work as hard as you can to fix the problem. But not fast. Slow down and make absolutely sure you have fixed the issue before publishing again.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Don\'t do what I did and work on the change, then try to upload the fix from the wrong location and then announce your work. :)  Don\'t go into autopilot and just assume the problem is fixed but be assured that mistakes happen and are not the end of the world when they do.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here, once again is the improved, unblemished final image that I tried to share with the world today. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":57} -->\n<figure class=\"wp-block-image\"><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/03/jgdm-img-mistake1-1.png\" alt=\"\" class=\"wp-image-57\"/></figure>\n<!-- /wp:image -->', 'Handling Mistakes', '', 'inherit', 'closed', 'closed', '', '52-revision-v1', '', '', '2019-03-11 15:15:57', '2019-03-11 15:15:57', '', 52, 'https://blog.jonniegrieve.co.uk/52-revision-v1/', 0, 'revision', '', 0),
(60, 1, '2019-05-02 16:48:20', '2019-05-02 15:48:20', '<!-- wp:paragraph -->\n<p>In this blog, I\'ll talk about Test Driven development, (TDD) and how it has helped me understand how this process can be used to learn how to fight bugs in your code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unit Testing has been one of those realities of the coding world that I haven\'t really got into the habit of working with just yet. I first encountered it when trying to apply the skills to JavaScript. But I was struggling to understand how to run a Unit Test never mind learn about Test Driven Development.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Yesterday I cracked that part of the problem and I finally learned that TDD isn\'t so much a type of Unit Testing but a methodology that developers can and should use when they\'re writing their code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The essential concept of TDD is that you write Unit Tests for individual pieces of you code and keep writing that code till all of your tests pass. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And, as ever the best way to learn anything is to apply it to an example, which I have done here.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have a script which tests for words, digraph and trigraph words in particular and tests that the given words are correctly converted to PigLatin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Unit Tests</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here are those tests. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">/** @test */\n    function convertSingleStartingConsonantWordToPigLatin() {\n        $word = \"test\";\n        $expectedResult = \"esttay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n\n    /** @test */\n    function convertDiagraphWordToPigLatin() {\n        $word = \"treehouse\";\n        $expectedResult = \"eehousetray\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n        /** @test */\n    function convertTrigraphWordToPigLatin() {\n        $word = \"schematic\";\n        $expectedResult = \"ematicschay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>By the time I was ready to write the test for the Trigraphs I\'d gotten the hang of the process and I was ready finish the tests. But while my knowledge of PigLatin isn\'t the best I was pretty sure I\'d used the right words and conversion for the Trigraph test.  I used the word schematic which should be correctly converted to \" ematicshay \" But after a bit of digging, what the compiler seemed to be telling me was that the word it was expecting was \" hematiscay \".</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Why was this?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Well, it turns out that even though the test was being told to look for trigraph conversions it was actually treating the test as a digraph, meaning it was taking away 2 letters for the conversion instead of 3.  This was due to the order of placement for the condition in the <em>convert() </em>method.  Here\'s the method in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">function convert($word) { <br>                         <br>        $firstLetter = substr($word, 0, 1);<br>        $firstTwoLetters = substr($word, 0, 2);<br>        $firstThreeLetters = substr($word, 0, 3);<br><br>        if(in_array($firstThreeLetters, $this->trigraphs)) {<br><br>            $newWord = substr($word, 3);<br>            $newWord .= $firstThreeLetters . \'ay\';<br><br>        } else if (in_array($firstTwoLetters, $this->digraphs)) {<br><br>            $newWord = substr($word, 2);<br>            $newWord .= $firstTwoLetters . \'ay\';<br>        } else {<br>            $newWord = substr($word, 1);<br>            $newWord .= $firstLetter . \'ay\';<br><br>        }<br>        return $newWord;<br>    } </pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In order to fix it I had to switch the condition statements as shown above so that the correct conversion could be used and all 3 Unit Tests could pass.  But this is the key point.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If it was not for the Unit Tests, this bug might not have been picked up on at all.  The convert method does what it says on the tin; it removes characters and correctly places them at the end of the word to mimic PigLatin syntax. But writing Unit Tests with Test Driven Development arms you with even more protection than PHP or your chosen language can offer you on its own against those annoying bugs in your website or web application. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To reference the array in the condition do not use the $ character. This means the tests will not pass as the objects cannot be found in the TestCase file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>To Conclude</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So, I learned yesterday about what TDD is.  Today was about learning how to apply TDD and how it can diagnose bugs in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ematicshay not hematischay for the new word.  It kept coming back at ematischay, which I thought was odd.  I didn\'t understand why it should be so different baring in mind the code in the class was wrapped in condition blocks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It turns out what\'s happening is the code is being tested in order so tests for digraphs are being run first rather than trigraphs. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Test Driven Development (featuring PHP)', '', 'publish', 'open', 'open', '', 'test-driven-development-featuring-php', '', '', '2019-05-02 16:48:22', '2019-05-02 15:48:22', '', 0, 'https://blog.jonniegrieve.co.uk/?p=60', 0, 'post', '', 0),
(61, 1, '2019-05-02 16:22:04', '2019-05-02 15:22:04', '<!-- wp:paragraph -->\n<p>In this blog, I\'ll talk about test driven development, (TDD) and how it has helped me understand how this process can be used to learn how to fight bugs in your code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unit Testing has been one of those realities of the coding world that I just haven\'t really got into the habit of just yet. I first encountered it when trying to apply the skills to JavaScript. But I was struggling to understand how to run a Unit Test never mind learn about Test Driven Development.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Yesterday I cracked that part of the problem and I finally learned that TDD isn\'t so much a type of Unit Testing but a methodology that developers can and should use when they\'re writing their code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The essential concept of TDD is that you write Unit Tests for individual pieces of you code and keep writing that code till all of your tests pass. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$this refers to the current object in this case PigLatin object which is a class</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And, as ever the best way to learn anything is to apply it to an example, which I have done here.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have a script which tests for words, digraph and trigraph words in particular and tests that the given words are correctly converted to PigLatin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unit Tests</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here are those tests. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:embed -->\n/** @test */\n    function convertSingleStartingConsonantWordToPigLatin() {\n        $word = \"test\";\n        $expectedResult = \"esttay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n\n    /** @test */\n    function convertDiagraphWordToPigLatin() {\n        $word = \"treehouse\";\n        $expectedResult = \"eehousetray\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n        /** @test */\n    function convertTrigraphWordToPigLatin() {\n        $word = \"schematic\";\n        $expectedResult = \"ematicschay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n<!-- /wp:embed -->\n\n<!-- wp:html -->\nif(in_array($firstTwoLetters, $this->digraphs)) {\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>if(in_array($firstTwoLetters, $this-&gt;digraphs)) {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To reference the array in the condition do not use the $ character. This means the tests will not pass as the objects cannot be found in the TestCase file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So, I learned yesterday about what TDD is.  Today was about learning how to apply TDD and how it can diagnose bugs in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ematicshay not hematischay for the new word.  It kept coming back at ematischay, which I thought was odd.  I didn\'t understand why it should be so different baring in mind the code in the class was wrapped in condition blocks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It turns out what\'s happening is the code is being tested in order so tests for digraphs are being run first rather than trigraphs. </p>\n<!-- /wp:paragraph -->', 'Test Driven Development (featuring PHP)', '', 'inherit', 'closed', 'closed', '', '60-revision-v1', '', '', '2019-05-02 16:22:04', '2019-05-02 15:22:04', '', 60, 'https://blog.jonniegrieve.co.uk/60-revision-v1/', 0, 'revision', '', 0),
(62, 1, '2019-05-02 16:22:25', '2019-05-02 15:22:25', '<!-- wp:paragraph -->\n<p>In this blog, I\'ll talk about test driven development, (TDD) and how it has helped me understand how this process can be used to learn how to fight bugs in your code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unit Testing has been one of those realities of the coding world that I just haven\'t really got into the habit of just yet. I first encountered it when trying to apply the skills to JavaScript. But I was struggling to understand how to run a Unit Test never mind learn about Test Driven Development.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Yesterday I cracked that part of the problem and I finally learned that TDD isn\'t so much a type of Unit Testing but a methodology that developers can and should use when they\'re writing their code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The essential concept of TDD is that you write Unit Tests for individual pieces of you code and keep writing that code till all of your tests pass. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$this refers to the current object in this case PigLatin object which is a class</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And, as ever the best way to learn anything is to apply it to an example, which I have done here.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have a script which tests for words, digraph and trigraph words in particular and tests that the given words are correctly converted to PigLatin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unit Tests</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here are those tests. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n/** @test */\n    function convertSingleStartingConsonantWordToPigLatin() {\n        $word = \"test\";\n        $expectedResult = \"esttay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n\n    /** @test */\n    function convertDiagraphWordToPigLatin() {\n        $word = \"treehouse\";\n        $expectedResult = \"eehousetray\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n        /** @test */\n    function convertTrigraphWordToPigLatin() {\n        $word = \"schematic\";\n        $expectedResult = \"ematicschay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n<!-- /wp:html -->\n\n<!-- wp:html -->\nif(in_array($firstTwoLetters, $this->digraphs)) {\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>if(in_array($firstTwoLetters, $this-&gt;digraphs)) {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To reference the array in the condition do not use the $ character. This means the tests will not pass as the objects cannot be found in the TestCase file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So, I learned yesterday about what TDD is.  Today was about learning how to apply TDD and how it can diagnose bugs in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ematicshay not hematischay for the new word.  It kept coming back at ematischay, which I thought was odd.  I didn\'t understand why it should be so different baring in mind the code in the class was wrapped in condition blocks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It turns out what\'s happening is the code is being tested in order so tests for digraphs are being run first rather than trigraphs. </p>\n<!-- /wp:paragraph -->', 'Test Driven Development (featuring PHP)', '', 'inherit', 'closed', 'closed', '', '60-revision-v1', '', '', '2019-05-02 16:22:25', '2019-05-02 15:22:25', '', 60, 'https://blog.jonniegrieve.co.uk/60-revision-v1/', 0, 'revision', '', 0),
(63, 1, '2019-05-02 16:22:41', '2019-05-02 15:22:41', '<!-- wp:html -->\n/** @test */\n    function convertSingleStartingConsonantWordToPigLatin() {\n        $word = \"test\";\n        $expectedResult = \"esttay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n\n    /** @test */\n    function convertDiagraphWordToPigLatin() {\n        $word = \"treehouse\";\n        $expectedResult = \"eehousetray\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n        /** @test */\n    function convertTrigraphWordToPigLatin() {\n        $word = \"schematic\";\n        $expectedResult = \"ematicschay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n<!-- /wp:html -->', 'Untitled Reusable Block', '', 'publish', 'closed', 'closed', '', 'untitled-reusable-block', '', '', '2019-05-02 16:22:41', '2019-05-02 15:22:41', '', 0, 'https://blog.jonniegrieve.co.uk/untitled-reusable-block/', 0, 'wp_block', '', 0),
(64, 1, '2019-05-02 16:23:58', '2019-05-02 15:23:58', '<!-- wp:paragraph -->\n<p>In this blog, I\'ll talk about test driven development, (TDD) and how it has helped me understand how this process can be used to learn how to fight bugs in your code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unit Testing has been one of those realities of the coding world that I just haven\'t really got into the habit of just yet. I first encountered it when trying to apply the skills to JavaScript. But I was struggling to understand how to run a Unit Test never mind learn about Test Driven Development.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Yesterday I cracked that part of the problem and I finally learned that TDD isn\'t so much a type of Unit Testing but a methodology that developers can and should use when they\'re writing their code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The essential concept of TDD is that you write Unit Tests for individual pieces of you code and keep writing that code till all of your tests pass. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$this refers to the current object in this case PigLatin object which is a class</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And, as ever the best way to learn anything is to apply it to an example, which I have done here.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have a script which tests for words, digraph and trigraph words in particular and tests that the given words are correctly converted to PigLatin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unit Tests</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here are those tests. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n/** @test */\n    function convertSingleStartingConsonantWordToPigLatin() {\n        $word = \"test\";\n        $expectedResult = \"esttay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n\n    /** @test */\n    function convertDiagraphWordToPigLatin() {\n        $word = \"treehouse\";\n        $expectedResult = \"eehousetray\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n        /** @test */\n    function convertTrigraphWordToPigLatin() {\n        $word = \"schematic\";\n        $expectedResult = \"ematicschay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n<!-- /wp:html -->\n\n<!-- wp:html -->\nif(in_array($firstTwoLetters, $this->digraphs)) {\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>if(in_array($firstTwoLetters, $this-&gt;digraphs)) {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To reference the array in the condition do not use the $ character. This means the tests will not pass as the objects cannot be found in the TestCase file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So, I learned yesterday about what TDD is.  Today was about learning how to apply TDD and how it can diagnose bugs in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ematicshay not hematischay for the new word.  It kept coming back at ematischay, which I thought was odd.  I didn\'t understand why it should be so different baring in mind the code in the class was wrapped in condition blocks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It turns out what\'s happening is the code is being tested in order so tests for digraphs are being run first rather than trigraphs. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/** @test */\n    function convertSingleStartingConsonantWordToPigLatin() {\n        $word = \"test\";\n        $expectedResult = \"esttay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n\n    /** @test */\n    function convertDiagraphWordToPigLatin() {\n        $word = \"treehouse\";\n        $expectedResult = \"eehousetray\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n        /** @test */\n    function convertTrigraphWordToPigLatin() {\n        $word = \"schematic\";\n        $expectedResult = \"ematicschay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }</code></pre>\n<!-- /wp:code -->', 'Test Driven Development (featuring PHP)', '', 'inherit', 'closed', 'closed', '', '60-revision-v1', '', '', '2019-05-02 16:23:58', '2019-05-02 15:23:58', '', 60, 'https://blog.jonniegrieve.co.uk/60-revision-v1/', 0, 'revision', '', 0),
(65, 1, '2019-05-02 16:25:25', '2019-05-02 15:25:25', '<!-- wp:paragraph -->\n<p>In this blog, I\'ll talk about test driven development, (TDD) and how it has helped me understand how this process can be used to learn how to fight bugs in your code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unit Testing has been one of those realities of the coding world that I just haven\'t really got into the habit of just yet. I first encountered it when trying to apply the skills to JavaScript. But I was struggling to understand how to run a Unit Test never mind learn about Test Driven Development.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Yesterday I cracked that part of the problem and I finally learned that TDD isn\'t so much a type of Unit Testing but a methodology that developers can and should use when they\'re writing their code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The essential concept of TDD is that you write Unit Tests for individual pieces of you code and keep writing that code till all of your tests pass. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$this refers to the current object in this case PigLatin object which is a class</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And, as ever the best way to learn anything is to apply it to an example, which I have done here.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have a script which tests for words, digraph and trigraph words in particular and tests that the given words are correctly converted to PigLatin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unit Tests</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here are those tests. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">/** @test */\n    function convertSingleStartingConsonantWordToPigLatin() {\n        $word = \"test\";\n        $expectedResult = \"esttay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n\n    /** @test */\n    function convertDiagraphWordToPigLatin() {\n        $word = \"treehouse\";\n        $expectedResult = \"eehousetray\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n        /** @test */\n    function convertTrigraphWordToPigLatin() {\n        $word = \"schematic\";\n        $expectedResult = \"ematicschay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:html -->\nif(in_array($firstTwoLetters, $this->digraphs)) {\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>if(in_array($firstTwoLetters, $this-&gt;digraphs)) {</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To reference the array in the condition do not use the $ character. This means the tests will not pass as the objects cannot be found in the TestCase file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So, I learned yesterday about what TDD is.  Today was about learning how to apply TDD and how it can diagnose bugs in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ematicshay not hematischay for the new word.  It kept coming back at ematischay, which I thought was odd.  I didn\'t understand why it should be so different baring in mind the code in the class was wrapped in condition blocks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It turns out what\'s happening is the code is being tested in order so tests for digraphs are being run first rather than trigraphs. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>/** @test */\n    function convertSingleStartingConsonantWordToPigLatin() {\n        $word = \"test\";\n        $expectedResult = \"esttay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n\n    /** @test */\n    function convertDiagraphWordToPigLatin() {\n        $word = \"treehouse\";\n        $expectedResult = \"eehousetray\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n        /** @test */\n    function convertTrigraphWordToPigLatin() {\n        $word = \"schematic\";\n        $expectedResult = \"ematicschay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin->convert($word);\n\n        //make an assertion\n        $this->assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }</p>\n<!-- /wp:paragraph -->', 'Test Driven Development (featuring PHP)', '', 'inherit', 'closed', 'closed', '', '60-revision-v1', '', '', '2019-05-02 16:25:25', '2019-05-02 15:25:25', '', 60, 'https://blog.jonniegrieve.co.uk/60-revision-v1/', 0, 'revision', '', 0),
(66, 1, '2019-05-02 16:38:37', '2019-05-02 15:38:37', '<!-- wp:paragraph -->\n<p>In this blog, I\'ll talk about test driven development, (TDD) and how it has helped me understand how this process can be used to learn how to fight bugs in your code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unit Testing has been one of those realities of the coding world that I just haven\'t really got into the habit of just yet. I first encountered it when trying to apply the skills to JavaScript. But I was struggling to understand how to run a Unit Test never mind learn about Test Driven Development.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Yesterday I cracked that part of the problem and I finally learned that TDD isn\'t so much a type of Unit Testing but a methodology that developers can and should use when they\'re writing their code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The essential concept of TDD is that you write Unit Tests for individual pieces of you code and keep writing that code till all of your tests pass. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$this refers to the current object in this case PigLatin object which is a class</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And, as ever the best way to learn anything is to apply it to an example, which I have done here.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have a script which tests for words, digraph and trigraph words in particular and tests that the given words are correctly converted to PigLatin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Unit Tests</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here are those tests. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">/** @test */\n    function convertSingleStartingConsonantWordToPigLatin() {\n        $word = \"test\";\n        $expectedResult = \"esttay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n\n    /** @test */\n    function convertDiagraphWordToPigLatin() {\n        $word = \"treehouse\";\n        $expectedResult = \"eehousetray\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n        /** @test */\n    function convertTrigraphWordToPigLatin() {\n        $word = \"schematic\";\n        $expectedResult = \"ematicschay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>By the time I was ready to write the test for the Trigraphs I\'d gotten the hang of the process and I was ready finish the tests. But while my knowledge of PigLatin isn\'t the best I was pretty sure I\'d used the right words and conversion for the Trigraph test.  I used the word schematic which should be correctly converted to \" ematicshay \" But after a bit of digging, what the compiler seemed to be telling me was that the word it was expecting was \" hematiscay \".</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Why was this?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Well it turns out that even though the test was being told to look for trigraph conversions it was actually treating the test as a digraph, meaning it was taking away 2 letters for the conversion instead of 3.  This was due to the order of placement for the condition in the <em>convert() </em>method.  Here\'s the method in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">function convert($word) {      <br> <code>    $firstLetter = substr($word, 0, 1);     $firstTwoLetters = substr($word, 0, 2);     $firstThreeLetters = substr($word, 0, 3);     if(in_array($firstThreeLetters, $this->trigraphs)) {         $newWord = substr($word, 3);         $newWord .= $firstThreeLetters . \'ay\';     } else if (in_array($firstTwoLetters, $this->digraphs)) {         $newWord = substr($word, 2);         $newWord .= $firstTwoLetters . \'ay\';     } else {         $newWord = substr($word, 1);         $newWord .= $firstLetter . \'ay\';     }     return $newWord; }</code></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In order to fix it I had to switch the condition statements as shown above so that the correct conversion could be used and all 3 Unit Tests could pass.  But this is the key point.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If it was not for the Unit Tests, this bug might not have been picked up on at all.  The convert method does what it says on the tin; it removes characters and correctly places them at the end of the word to mimic PigLatin syntax. But writing Unit Tests with Test Driven Development arms you with even more protection than PHP or your chosen language can offer you on its own against those annoying bugs in your website or web application. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To reference the array in the condition do not use the $ character. This means the tests will not pass as the objects cannot be found in the TestCase file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>To Conclude</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So, I learned yesterday about what TDD is.  Today was about learning how to apply TDD and how it can diagnose bugs in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ematicshay not hematischay for the new word.  It kept coming back at ematischay, which I thought was odd.  I didn\'t understand why it should be so different baring in mind the code in the class was wrapped in condition blocks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It turns out what\'s happening is the code is being tested in order so tests for digraphs are being run first rather than trigraphs. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Test Driven Development (featuring PHP)', '', 'inherit', 'closed', 'closed', '', '60-revision-v1', '', '', '2019-05-02 16:38:37', '2019-05-02 15:38:37', '', 60, 'https://blog.jonniegrieve.co.uk/60-revision-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(67, 1, '2019-05-02 16:45:29', '2019-05-02 15:45:29', '<!-- wp:paragraph -->\n<p>In this blog, I\'ll talk about test driven development, (TDD) and how it has helped me understand how this process can be used to learn how to fight bugs in your code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unit Testing has been one of those realities of the coding world that I just haven\'t really got into the habit of just yet. I first encountered it when trying to apply the skills to JavaScript. But I was struggling to understand how to run a Unit Test never mind learn about Test Driven Development.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Yesterday I cracked that part of the problem and I finally learned that TDD isn\'t so much a type of Unit Testing but a methodology that developers can and should use when they\'re writing their code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The essential concept of TDD is that you write Unit Tests for individual pieces of you code and keep writing that code till all of your tests pass. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>$this refers to the current object in this case PigLatin object which is a class</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And, as ever the best way to learn anything is to apply it to an example, which I have done here.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have a script which tests for words, digraph and trigraph words in particular and tests that the given words are correctly converted to PigLatin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Unit Tests</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here are those tests. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">/** @test */\n    function convertSingleStartingConsonantWordToPigLatin() {\n        $word = \"test\";\n        $expectedResult = \"esttay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n\n    /** @test */\n    function convertDiagraphWordToPigLatin() {\n        $word = \"treehouse\";\n        $expectedResult = \"eehousetray\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n        /** @test */\n    function convertTrigraphWordToPigLatin() {\n        $word = \"schematic\";\n        $expectedResult = \"ematicschay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>By the time I was ready to write the test for the Trigraphs I\'d gotten the hang of the process and I was ready finish the tests. But while my knowledge of PigLatin isn\'t the best I was pretty sure I\'d used the right words and conversion for the Trigraph test.  I used the word schematic which should be correctly converted to \" ematicshay \" But after a bit of digging, what the compiler seemed to be telling me was that the word it was expecting was \" hematiscay \".</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Why was this?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Well it turns out that even though the test was being told to look for trigraph conversions it was actually treating the test as a digraph, meaning it was taking away 2 letters for the conversion instead of 3.  This was due to the order of placement for the condition in the <em>convert() </em>method.  Here\'s the method in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">function convert($word) { <br>                         <br>        $firstLetter = substr($word, 0, 1);<br>        $firstTwoLetters = substr($word, 0, 2);<br>        $firstThreeLetters = substr($word, 0, 3);<br><br>        if(in_array($firstThreeLetters, $this->trigraphs)) {<br><br>            $newWord = substr($word, 3);<br>            $newWord .= $firstThreeLetters . \'ay\';<br><br>        } else if (in_array($firstTwoLetters, $this->digraphs)) {<br><br>            $newWord = substr($word, 2);<br>            $newWord .= $firstTwoLetters . \'ay\';<br>        } else {<br>            $newWord = substr($word, 1);<br>            $newWord .= $firstLetter . \'ay\';<br><br>        }<br>        return $newWord;<br>    } </pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In order to fix it I had to switch the condition statements as shown above so that the correct conversion could be used and all 3 Unit Tests could pass.  But this is the key point.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If it was not for the Unit Tests, this bug might not have been picked up on at all.  The convert method does what it says on the tin; it removes characters and correctly places them at the end of the word to mimic PigLatin syntax. But writing Unit Tests with Test Driven Development arms you with even more protection than PHP or your chosen language can offer you on its own against those annoying bugs in your website or web application. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To reference the array in the condition do not use the $ character. This means the tests will not pass as the objects cannot be found in the TestCase file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>To Conclude</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So, I learned yesterday about what TDD is.  Today was about learning how to apply TDD and how it can diagnose bugs in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ematicshay not hematischay for the new word.  It kept coming back at ematischay, which I thought was odd.  I didn\'t understand why it should be so different baring in mind the code in the class was wrapped in condition blocks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It turns out what\'s happening is the code is being tested in order so tests for digraphs are being run first rather than trigraphs. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Test Driven Development (featuring PHP)', '', 'inherit', 'closed', 'closed', '', '60-revision-v1', '', '', '2019-05-02 16:45:29', '2019-05-02 15:45:29', '', 60, 'https://blog.jonniegrieve.co.uk/60-revision-v1/', 0, 'revision', '', 0),
(68, 1, '2019-05-02 16:48:20', '2019-05-02 15:48:20', '<!-- wp:paragraph -->\n<p>In this blog, I\'ll talk about Test Driven development, (TDD) and how it has helped me understand how this process can be used to learn how to fight bugs in your code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unit Testing has been one of those realities of the coding world that I haven\'t really got into the habit of working with just yet. I first encountered it when trying to apply the skills to JavaScript. But I was struggling to understand how to run a Unit Test never mind learn about Test Driven Development.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Yesterday I cracked that part of the problem and I finally learned that TDD isn\'t so much a type of Unit Testing but a methodology that developers can and should use when they\'re writing their code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The essential concept of TDD is that you write Unit Tests for individual pieces of you code and keep writing that code till all of your tests pass. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And, as ever the best way to learn anything is to apply it to an example, which I have done here.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have a script which tests for words, digraph and trigraph words in particular and tests that the given words are correctly converted to PigLatin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Unit Tests</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here are those tests. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">/** @test */\n    function convertSingleStartingConsonantWordToPigLatin() {\n        $word = \"test\";\n        $expectedResult = \"esttay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n\n    /** @test */\n    function convertDiagraphWordToPigLatin() {\n        $word = \"treehouse\";\n        $expectedResult = \"eehousetray\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n        /** @test */\n    function convertTrigraphWordToPigLatin() {\n        $word = \"schematic\";\n        $expectedResult = \"ematicschay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>By the time I was ready to write the test for the Trigraphs I\'d gotten the hang of the process and I was ready finish the tests. But while my knowledge of PigLatin isn\'t the best I was pretty sure I\'d used the right words and conversion for the Trigraph test.  I used the word schematic which should be correctly converted to \" ematicshay \" But after a bit of digging, what the compiler seemed to be telling me was that the word it was expecting was \" hematiscay \".</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Why was this?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Well, it turns out that even though the test was being told to look for trigraph conversions it was actually treating the test as a digraph, meaning it was taking away 2 letters for the conversion instead of 3.  This was due to the order of placement for the condition in the <em>convert() </em>method.  Here\'s the method in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">function convert($word) { <br>                         <br>        $firstLetter = substr($word, 0, 1);<br>        $firstTwoLetters = substr($word, 0, 2);<br>        $firstThreeLetters = substr($word, 0, 3);<br><br>        if(in_array($firstThreeLetters, $this->trigraphs)) {<br><br>            $newWord = substr($word, 3);<br>            $newWord .= $firstThreeLetters . \'ay\';<br><br>        } else if (in_array($firstTwoLetters, $this->digraphs)) {<br><br>            $newWord = substr($word, 2);<br>            $newWord .= $firstTwoLetters . \'ay\';<br>        } else {<br>            $newWord = substr($word, 1);<br>            $newWord .= $firstLetter . \'ay\';<br><br>        }<br>        return $newWord;<br>    } </pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In order to fix it I had to switch the condition statements as shown above so that the correct conversion could be used and all 3 Unit Tests could pass.  But this is the key point.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If it was not for the Unit Tests, this bug might not have been picked up on at all.  The convert method does what it says on the tin; it removes characters and correctly places them at the end of the word to mimic PigLatin syntax. But writing Unit Tests with Test Driven Development arms you with even more protection than PHP or your chosen language can offer you on its own against those annoying bugs in your website or web application. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To reference the array in the condition do not use the $ character. This means the tests will not pass as the objects cannot be found in the TestCase file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>To Conclude</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So, I learned yesterday about what TDD is.  Today was about learning how to apply TDD and how it can diagnose bugs in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ematicshay not hematischay for the new word.  It kept coming back at ematischay, which I thought was odd.  I didn\'t understand why it should be so different baring in mind the code in the class was wrapped in condition blocks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It turns out what\'s happening is the code is being tested in order so tests for digraphs are being run first rather than trigraphs. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Test Driven Development (featuring PHP)', '', 'inherit', 'closed', 'closed', '', '60-revision-v1', '', '', '2019-05-02 16:48:20', '2019-05-02 15:48:20', '', 60, 'https://blog.jonniegrieve.co.uk/60-revision-v1/', 0, 'revision', '', 0),
(70, 1, '2019-05-08 15:05:50', '2019-05-08 14:05:50', '<!-- wp:paragraph -->\n<p>This blog follows on from my previous blog on <a href=\"https://blog.jonniegrieve.co.uk/test-driven-development-featuring-php/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"Test Driven Development with PHP (opens in a new tab)\">Test Driven Development with PHP</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here\'s the problem. I\'m trying to learn about Unit Testing in PHP, but it hasn\'t been a faultless experience. I can run Unit tests using PHPUnit\'s standard printer for CLI\'s  (that\'s Command Line Interfaces). But I want to use the more advanced printer provided by code dungeon.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So using Composer I attempt to install it. It turns out I need to use an updated version of PHP.  I only had 7.1.1 but the dependency requires 7.2+. And I naturally google to find out how to do it. I go through the instructions put the downloaded files in the suggested folder in my<strong> C:</strong> drive, refer to it in my systems environment variables and try again.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I then attempt to verify the change has worked.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">php$ php -vPHP 7.1.1 (cli) (built: Jan 18 2017 18:51:14) ( ZTS MSVC14 (Visual C++ 2015) x86 )<br>Copyright (c) 1997-2017 The PHP GroupZend Engine v3.1.0, <br>Copyright (c) 1998-2017 Zend Technologies</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Hmm. But this is not quite what I was hoping for.  My system is picking up the original installation. So where is that? And how can I get my system to recognise PHP 7.2?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following command gives me a clue.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ where php\nC:\\xamp\\php\\php.exeC:\\PHP7\\php.exe </pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>So it\'s picking up both installtions of PHP. That is the one bundled with XAMPP and the new one that I downloaded. But it\'s still not favouring 7.2 with <strong>php -v</strong>. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Maybe it\'s time to remove XAMPP, where my current version of PHP lives and do a clean install preferably with the latest version of PHP. But this terrifies me because the last thing I want to do is mess something up irrevocably in my local server installation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But the bottom line is all that\'s really needed is a little bit of experimentation because this way if everything goes haywire I can always uninstall my XAMPP server and do a fresh installation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I copied the PHP 7.2 installation folder into the correct folder in my XAMPP installation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ php -v\n\nPHP 7.3.5 (cli) (built: May  1 2019 13:16:56) ( NTS MSVC15 (Visual C++ 2017) x64 )\nCopyright (c) 1997-2018 The PHP Group\nZend Engine v3.3.5, Copyright (c) 1998-2018 Zend Technologies</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>And now as we can see, the PHP version was showing up as 7.3.5 which meant I\'d completed the version upgrade of PHP. But as expected it was causing hardware conflicts which Apache meaning I was no longer able to start the server.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I could have scoured the internet for solutions, but ultimately it was just easier to uninstall completely and start again with a fresh install. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And that was it. Job done. I was so proud of myself today. I got through what seemed like a daunting task with just a little bit of research, nous and experimentation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The only other stumbling block was having the presence of mind which <strong>php.ini </strong>configuration file I needed to change to allow Composer to finally download the project dependencies.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://stackoverflow.com/questions/35249620/the-openssl-extension-is-required-for-ssl-tls-protection\">https://stackoverflow.com/questions/35249620/the-openssl-extension-is-required-for-ssl-tls-protection</a><br><a href=\"https://stackoverflow.com/questions/38818464/configuration-does-not-allow-connection-to-http-packagist-org-packages-json\">https://stackoverflow.com/questions/38818464/configuration-does-not-allow-connection-to-http-packagist-org-packages-json</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To enable this to happen I went into the PHP7 directory I downloaded earlier and made the required changes there, including uncommenting the extension required to run SSL requests. The setting in php.ini is <em>extension=php_openssl.dll</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Seeing the below output which confirmed the dependencies had worked was a great feeling!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">PHPUnit 8.1.3 by Sebastian Bergmann and contributors.<br> ==> RecipesTest                ✔  <br>Time: 2.87 seconds, Memory: 4.00 MB<br>OK (1 test, 2 assertions)<br></pre>\n<!-- /wp:preformatted -->', 'Bug Fixing:  CodeDungeon\'s Printer for your PHP Unit Tests', '', 'publish', 'open', 'open', '', 'bug-fixing-codedungeons-printer-for-your-php-unit-tests', '', '', '2019-05-08 15:05:50', '2019-05-08 14:05:50', '', 0, 'https://blog.jonniegrieve.co.uk/?p=70', 0, 'post', '', 0),
(71, 1, '2019-05-08 15:04:07', '2019-05-08 14:04:07', '<!-- wp:paragraph -->\n<p>In this blog, I\'ll talk about Test Driven development, (TDD) and how it has helped me understand how this process can be used to learn how to fight bugs in your code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unit Testing has been one of those realities of the coding world that I haven\'t really got into the habit of working with just yet. I first encountered it when trying to apply the skills to JavaScript. But I was struggling to understand how to run a Unit Test never mind learn about Test Driven Development.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Yesterday I cracked that part of the problem and I finally learned that TDD isn\'t so much a type of Unit Testing but a methodology that developers can and should use when they\'re writing their code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The essential concept of TDD is that you write Unit Tests for individual pieces of you code and keep writing that code till all of your tests pass. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And, as ever the best way to learn anything is to apply it to an example, which I have done here.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have a script which tests for words, digraph and trigraph words in particular and tests that the given words are correctly converted to PigLatin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Unit Tests</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here are those tests. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">/** @test */\n    function convertSingleStartingConsonantWordToPigLatin() {\n        $word = \"test\";\n        $expectedResult = \"esttay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n\n    /** @test */\n    function convertDiagraphWordToPigLatin() {\n        $word = \"treehouse\";\n        $expectedResult = \"eehousetray\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }\n        /** @test */\n    function convertTrigraphWordToPigLatin() {\n        $word = \"schematic\";\n        $expectedResult = \"ematicschay\";\n\n        $pigLatin = new PigLatin();\n        $result = $pigLatin-&gt;convert($word);\n\n        //make an assertion\n        $this-&gt;assertEquals(\n            $expectedResult,\n            $result,\n            \"the conversion did not work\"\n        );\n    }</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>By the time I was ready to write the test for the Trigraphs I\'d gotten the hang of the process and I was ready finish the tests. But while my knowledge of PigLatin isn\'t the best I was pretty sure I\'d used the right words and conversion for the Trigraph test.  I used the word schematic which should be correctly converted to \" ematicshay \" But after a bit of digging, what the compiler seemed to be telling me was that the word it was expecting was \" hematiscay \".</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Why was this?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Well, it turns out that even though the test was being told to look for trigraph conversions it was actually treating the test as a digraph, meaning it was taking away 2 letters for the conversion instead of 3.  This was due to the order of placement for the condition in the <em>convert() </em>method.  Here\'s the method in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">function convert($word) { <br>                         <br>        $firstLetter = substr($word, 0, 1);<br>        $firstTwoLetters = substr($word, 0, 2);<br>        $firstThreeLetters = substr($word, 0, 3);<br><br>        if(in_array($firstThreeLetters, $this-&gt;trigraphs)) {<br><br>            $newWord = substr($word, 3);<br>            $newWord .= $firstThreeLetters . \'ay\';<br><br>        } else if (in_array($firstTwoLetters, $this-&gt;digraphs)) {<br><br>            $newWord = substr($word, 2);<br>            $newWord .= $firstTwoLetters . \'ay\';<br>        } else {<br>            $newWord = substr($word, 1);<br>            $newWord .= $firstLetter . \'ay\';<br><br>        }<br>        return $newWord;<br>    } </pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>In order to fix it I had to switch the condition statements as shown above so that the correct conversion could be used and all 3 Unit Tests could pass.  But this is the key point.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If it was not for the Unit Tests, this bug might not have been picked up on at all.  The convert method does what it says on the tin; it removes characters and correctly places them at the end of the word to mimic PigLatin syntax. But writing Unit Tests with Test Driven Development arms you with even more protection than PHP or your chosen language can offer you on its own against those annoying bugs in your website or web application. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To reference the array in the condition do not use the $ character. This means the tests will not pass as the objects cannot be found in the TestCase file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>To Conclude</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So, I learned yesterday about what TDD is.  Today was about learning how to apply TDD and how it can diagnose bugs in code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ematicshay not hematischay for the new word.  It kept coming back at ematischay, which I thought was odd.  I didn\'t understand why it should be so different baring in mind the code in the class was wrapped in condition blocks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It turns out what\'s happening is the code is being tested in order so tests for digraphs are being run first rather than trigraphs. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Test Driven Development (featuring PHP)', '', 'inherit', 'closed', 'closed', '', '60-autosave-v1', '', '', '2019-05-08 15:04:07', '2019-05-08 14:04:07', '', 60, 'https://blog.jonniegrieve.co.uk/60-autosave-v1/', 0, 'revision', '', 0),
(72, 1, '2019-05-08 15:05:27', '2019-05-08 14:05:27', '<!-- wp:paragraph -->\n<p>This blog follows on from my previous blog on <a href=\"https://blog.jonniegrieve.co.uk/test-driven-development-featuring-php/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"Test Driven Development with PHP (opens in a new tab)\">Test Driven Development with PHP</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here\'s the problem. I\'m trying to learn about Unit Testing in PHP, but it hasn\'t been a faultless experience. I can run Unit tests using PHPUnit\'s standard printer for CLI\'s  (that\'s Command Line Interfaces). But I want to use the more advanced printer provided by code dungeon.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So using Composer I attempt to install it. It turns out I need to use an updated version of PHP.  I only had 7.1.1 but the dependency requires 7.2+. And I naturally google to find out how to do it. I go through the instructions put the downloaded files in the suggested folder in my<strong> C:</strong> drive, refer to it in my systems environment variables and try again.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I then attempt to verify the change has worked.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">php$ php -vPHP 7.1.1 (cli) (built: Jan 18 2017 18:51:14) ( ZTS MSVC14 (Visual C++ 2015) x86 )<br>Copyright (c) 1997-2017 The PHP GroupZend Engine v3.1.0, <br>Copyright (c) 1998-2017 Zend Technologies</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Hmm. But this is not quite what I was hoping for.  My system is picking up the original installation. So where is that? And how can I get my system to recognise PHP 7.2?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following command gives me a clue.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ where php\nC:\\xamp\\php\\php.exeC:\\PHP7\\php.exe </pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>So it\'s picking up both installtions of PHP. That is the one bundled with XAMPP and the new one that I downloaded. But it\'s still not favouring 7.2 with <strong>php -v</strong>. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Maybe it\'s time to remove XAMPP, where my current version of PHP lives and do a clean install preferably with the latest version of PHP. But this terrifies me because the last thing I want to do is mess something up irrevocably in my local server installation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But the bottom line is all that\'s really needed is a little bit of experimentation because this way if everything goes haywire I can always uninstall my XAMPP server and do a fresh installation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I copied the PHP 7.2 installation folder into the correct folder in my XAMPP installation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">$ php -v\n\nPHP 7.3.5 (cli) (built: May  1 2019 13:16:56) ( NTS MSVC15 (Visual C++ 2017) x64 )\nCopyright (c) 1997-2018 The PHP Group\nZend Engine v3.3.5, Copyright (c) 1998-2018 Zend Technologies</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>And now as we can see, the PHP version was showing up as 7.3.5 which meant I\'d completed the version upgrade of PHP. But as expected it was causing hardware conflicts which Apache meaning I was no longer able to start the server.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I could have scoured the internet for solutions, but ultimately it was just easier to uninstall completely and start again with a fresh install. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And that was it. Job done. I was so proud of myself today. I got through what seemed like a daunting task with just a little bit of research, nous and experimentation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The only other stumbling block was having the presence of mind which <strong>php.ini </strong>configuration file I needed to change to allow Composer to finally download the project dependencies.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://stackoverflow.com/questions/35249620/the-openssl-extension-is-required-for-ssl-tls-protection\">https://stackoverflow.com/questions/35249620/the-openssl-extension-is-required-for-ssl-tls-protection</a><br><a href=\"https://stackoverflow.com/questions/38818464/configuration-does-not-allow-connection-to-http-packagist-org-packages-json\">https://stackoverflow.com/questions/38818464/configuration-does-not-allow-connection-to-http-packagist-org-packages-json</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To enable this to happen I went into the PHP7 directory I downloaded earlier and made the required changes there, including uncommenting the extension required to run SSL requests. The setting in php.ini is <em>extension=php_openssl.dll</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Seeing the below output which confirmed the dependencies had worked was a great feeling!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">PHPUnit 8.1.3 by Sebastian Bergmann and contributors.<br> ==> RecipesTest                ✔  <br>Time: 2.87 seconds, Memory: 4.00 MB<br>OK (1 test, 2 assertions)<br></pre>\n<!-- /wp:preformatted -->', 'Bug Fixing:  CodeDungeon\'s Printer for your PHP Unit Tests', '', 'inherit', 'closed', 'closed', '', '70-revision-v1', '', '', '2019-05-08 15:05:27', '2019-05-08 14:05:27', '', 70, 'https://blog.jonniegrieve.co.uk/70-revision-v1/', 0, 'revision', '', 0),
(74, 1, '2019-05-17 15:06:15', '2019-05-17 14:06:15', '<!-- wp:paragraph -->\n<p>A few years ago I was thrilled to stumble upon a wonderful concept in digital music creation: Musical performance through Live coding.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You see, I\'ve had an interest in digital music ever since I started my Web Design and Digital Media degree in 2009.  I\'m a web designer by profession but I cannot tell you how much fun I had with my university\'s Pro Tools Digital Music software.  This software had the capability of making me sound like a musical maestro so long as I was able to accurately translate music notation to the screen. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But after I left university, my time and resources meant I no longer had access to Pro Tools.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can therefore imagine my excitement when Sonic Pi came along.  A free platform that I could use to harness my creativity and potential. This was back in 2015 and though the program downloaded successfully I never actually got further than the welcome screen when trying to run it.  So eventually I lost interest and moved on.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But this is 2019 and last night I had a sudden lightbulb moment and I just thought wouldn\'t it be nice to give it a try again? So I put the message about this out on social media and here on Twitter the very same Sonic Pi gave me the encouragement to download the program and give it a try.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:core-embed/twitter {\"url\":\"https://twitter.com/jg_DigitalMedia/status/1129129183983079431\",\"type\":\"rich\",\"providerNameSlug\":\"twitter\",\"className\":\"\"} -->\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\nhttps://twitter.com/jg_DigitalMedia/status/1129129183983079431\n</div></figure>\n<!-- /wp:core-embed/twitter -->\n\n<!-- wp:paragraph -->\n<p>It\'s because of my last experience that I was very tepid about the idea of going through all that again.  But after just a few minutes I found myself looking at a screen like this: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":75} -->\n<figure class=\"wp-block-image\"><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/05/sonic-pi-1024x771.png\" alt=\"Sonic Pi Interface\" class=\"wp-image-75\"/><figcaption>Sonic Pi Interface</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>It worked!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So, I threw away any ideas about other plans for the day I might have had and dived right into the <a href=\"https://sonic-pi.net/tutorial.html#section-1\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"engaging tutorial  (opens in a new tab)\">engaging tutorial </a>provided by Sam Aaron at Sonic Pi and before long I was attempting to code an (albeit rather simplistic) rendition of the first 2 bars of the Game of Thrones theme.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s not easily shareable I\'m afraid but you are able to code on the fly, run your code and save your recordings as wave files using the built-in synths and samples. If only I was able to do all of this a few years ago but I suppose there is a time for everything.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the picture above is an example of how to code a simple chord of music up to 1 standard beat of music notation. You can even play by letter in music notation as well as it\'s sharps and flats.  And in order to change the sound, you can use one of the many synths.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That\'s just a small summary of some of the very basics of Sonic Pi. I could go on explaining it all but I would encourage you if you\'re interested just to download <a rel=\"noreferrer noopener\" aria-label=\"Sonic Pi (opens in a new tab)\" href=\"https://sonic-pi.net\" target=\"_blank\">Sonic Pi</a> and give it a try yourself.  If you have any interest at all in digital music and love to code it\'ll be right up your street.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\'ll just leave you with a simple code snippet from the engaging Sonic Pi Tutorial just to get you going.  :)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"># A live loop code sample from Sonic Pi\nlive_loop :flibble do\n   #sample : ambi_choir\n   sample :bd_haus, rate: 1\n   sleep 0.4\n end</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Making Music with Sonic Pi', '', 'publish', 'open', 'open', '', 'making-music-with-sonic-pi', '', '', '2019-05-17 15:06:16', '2019-05-17 14:06:16', '', 0, 'https://blog.jonniegrieve.co.uk/?p=74', 0, 'post', '', 0),
(75, 1, '2019-05-17 14:46:16', '2019-05-17 13:46:16', 'Sonic Pi Interface', 'sonic-pi', 'Sonic Pi Interface', 'inherit', 'open', 'closed', '', 'sonic-pi', '', '', '2019-05-17 14:47:51', '2019-05-17 13:47:51', '', 74, 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/05/sonic-pi.png', 0, 'attachment', 'image/png', 0),
(76, 1, '2019-05-17 14:46:47', '2019-05-17 13:46:47', '<!-- wp:paragraph -->\n<p>A few years ago I was thrilled to stumble upon a wonderful concept in digital music creation: Musical performance through Live coding.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You see, I\'ve had an interest in digital music ever since I started my Web Design and Digital Media degree in 2009.  I\'m a web designer by profession but I cannot tell you how much fun I had with my university\'s Pro Tools Digital Music software.  This software had the capability of making me sound like a musical maestro so long as I was able to accurately translate music notation to the screen.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But after I left University, my time and resources meant I no longer had access to Pro Tools.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can then imagine my excitement when Sonic Pi came along.  A free platform that I could use to harness my creativity and potential. This was back in 2015 and though the program downloaded I never actually got further than the welcome screen when trying to run it.  So eventually I lost interest and moved on.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But this is 2019 and last night I had a sudden lightbulb moment and I just thought wouldn\'t it be nice to give it a try again? So I put the message about this out on social media and here on Twitter the very same Sonic Pi gave me the encouragement to download the program and give it a try.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:core-embed/twitter {\"url\":\"https://twitter.com/jg_DigitalMedia/status/1129129183983079431\",\"type\":\"rich\",\"providerNameSlug\":\"twitter\",\"className\":\"\"} -->\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\nhttps://twitter.com/jg_DigitalMedia/status/1129129183983079431\n</div></figure>\n<!-- /wp:core-embed/twitter -->\n\n<!-- wp:paragraph -->\n<p>It\'s because of my last experience that I was very tepid about the idea of going through all that again.  But after just a few minutes I found myself looking at a screen like this: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img class=\"wp-image-75\" style=\"width: 168px;\" src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/05/sonic-pi.png\" alt=\"Sonic Pi Inrerface\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>Welcome to Sonic Pi v3.1</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>live_loop :flibble do<br>\n  #sample : ambi_choir<br>\n  sample :bd_haus, rate: 1<br>\n  sleep 0.4<br>\nend</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>and now it works</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>live_loop:<br>\n   with_fx</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>sleep</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>end</p>\n<!-- /wp:paragraph -->', 'Making Music with Sonic Pi', '', 'inherit', 'closed', 'closed', '', '74-revision-v1', '', '', '2019-05-17 14:46:47', '2019-05-17 13:46:47', '', 74, 'https://blog.jonniegrieve.co.uk/74-revision-v1/', 0, 'revision', '', 0),
(77, 1, '2019-05-17 15:01:18', '2019-05-17 14:01:18', '<!-- wp:paragraph -->\n<p>A few years ago I was thrilled to stumble upon a wonderful concept in digital music creation: Musical performance through Live coding.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You see, I\'ve had an interest in digital music ever since I started my Web Design and Digital Media degree in 2009.  I\'m a web designer by profession but I cannot tell you how much fun I had with my university\'s Pro Tools Digital Music software.  This software had the capability of making me sound like a musical maestro so long as I was able to accurately translate music notation to the screen. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But after I left university, my time and resources meant I no longer had access to Pro Tools.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can therefore imagine my excitement when Sonic Pi came along.  A free platform that I could use to harness my creativity and potential. This was back in 2015 and though the program downloaded successfully I never actually got further than the welcome screen when trying to run it.  So eventually I lost interest and moved on.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But this is 2019 and last night I had a sudden lightbulb moment and I just thought wouldn\'t it be nice to give it a try again? So I put the message about this out on social media and here on Twitter the very same Sonic Pi gave me the encouragement to download the program and give it a try.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:core-embed/twitter {\"url\":\"https://twitter.com/jg_DigitalMedia/status/1129129183983079431\",\"type\":\"rich\",\"providerNameSlug\":\"twitter\",\"className\":\"\"} -->\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\nhttps://twitter.com/jg_DigitalMedia/status/1129129183983079431\n</div></figure>\n<!-- /wp:core-embed/twitter -->\n\n<!-- wp:paragraph -->\n<p>It\'s because of my last experience that I was very tepid about the idea of going through all that again.  But after just a few minutes I found myself looking at a screen like this: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":75} -->\n<figure class=\"wp-block-image\"><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/05/sonic-pi-1024x771.png\" alt=\"Sonic Pi Interface\" class=\"wp-image-75\"/><figcaption>Sonic Pi Interface</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>So, I threw away any ideas about other plans for the day I might have had and dived right into the engaging tutorial provided by Sam Aaron at Sonic Pi and before long I was attempting to code a (albeit rather simplistic) rendtion of the first 2 bars of the Game of Thrones theme.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s not easily sharable I\'m afraid but you are able to code on the fly, run your code and save your recordings as wave files using the built in synths and samples.  If only I  was able to do all of this a few years ago but I suppose there is a time for everything.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the picture above is an example of how to code a simple chord of music up to 1 standard beat of music notation.  You can even play by letter in music notation as well as it\'s sharps and flats.  And in order to change the sound you can use one of the many synths.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That\'s just a small summary of some of the very basics of Sonic Pi. I could go on explaining it all but I would encourage you if you\'re interested just to download <a rel=\"noreferrer noopener\" aria-label=\"Sonic Pi (opens in a new tab)\" href=\"https://sonic-pi.net\" target=\"_blank\">Sonic Pi</a> and give it a try yourself.  If you have any interest at all in digital music and love to code it\'ll be right up your street.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\'ll just leave you with a simple code snippet from the engaging Sonic Pi Tutorial just to get you going.  :)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"># A live loop code sample from Sonic Pi\nlive_loop :flibble do\n   #sample : ambi_choir\n   sample :bd_haus, rate: 1\n   sleep 0.4\n end</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>and now it works</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Making Music with Sonic Pi', '', 'inherit', 'closed', 'closed', '', '74-revision-v1', '', '', '2019-05-17 15:01:18', '2019-05-17 14:01:18', '', 74, 'https://blog.jonniegrieve.co.uk/74-revision-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(78, 1, '2019-05-17 15:04:41', '2019-05-17 14:04:41', '<!-- wp:paragraph -->\n<p>A few years ago I was thrilled to stumble upon a wonderful concept in digital music creation: Musical performance through Live coding.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You see, I\'ve had an interest in digital music ever since I started my Web Design and Digital Media degree in 2009.  I\'m a web designer by profession but I cannot tell you how much fun I had with my university\'s Pro Tools Digital Music software.  This software had the capability of making me sound like a musical maestro so long as I was able to accurately translate music notation to the screen. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But after I left university, my time and resources meant I no longer had access to Pro Tools.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can therefore imagine my excitement when Sonic Pi came along.  A free platform that I could use to harness my creativity and potential. This was back in 2015 and though the program downloaded successfully I never actually got further than the welcome screen when trying to run it.  So eventually I lost interest and moved on.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But this is 2019 and last night I had a sudden lightbulb moment and I just thought wouldn\'t it be nice to give it a try again? So I put the message about this out on social media and here on Twitter the very same Sonic Pi gave me the encouragement to download the program and give it a try.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:core-embed/twitter {\"url\":\"https://twitter.com/jg_DigitalMedia/status/1129129183983079431\",\"type\":\"rich\",\"providerNameSlug\":\"twitter\",\"className\":\"\"} -->\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\nhttps://twitter.com/jg_DigitalMedia/status/1129129183983079431\n</div></figure>\n<!-- /wp:core-embed/twitter -->\n\n<!-- wp:paragraph -->\n<p>It\'s because of my last experience that I was very tepid about the idea of going through all that again.  But after just a few minutes I found myself looking at a screen like this: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":75} -->\n<figure class=\"wp-block-image\"><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/05/sonic-pi-1024x771.png\" alt=\"Sonic Pi Interface\" class=\"wp-image-75\"/><figcaption>Sonic Pi Interface</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>It worked!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So, I threw away any ideas about other plans for the day I might have had and dived right into the <a href=\"https://sonic-pi.net/tutorial.html#section-1\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"engaging tutorial  (opens in a new tab)\">engaging tutorial </a>provided by Sam Aaron at Sonic Pi and before long I was attempting to code an (albeit rather simplistic) rendition of the first 2 bars of the Game of Thrones theme.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s not easily shareable I\'m afraid but you are able to code on the fly, run your code and save your recordings as wave files using the built-in synths and samples. If only I was able to do all of this a few years ago but I suppose there is a time for everything.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the picture above is an example of how to code a simple chord of music up to 1 standard beat of music notation. You can even play by letter in music notation as well as it\'s sharps and flats.  And in order to change the sound, you can use one of the many synths.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That\'s just a small summary of some of the very basics of Sonic Pi. I could go on explaining it all but I would encourage you if you\'re interested just to download <a rel=\"noreferrer noopener\" aria-label=\"Sonic Pi (opens in a new tab)\" href=\"https://sonic-pi.net\" target=\"_blank\">Sonic Pi</a> and give it a try yourself.  If you have any interest at all in digital music and love to code it\'ll be right up your street.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\'ll just leave you with a simple code snippet from the engaging Sonic Pi Tutorial just to get you going.  :)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"># A live loop code sample from Sonic Pi\nlive_loop :flibble do\n   #sample : ambi_choir\n   sample :bd_haus, rate: 1\n   sleep 0.4\n end</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->', 'Making Music with Sonic Pi', '', 'inherit', 'closed', 'closed', '', '74-revision-v1', '', '', '2019-05-17 15:04:41', '2019-05-17 14:04:41', '', 74, 'https://blog.jonniegrieve.co.uk/74-revision-v1/', 0, 'revision', '', 0),
(80, 1, '2019-05-23 16:57:00', '2019-05-23 15:57:00', '\"live_dj\".   Created on Sonic Pi by Jonnie Grieve Digital Media.  Playing Pretender as a Live Music DJ', 'live_dj.wav', ' Created on Sonic Pi by Jonnie Grieve Digital Media.  Playing Pretender as a Live Music DJ', 'inherit', 'open', 'closed', '', 'live_dj', '', '', '2019-05-23 16:59:24', '2019-05-23 15:59:24', '', 0, 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/05/live_dj.wav', 0, 'attachment', 'audio/wav', 0),
(83, 1, '2019-06-11 13:30:55', '2019-06-11 12:30:55', '<!-- wp:paragraph -->\n<p>In this short blog I wanted to share a little tip on what to do when you face those little apparently inexplainable bugs you get that just can\'t be Googled.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Sometimes you run into a problem that for whatever reason can\'t be googled. Either because no one has found your problem before and posted about it or your problem is in some way unique to you.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I found myself in one of those situations earlier today when I was working on a PHP project.  Everything was working as it should be but for one thing. For some reason, the words \"git status\" kept appearing on every page in monospace text surrounded in a white background.  It was being rendered into the code like this. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">&lt;pre><br>       git status<br>&lt;/pre></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>But when I actually looked at the source code via the browser rather than the Development Tools, there was no sign of it appearing. I couldn\'t find a trace of it in my files either.  I was utterly confused. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And how was I going to find the answer? I defy anyone not to say there\'s a problem or bug that can\'t be googled. Tell me how to helpfully google \"<em>why is PHP printing the words \"git status</em>\" randomly on my browser screen?\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Sometimes you just have to vocalise your thoughts or write them down like I did and work out the problem for yourself.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some context just in case it\'s needed: \"Git status\" is a command used in the command line ( i.e. a program like MS-DOS) for a Version Control System (VCS). It\'s basically a way of snapshotting saved versions of my work. I use a text editor so I can save my work and manage my projects using a VCS. All that happened was somewhere in my project, the words “git status” found its way directly in one of my files when I was trying to type it into the terminal and therefore it showed up in the browser. Mystery solved!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Through this process I was able to search the files for the string, finally locate the file in my project and remove the string. Problem solved! </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Google is indeed everything when it comes to programming. A lot of it involves looking things up. But at you\'ll find at times the answer to the problem isn\'t available in a search result. So it\'s at these times you just need to write down the problem so you can think through the solutions for yourself. </p>\n<!-- /wp:paragraph -->', 'How to handle those situations when Google is no help to you', '', 'publish', 'open', 'open', '', 'how-to-handle-those-situations-when-google-is-no-help-to-you', '', '', '2019-06-11 13:30:56', '2019-06-11 12:30:56', '', 0, 'https://blog.jonniegrieve.co.uk/?p=83', 0, 'post', '', 0),
(84, 1, '2019-06-11 13:30:55', '2019-06-11 12:30:55', '<!-- wp:paragraph -->\n<p>In this short blog I wanted to share a little tip on what to do when you face those little apparently inexplainable bugs you get that just can\'t be Googled.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Sometimes you run into a problem that for whatever reason can\'t be googled. Either because no one has found your problem before and posted about it or your problem is in some way unique to you.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I found myself in one of those situations earlier today when I was working on a PHP project.  Everything was working as it should be but for one thing. For some reason, the words \"git status\" kept appearing on every page in monospace text surrounded in a white background.  It was being rendered into the code like this. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">&lt;pre><br>       git status<br>&lt;/pre></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>But when I actually looked at the source code via the browser rather than the Development Tools, there was no sign of it appearing. I couldn\'t find a trace of it in my files either.  I was utterly confused. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And how was I going to find the answer? I defy anyone not to say there\'s a problem or bug that can\'t be googled. Tell me how to helpfully google \"<em>why is PHP printing the words \"git status</em>\" randomly on my browser screen?\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Sometimes you just have to vocalise your thoughts or write them down like I did and work out the problem for yourself.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some context just in case it\'s needed: \"Git status\" is a command used in the command line ( i.e. a program like MS-DOS) for a Version Control System (VCS). It\'s basically a way of snapshotting saved versions of my work. I use a text editor so I can save my work and manage my projects using a VCS. All that happened was somewhere in my project, the words “git status” found its way directly in one of my files when I was trying to type it into the terminal and therefore it showed up in the browser. Mystery solved!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Through this process I was able to search the files for the string, finally locate the file in my project and remove the string. Problem solved! </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Google is indeed everything when it comes to programming. A lot of it involves looking things up. But at you\'ll find at times the answer to the problem isn\'t available in a search result. So it\'s at these times you just need to write down the problem so you can think through the solutions for yourself. </p>\n<!-- /wp:paragraph -->', 'How to handle those situations when Google is no help to you', '', 'inherit', 'closed', 'closed', '', '83-revision-v1', '', '', '2019-06-11 13:30:55', '2019-06-11 12:30:55', '', 83, 'https://blog.jonniegrieve.co.uk/83-revision-v1/', 0, 'revision', '', 0),
(86, 1, '2019-07-18 15:29:11', '2019-07-18 14:29:11', '<!-- wp:paragraph -->\n<p>In my last blog last month, I talked about handling those situations when Google is no help to you as a designer/developer.  But most of the time it\'s exactly what you need.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In fact these days you often turn to it without realising it.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s been an absolute pleasure in the last month or so to work on a new design for a client that required the ability to post content as and when required; the ability to change the state of that content to another group of content as well as a swipeable image gallery for individual pages.  That work remains ongoing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I was always confident I would be able to utilise WordPress to do this but the job still needs doing.  That for me can sometimes mean going back through notes and learning resources to refresh myself on the tools and technology required to do my job.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For me, this was a reminder of which WordPress template comes where in the template hierarchy and how to use Custom Post Types.  Until recently despite exposing myself to this concept quite for quite some time I never seemed to get it right.  And I think at the time it was because I didn\'t find the right places to look for the answer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But that\'s in the past.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the time of writing, I\'m at the point in my project where I\'ve been able to build the core functionality of the website.  I\'m now able to switch individual custom posts between 3 different post types and consequently individual posts switch between different places in the post type page.  And I\'ve been able to customise the appearance of the image slider based on the number of custom fields that have been filled in.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>How did I do that?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Well, I knew it would have to be based on a specific condition. Which for programming means an \"if\" statement. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>if( condition ) {<br><br>}</p><cite>If statement block</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>This condition needed to check first that a value for a specific custom field existed and if it did not, don\'t attempt to retrieve the field at all.  So for as many custom fields that specify an image the slider would pick up that image and display it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But how best to do that?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>&lt;? if ( the_field(\"\") === $slider_one</p><cite>First condition, checking a field is empty by passing it an empty string</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>In this first condition, I tried checking that the string I passed was the same as the value of the slider variable.  In hindsight, it wasn\'t what I needed to do but it seemed to have some effect in vanishing the specific image. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>&lt;?php if( !empty( the_field($slider_one) ) { ?></p><cite>Attempt #2, checking for an empty value with the empty() method</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I tried it another way by checking a specific field was NOT empty but it seemed to only have the effect of the first condition.  It would make the image disappear whether the custom field had a value or not.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At this point, I\'d been working on the problem for about half an hour and I felt compelled to turn to Google.   I can\'t remember what keyword terms I put in but I found this on my first try.   <a rel=\"noreferrer noopener\" aria-label=\"https://www.advancedcustomfields.com/resources/hiding-empty-fields/   (opens in a new tab)\" href=\"https://www.advancedcustomfields.com/resources/hiding-empty-fields/ \" target=\"_blank\">https://www.advancedcustomfields.com/resources/hiding-empty-fields/  </a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And then as it always goes, the answer is always clearer when it\'s spelled out to you.  It\'s the same logic that I was trying with a different method.  You simply check for a value stored in a custom field which is what <strong>get_field() </strong>does rather than <strong>the_field()</strong> which displayed it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>&lt;?php if( get_field( $slider_one ) ) :  ?> <span style=\"font-size: inherit;\">&lt;?php endif; ?></span></p><cite>The solution - Bringing get_field() into play for the first time.</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>It\'s a point I\'d like to reiterate in closing this post: getting the information you need from search engines or other resources is not a cheat.  Few of us have a photographic memory and certainly not me. It\'s good programming practice to look up websites and technical documentation to help you along the way.</p>\n<!-- /wp:paragraph -->', 'Learning to work with Custom Post Types and Fields in WordPress', '', 'publish', 'open', 'open', '', 'learning-to-work-with-custom-post-types-and-fields-in-wordpress', '', '', '2019-07-18 15:29:12', '2019-07-18 14:29:12', '', 0, 'https://blog.jonniegrieve.co.uk/?p=86', 0, 'post', '', 0),
(87, 1, '2019-07-18 15:24:48', '2019-07-18 14:24:48', '<!-- wp:paragraph -->\n<p>In my last blog last month, I talked about handling those situations when Google is no help to you as a designer/developer.  But most of the time it\'s exactly what you need.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In fact these days you often turn to it without realising it.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s been an absolute pleasure in the last month or so to work on a new design for a client that required the ability to post content as and when required; the ability to change the state of that content to another group of content as well as a swipeable image gallery for individual pages.  That work remains ongoing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I was always confident I would be able to utilise WordPress to do this but the job still needs doing.  That for me can sometimes mean going back through notes and learning resources to refresh myself on the tools and technology required to do my job.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For me, this was a reminder of which WordPress template comes where in the template hierarchy and how to use Custom Post Types.  Until recently despite exposing myself to this concept quite for quite some time I never seemed to get it right.  And I think at the time it was because I didn\'t find the right places to look for the answer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But that\'s in the past.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the time of writing, I\'m at the point in my project where I\'ve been able to build the core functionality of the website.  I\'m now able to switch individual custom posts between 3 different post types and consequently individual posts switch between different places in the post type page.  And I\'ve been able to customise the appearance of the image slider based on the number of custom fields that have been filled in.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>How did I do that?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Well, I knew it would have to be based on a specific condition. Which for programming means an \"if\" statement. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>if( condition ) {<br><br>}</p><cite>If statement block</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>This condition needed to check first that a value for a specific custom field existed and if it did not, don\'t attempt to retrieve the field at all.  So for as many custom fields that specify an image the slider would pick up that image and display it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But how best to do that?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>&lt;? if ( the_field(\"\") === $slider_one</p><cite>First condition, checking a field is empty by passing it an empty string</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>In this first condition, I tried checking that the string I passed was the same as the value of the slider variable.  In hindsight, it wasn\'t what I needed to do but it seemed to have some effect in vanishing the specific image. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>&lt;?php if( !empty( the_field($slider_one) ) { ?></p><cite>Attempt 2</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I tried it another way by checking a specific field was NOT empty but it seemed to only have the effect of the first condition.  It would make the image disappear whether the custom field had a value or not.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At this point, I\'d been working on the problem for about half an hour and I felt compelled to turn to Google.   I can\'t remember what keyword terms I put in but I found this on my first try.   <a rel=\"noreferrer noopener\" aria-label=\"https://www.advancedcustomfields.com/resources/hiding-empty-fields/   (opens in a new tab)\" href=\"https://www.advancedcustomfields.com/resources/hiding-empty-fields/ \" target=\"_blank\">https://www.advancedcustomfields.com/resources/hiding-empty-fields/  </a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And then as it always goes, the answer is always clearer when it\'s spelled out to you.  It\'s the same logic that I was trying with a different method.  You simply check for a value stored in a custom field which is what <strong>get_field() </strong>does rather than <strong>the_field()</strong> which displayed it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>&lt;?php if( get_field( $slider_one ) ) :  ?></p><p>  // content<br>&lt;?php endif; ?></p><cite>The solution</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>It\'s a point I\'d like to reiterate in closing this post: getting the information you need from search engines or other resources is not a cheat.  Few of us have a photographic memory and certainly not me. It\'s good programming practice to look up websites and technical documentation to help you along the way</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>jhjj</p>\n<!-- /wp:paragraph -->', '', '', 'inherit', 'closed', 'closed', '', '86-revision-v1', '', '', '2019-07-18 15:24:48', '2019-07-18 14:24:48', '', 86, 'https://blog.jonniegrieve.co.uk/86-revision-v1/', 0, 'revision', '', 0),
(88, 1, '2019-07-18 15:25:30', '2019-07-18 14:25:30', '<!-- wp:paragraph -->\n<p>In my last blog last month, I talked about handling those situations when Google is no help to you as a designer/developer.  But most of the time it\'s exactly what you need.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In fact these days you often turn to it without realising it.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s been an absolute pleasure in the last month or so to work on a new design for a client that required the ability to post content as and when required; the ability to change the state of that content to another group of content as well as a swipeable image gallery for individual pages.  That work remains ongoing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I was always confident I would be able to utilise WordPress to do this but the job still needs doing.  That for me can sometimes mean going back through notes and learning resources to refresh myself on the tools and technology required to do my job.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For me, this was a reminder of which WordPress template comes where in the template hierarchy and how to use Custom Post Types.  Until recently despite exposing myself to this concept quite for quite some time I never seemed to get it right.  And I think at the time it was because I didn\'t find the right places to look for the answer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But that\'s in the past.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the time of writing, I\'m at the point in my project where I\'ve been able to build the core functionality of the website.  I\'m now able to switch individual custom posts between 3 different post types and consequently individual posts switch between different places in the post type page.  And I\'ve been able to customise the appearance of the image slider based on the number of custom fields that have been filled in.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>How did I do that?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Well, I knew it would have to be based on a specific condition. Which for programming means an \"if\" statement. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>if( condition ) {<br><br>}</p><cite>If statement block</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>This condition needed to check first that a value for a specific custom field existed and if it did not, don\'t attempt to retrieve the field at all.  So for as many custom fields that specify an image the slider would pick up that image and display it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But how best to do that?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>&lt;? if ( the_field(\"\") === $slider_one</p><cite>First condition, checking a field is empty by passing it an empty string</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>In this first condition, I tried checking that the string I passed was the same as the value of the slider variable.  In hindsight, it wasn\'t what I needed to do but it seemed to have some effect in vanishing the specific image. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>&lt;?php if( !empty( the_field($slider_one) ) { ?></p><cite>Attempt 2</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I tried it another way by checking a specific field was NOT empty but it seemed to only have the effect of the first condition.  It would make the image disappear whether the custom field had a value or not.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At this point, I\'d been working on the problem for about half an hour and I felt compelled to turn to Google.   I can\'t remember what keyword terms I put in but I found this on my first try.   <a rel=\"noreferrer noopener\" aria-label=\"https://www.advancedcustomfields.com/resources/hiding-empty-fields/   (opens in a new tab)\" href=\"https://www.advancedcustomfields.com/resources/hiding-empty-fields/ \" target=\"_blank\">https://www.advancedcustomfields.com/resources/hiding-empty-fields/  </a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And then as it always goes, the answer is always clearer when it\'s spelled out to you.  It\'s the same logic that I was trying with a different method.  You simply check for a value stored in a custom field which is what <strong>get_field() </strong>does rather than <strong>the_field()</strong> which displayed it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>&lt;?php if( get_field( $slider_one ) ) :  ?></p><p>  // content<br><br>&lt;?php endif; ?></p><cite>The solution</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>It\'s a point I\'d like to reiterate in closing this post: getting the information you need from search engines or other resources is not a cheat.  Few of us have a photographic memory and certainly not me. It\'s good programming practice to look up websites and technical documentation to help you along the way</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>jhjj</p>\n<!-- /wp:paragraph -->', '', '', 'inherit', 'closed', 'closed', '', '86-revision-v1', '', '', '2019-07-18 15:25:30', '2019-07-18 14:25:30', '', 86, 'https://blog.jonniegrieve.co.uk/86-revision-v1/', 0, 'revision', '', 0),
(89, 1, '2019-07-18 15:29:11', '2019-07-18 14:29:11', '<!-- wp:paragraph -->\n<p>In my last blog last month, I talked about handling those situations when Google is no help to you as a designer/developer.  But most of the time it\'s exactly what you need.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In fact these days you often turn to it without realising it.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s been an absolute pleasure in the last month or so to work on a new design for a client that required the ability to post content as and when required; the ability to change the state of that content to another group of content as well as a swipeable image gallery for individual pages.  That work remains ongoing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I was always confident I would be able to utilise WordPress to do this but the job still needs doing.  That for me can sometimes mean going back through notes and learning resources to refresh myself on the tools and technology required to do my job.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For me, this was a reminder of which WordPress template comes where in the template hierarchy and how to use Custom Post Types.  Until recently despite exposing myself to this concept quite for quite some time I never seemed to get it right.  And I think at the time it was because I didn\'t find the right places to look for the answer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But that\'s in the past.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the time of writing, I\'m at the point in my project where I\'ve been able to build the core functionality of the website.  I\'m now able to switch individual custom posts between 3 different post types and consequently individual posts switch between different places in the post type page.  And I\'ve been able to customise the appearance of the image slider based on the number of custom fields that have been filled in.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>How did I do that?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Well, I knew it would have to be based on a specific condition. Which for programming means an \"if\" statement. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>if( condition ) {<br><br>}</p><cite>If statement block</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>This condition needed to check first that a value for a specific custom field existed and if it did not, don\'t attempt to retrieve the field at all.  So for as many custom fields that specify an image the slider would pick up that image and display it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But how best to do that?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>&lt;? if ( the_field(\"\") === $slider_one</p><cite>First condition, checking a field is empty by passing it an empty string</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>In this first condition, I tried checking that the string I passed was the same as the value of the slider variable.  In hindsight, it wasn\'t what I needed to do but it seemed to have some effect in vanishing the specific image. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>&lt;?php if( !empty( the_field($slider_one) ) { ?></p><cite>Attempt #2, checking for an empty value with the empty() method</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I tried it another way by checking a specific field was NOT empty but it seemed to only have the effect of the first condition.  It would make the image disappear whether the custom field had a value or not.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At this point, I\'d been working on the problem for about half an hour and I felt compelled to turn to Google.   I can\'t remember what keyword terms I put in but I found this on my first try.   <a rel=\"noreferrer noopener\" aria-label=\"https://www.advancedcustomfields.com/resources/hiding-empty-fields/   (opens in a new tab)\" href=\"https://www.advancedcustomfields.com/resources/hiding-empty-fields/ \" target=\"_blank\">https://www.advancedcustomfields.com/resources/hiding-empty-fields/  </a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And then as it always goes, the answer is always clearer when it\'s spelled out to you.  It\'s the same logic that I was trying with a different method.  You simply check for a value stored in a custom field which is what <strong>get_field() </strong>does rather than <strong>the_field()</strong> which displayed it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>&lt;?php if( get_field( $slider_one ) ) :  ?> <span style=\"font-size: inherit;\">&lt;?php endif; ?></span></p><cite>The solution - Bringing get_field() into play for the first time.</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>It\'s a point I\'d like to reiterate in closing this post: getting the information you need from search engines or other resources is not a cheat.  Few of us have a photographic memory and certainly not me. It\'s good programming practice to look up websites and technical documentation to help you along the way.</p>\n<!-- /wp:paragraph -->', 'Learning to work with Custom Post Types and Fields in WordPress', '', 'inherit', 'closed', 'closed', '', '86-revision-v1', '', '', '2019-07-18 15:29:11', '2019-07-18 14:29:11', '', 86, 'https://blog.jonniegrieve.co.uk/86-revision-v1/', 0, 'revision', '', 0),
(91, 1, '2019-10-03 15:55:19', '2019-10-03 14:55:19', '<!-- wp:paragraph -->\n<p>I\'m pleased to now show you all the latest project I\'ve been working on in the last few weeks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\"} -->\n<p style=\"text-align:center\"><a href=\"https://projects.jonniegrieve.co.uk/form_project/index/index.php\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">And here it is!</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":95} -->\n<figure class=\"wp-block-image\"><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/10/form_project-1024x1024.png\" alt=\"\" class=\"wp-image-95\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Why I\'ve done it</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This one has been a long time coming. It\'s a collection of web forms I\'ve made for various reasons and purposes. Functional forms that send data to a server and/or send emails.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\'ve been in the tech/web design industry for a long time. And one of the things I\'ve struggled with the most in my journey is how to write a good form.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I mean by a good form is one that sends an email but only when all validation checks have been passed. And not only this but how to adequately convey to a frustrated user of a form that an error has occurred and how to fix it.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using a form is fundamental to using the internet. Pretty much everything we do on it requires us to interact with a form. So I\'m really pleased I\'ve finally set aside good time to work on this. As I write this, it all still seems like a big mountain to climb but at least now I can see the summit in view.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I wanted to create a set of forms that handled email, returned values from the full range of form inputs, hidden form inputs, handles form redirects and submits data across more than one page. As it stands at the time of publishing I have a set of forms that do these things. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>How I did it</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once I\'d decided I wanted to do this, I spent a lot of time researching tutorials and examples of web forms out there including validation of web forms on both the client-side and the server-side. These are some of the links I found. They all formed the basis of my web form examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Why you should be using HTML5 form validation: a tour <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html\">https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html</a> </li><li>Jorem Rapini - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution\">http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution</a> </li><li>MDN  - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li><li>Instant form validation example client-side <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek\">https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek</a> </li><li>Dave Rupert - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://daverupert.com/2017/11/happier-html5-forms/\">https://daverupert.com/2017/11/happier-html5-forms/</a> </li><li>Mozilla Developer link - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Before this, I had a hard time getting my head around certain truths about web forms. Let me summarise a couple.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> <strong>\"php doesn\'t stop the form from processing\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first is that PHP forms will not pause submission even if it picks up validation errors. It doesn\'t work that way. So in my mind, I was just thinking to myself... \"<em>then how on earth can I stop empty or duplicate forms being sent to a client</em>\".  That was the very question that prompted me to get on to do this entire project.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to stop a form from submitting with its default behaviour, you need to use another language such as JavaScript. That\'s where it can get tricky because some users elect to switch JavaScript functionality off from their browser. So as well as client-side<em> validation, you need to take care of validation on the server-side too. So at that point,</em> you think <em>\"but that means without JavaScript I\'m back to square one\"! </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>\"You should only think of client-side validation as something you use to improve/hence the user experience\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Which brings me to my second point; you should only think of JavaScript validation as a courtesy to the user. A means to provide a good UX experience for a user filling in an online form. But if JavaScript is not available then PHP (or server-side validation) is your failsafe.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Form validation in the server-side is not about pausing submission of a form when there\'s failing validation, but writing the script to perform different actions based on when data is returned. And it is easier than I ever thought to make sure an email does not send when validation fails.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Managing the project </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I want to discuss a little bit about how I developed the project as it got bigger and more forms were introduced. This has not been without its problems and I\'ve had to overcome some issues along the way.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Because of the way I have structured this project; by putting each form example in its own directory structure; I had to find a way of getting the base styles (that is the styles that stay the same throughout the website) to apply to the pages for each form example. So that I didn\'t have to copy the SASS partials over every time I wanted to make a change.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To do this I made sure each directory and file structure was the same and simply imported the SASS partials using an @import directive on each equivalent partial from the base directory to that directory. I then import like this....  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<p>@import \"../../../form_project/assets/styles/common/pages/main.scss\";</p>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Then I am free to add more SASS partials for unique styles. Styles that won\'t be the same across plages.  This means that they\'d take a new place in the cascade, rather than one style constantly overriding the other.  I started out that way and it got messy very quickly causing funny things to happen in the browser.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This fix was great but it did mean of course that I had to run several different sass commands every time I make such a change but I felt that it was a better solution than trawling endlessly through files in my text editor. This way I can run the changes via the command line and let SASS do the heavy lifting. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\ncd ../../assets/styles\nsass --watch style.scss:style.css\ncd ../../form_handling/styles\nsass --watch style.scss:style.css\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>In a similar way, I imported PHP files using PHP\'s <em>require</em> method.  This is a good way of compartmentalising scripts so one file that would otherwise be filled with too many lines of code doesn\'t feel so big </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n< ?php require \"../assets/forms/form_handling.php\"; ? >\n<!-- /wp:shortcode -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>When the penny dropped</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It is only by spending the time that I have done that the penny dropped. The best way to learn is to immerse yourself in the technology.   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s only by spending the time that I have I was able to work out how to separate email functionality from the from handling part of the script and build a script that will not send an email to a server if there are errors in your form.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So to answer the questions I raised above,  <em>Sort out the PHP validation first and then think about providing a good UX experience with JavaScrip</em>t.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now that the project is out there and available to look at I will be looking to improve on it as the days and weeks come.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This will include</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Captcha functionality </li><li>Process a form but only if no validation errors! Do not submit if validation errors exist.  </li><li>html5 Input Types - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://www.w3schools.com/html/html_form_input_types.asp\">https://www.w3schools.com/html/html_form_input_types.asp</a>  </li><li>Styling of radio buttons and checkboxes </li><li>Dismissing error notifications that appear using JavaScript/jQuery</li><li>Prevent multiple form submissions </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>And I\'m very much looking forward to doing so.</p>\n<!-- /wp:paragraph -->', 'A project with Web Forms', '', 'publish', 'open', 'open', '', 'a-project-with-web-forms', '', '', '2019-10-03 15:55:20', '2019-10-03 14:55:20', '', 0, 'https://blog.jonniegrieve.co.uk/?p=91', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(92, 1, '2019-10-03 13:22:28', '2019-10-03 12:22:28', '<!-- wp:paragraph -->\n<p> I\'m pleased to now show you all the latest project I\'ve been working on in the last few weeks.  This one has been a long time coming. I\'ve been in the tech/web design industry for a long time.  And one of the things I\'ve struggled with the most in my journey is how to write a good form.  What I mean by a good form is one that sends an email but only when all validation checks have been passed.  And not only this but how to adequately convey to a frustrated user of a form that an error has taken place and how to fix it.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using a form is fundamental to using the internet.  Pretty much everything we do on it requires us to interact with a form. So I\'m really pleased I\'ve finally set aside good time to work on this. As I write this, it still seems like a big mountain to climb but at least now I can see the summit in view.  So I wanted to create a set of forms that handled email, returned values from the full range of form inputs, hidden form inputs, handles form redirects and submits data across more than one page. As it stands at the time of publishing I have a set of forms that do all these things, method___ Once I\'d decided I wanted to do this, I spent a lot of time researching tutorials and examples of web forms out there including validation of web forms on both the client-side and the server-side. These are some of the links I found. -> Why you should be using HTML5 form validation: a tour <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html\">https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html</a> -> Jorem Rapini - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution\">http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution</a> -> MDN  - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> Instant form validation example client side <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek\">https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek</a> -> Dave Rupert - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://daverupert.com/2017/11/happier-html5-forms/\">https://daverupert.com/2017/11/happier-html5-forms/</a> ->Mozilla Developer link - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> Before this I had a hard time getting my head around certain truths about web forms. Let me summarise a couple. <strong>\"php doesn\'t stop the form from processing\"</strong> The first is that PHP forms will not pause submission even if it picks up validation errors. That\'s not how it works. So in my mind I was just thinking to myself... \"then how on earth can I stop empty or duplicate forms being sent to a client\".  That was the very question that prompted me to get on to do this entire project.  In order to stop the form from submitting with its default behaviour, you need to use another language such as JavaScript. That\'s where it can get tricky because some users elect to switch JavaScript functionality off from their browser. So as well as client side validation, you need to take care of validation on the server side too. So I kept thinking to myself \"but that means without JavaScript I\'m back to square one\" <strong>\"You should only think of client-side validation as something you use to improve/hence the user experience\"</strong> Which brings me to my second point; you should only think of JS validation as a courtesy to the user. A means to provide a good UX experience for a user filling in a form. But if JavaScript is not available PHP (or server side validation is your failsafe.  Form validation in the server side is not about pausing submission of a form when there\'s failing validation, but writing the script to perform different actions based on when data is returned. \"managing the project in the best way.\" I want to discuss a little bit about how I developed the project as it got bigger and more forms were introduced. This has not been without its problems and I\'ve had to overcome some issues along the way.  Because of the way I have structured this project, by putting each form example in its own directory structure; I had to find a way of getting the base styles (that is the styles used throughout the website) to apply in each directory so that I didn\'t have to copy the sass partials over every time I wanted to make a change in one area. To do this I made sure each directory and file structure was the same and simply imported the Sass partials using an @import directive on each equivalent partial from the base directory to that directory. I then import lime this....  [code] Then I am free to add more sass partials for styles that can take a new place in the cascade, rather one style constantly overriding the other.  I started out that way and it got messy very quickly causing funny things to happen in the browser.  This fix was great but it does mean of course that I have to run several different sass commands every time I make such a change but I felt that it was a better solution than trawling endlessly through files in my text editor. This way I can run the changes via the command line and let Sass do the heavy lifting. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[commands]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>\n\nIn a similar way I imported php files using PHP\'s require method.  This is a good way of compartmentalising scripts so one file that would otherwise be filled with too many lines of code doesn\'t feel so big\n\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[code]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>\n\nThe penny dropping____\n\nIt is only by spending the time that I have done that the penny dropped.  \n\nSort out the PHP validation first and then think about providing a good UX experience with JavaScript. \n\nIt\'s only by spending the time that I have I was able to work out how to separate email functionality from the from handling part of the script and build a script that will not send an email to a server if there are errors in your form\n\nNow that the project is out there and available to look at I will be looking to improve on it as the days and weeks come.  This will include\n\n&nbsp;Captcha&nbsp;functionality&nbsp;**to&nbsp;do**\n+&nbsp;Process&nbsp;a&nbsp;form&nbsp;but&nbsp;only&nbsp;if&nbsp;no&nbsp;validation&nbsp;errors!&nbsp;Do&nbsp;not&nbsp;submit&nbsp;if&nbsp;validation&nbsp;errors&nbsp;exist.&nbsp;&nbsp;**to&nbsp;do**\n+&nbsp;html5&nbsp;Input&nbsp;Types&nbsp;-&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://www.w3schools.com/html/html_form_input_types.asp\">https://www.w3schools.com/html/html_form_input_types.asp</a>&nbsp;\n+&nbsp;Styling&nbsp;of&nbsp;radio&nbsp;buttons&nbsp;and&nbsp;checkboxes\n+&nbsp;Prevent&nbsp;multiple&nbsp;form&nbsp;submissions\n\n</p>\n<!-- /wp:paragraph -->', 'A project with web forms', '', 'inherit', 'closed', 'closed', '', '91-revision-v1', '', '', '2019-10-03 13:22:28', '2019-10-03 12:22:28', '', 91, 'https://blog.jonniegrieve.co.uk/91-revision-v1/', 0, 'revision', '', 0),
(93, 1, '2019-10-03 13:31:31', '2019-10-03 12:31:31', '<!-- wp:paragraph -->\n<p>I\'m pleased to now show you all the latest project I\'ve been working on in the last few weeks.  This one has been a long time coming. I\'ve been in the tech/web design industry for a long time.  And one of the things I\'ve struggled with the most in my journey is how to write a good form.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I mean by a good form is one that sends an email but only when all validation checks have been passed.  And not only this but how to adequately convey to a frustrated user of a form that an error has taken place and how to fix it.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using a form is fundamental to using the internet.  Pretty much everything we do on it requires us to interact with a form. So I\'m really pleased I\'ve finally set aside good time to work on this. As I write this, it still seems like a big mountain to climb but at least now I can see the summit in view.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I wanted to create a set of forms that handled email, returned values from the full range of form inputs, hidden form inputs, handles form redirects and submits data across more than one page. As it stands at the time of publishing I have a set of forms that do all these things. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3> method___ </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once I\'d decided I wanted to do this, I spent a lot of time researching tutorials and examples of web forms out there including validation of web forms on both the client-side and the server-side. These are some of the links I found. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Why you should be using HTML5 form validation: a tour <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html\">https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html</a> </li><li>Jorem Rapini - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution\">http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution</a> </li><li>MDN  - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li><li>Instant form validation example client side <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek\">https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek</a> </li><li>Dave Rupert - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://daverupert.com/2017/11/happier-html5-forms/\">https://daverupert.com/2017/11/happier-html5-forms/</a> </li><li>Mozilla Developer link - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Before this I had a hard time getting my head around certain truths about web forms. Let me summarise a couple.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> <strong>\"php doesn\'t stop the form from processing\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first is that PHP forms will not pause submission even if it picks up validation errors. That\'s not how it works. So in my mind I was just thinking to myself... \"then how on earth can I stop empty or duplicate forms being sent to a client\".  That was the very question that prompted me to get on to do this entire project.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to stop the form from submitting with its default behaviour, you need to use another language such as JavaScript. That\'s where it can get tricky because some users elect to switch JavaScript functionality off from their browser. So as well as client side validation, you need to take care of validation on the server side too. So I kept thinking to myself \"but that means without JavaScript I\'m back to square one\" </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>\"You should only think of client-side validation as something you use to improve/hence the user experience\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Which brings me to my second point; you should only think of JS validation as a courtesy to the user. A means to provide a good UX experience for a user filling in a form. But if JavaScript is not available PHP (or server side validation is your failsafe.  Form validation in the server side is not about pausing submission of a form when there\'s failing validation, but writing the script to perform different actions based on when data is returned. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\"managing the project in the best way.\" </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I want to discuss a little bit about how I developed the project as it got bigger and more forms were introduced. This has not been without its problems and I\'ve had to overcome some issues along the way.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Because of the way I have structured this project, by putting each form example in its own directory structure; I had to find a way of getting the base styles (that is the styles used throughout the website) to apply in each directory so that I didn\'t have to copy the sass partials over every time I wanted to make a change in one area. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To do this I made sure each directory and file structure was the same and simply imported the Sass partials using an @import directive on each equivalent partial from the base directory to that directory. I then import lime this....  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[code] </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then I am free to add more sass partials for styles that can take a new place in the cascade, rather one style constantly overriding the other.  I started out that way and it got messy very quickly causing funny things to happen in the browser.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This fix was great but it does mean of course that I have to run several different sass commands every time I make such a change but I felt that it was a better solution than trawling endlessly through files in my text editor. This way I can run the changes via the command line and let Sass do the heavy lifting. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[commands]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>In a similar way I imported php files using PHP\'s require method.  This is a good way of compartmentalising scripts so one file that would otherwise be filled with too many lines of code doesn\'t feel so big </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[code]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p> The penny dropping____ </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is only by spending the time that I have done that the penny dropped.   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Sort out the PHP validation first and then think about providing a good UX experience with JavaScript.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s only by spending the time that I have I was able to work out how to separate email functionality from the from handling part of the script and build a script that will not send an email to a server if there are errors in your form.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now that the project is out there and available to look at I will be looking to improve on it as the days and weeks come.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This will include</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Captcha functionality **to do** </li><li>+ Process a form but only if no validation errors! Do not submit if validation errors exist.  **to do** </li><li>+ html5 Input Types - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://www.w3schools.com/html/html_form_input_types.asp\">https://www.w3schools.com/html/html_form_input_types.asp</a>  </li><li>+ Styling of radio buttons and checkboxes </li><li>+ Prevent multiple form submissions </li></ul>\n<!-- /wp:list -->', 'A project with web forms', '', 'inherit', 'closed', 'closed', '', '91-revision-v1', '', '', '2019-10-03 13:31:31', '2019-10-03 12:31:31', '', 91, 'https://blog.jonniegrieve.co.uk/91-revision-v1/', 0, 'revision', '', 0),
(94, 1, '2019-10-03 13:40:59', '2019-10-03 12:40:59', '<!-- wp:paragraph -->\n<p>I\'m pleased to now show you all the latest project I\'ve been working on in the last few weeks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>link</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This one has been a long time coming. I\'ve been in the tech/web design industry for a long time.  And one of the things I\'ve struggled with the most in my journey is how to write a good form.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I mean by a good form is one that sends an email but only when all validation checks have been passed.  And not only this but how to adequately convey to a frustrated user of a form that an error has taken place and how to fix it.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using a form is fundamental to using the internet.  Pretty much everything we do on it requires us to interact with a form. So I\'m really pleased I\'ve finally set aside good time to work on this. As I write this, it still seems like a big mountain to climb but at least now I can see the summit in view.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I wanted to create a set of forms that handled email, returned values from the full range of form inputs, hidden form inputs, handles form redirects and submits data across more than one page. As it stands at the time of publishing I have a set of forms that do all these things. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3> method___ </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once I\'d decided I wanted to do this, I spent a lot of time researching tutorials and examples of web forms out there including validation of web forms on both the client-side and the server-side. These are some of the links I found. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Why you should be using HTML5 form validation: a tour <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html\">https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html</a> </li><li>Jorem Rapini - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution\">http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution</a> </li><li>MDN  - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li><li>Instant form validation example client side <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek\">https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek</a> </li><li>Dave Rupert - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://daverupert.com/2017/11/happier-html5-forms/\">https://daverupert.com/2017/11/happier-html5-forms/</a> </li><li>Mozilla Developer link - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Before this I had a hard time getting my head around certain truths about web forms. Let me summarise a couple.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> <strong>\"php doesn\'t stop the form from processing\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first is that PHP forms will not pause submission even if it picks up validation errors. That\'s not how it works. So in my mind I was just thinking to myself... \"then how on earth can I stop empty or duplicate forms being sent to a client\".  That was the very question that prompted me to get on to do this entire project.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to stop the form from submitting with its default behaviour, you need to use another language such as JavaScript. That\'s where it can get tricky because some users elect to switch JavaScript functionality off from their browser. So as well as client side validation, you need to take care of validation on the server side too. So I kept thinking to myself \"but that means without JavaScript I\'m back to square one\" </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>\"You should only think of client-side validation as something you use to improve/hence the user experience\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Which brings me to my second point; you should only think of JS validation as a courtesy to the user. A means to provide a good UX experience for a user filling in a form. But if JavaScript is not available PHP (or server side validation is your failsafe.  Form validation in the server side is not about pausing submission of a form when there\'s failing validation, but writing the script to perform different actions based on when data is returned. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\"managing the project in the best way.\" </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I want to discuss a little bit about how I developed the project as it got bigger and more forms were introduced. This has not been without its problems and I\'ve had to overcome some issues along the way.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Because of the way I have structured this project, by putting each form example in its own directory structure; I had to find a way of getting the base styles (that is the styles used throughout the website) to apply in each directory so that I didn\'t have to copy the sass partials over every time I wanted to make a change in one area. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To do this I made sure each directory and file structure was the same and simply imported the Sass partials using an @import directive on each equivalent partial from the base directory to that directory. I then import lime this....  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[code] </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then I am free to add more sass partials for styles that can take a new place in the cascade, rather one style constantly overriding the other.  I started out that way and it got messy very quickly causing funny things to happen in the browser.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This fix was great but it does mean of course that I have to run several different sass commands every time I make such a change but I felt that it was a better solution than trawling endlessly through files in my text editor. This way I can run the changes via the command line and let Sass do the heavy lifting. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[commands]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>In a similar way I imported php files using PHP\'s require method.  This is a good way of compartmentalising scripts so one file that would otherwise be filled with too many lines of code doesn\'t feel so big </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[code]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p> The penny dropping____ </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is only by spending the time that I have done that the penny dropped.   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Sort out the PHP validation first and then think about providing a good UX experience with JavaScript.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s only by spending the time that I have I was able to work out how to separate email functionality from the from handling part of the script and build a script that will not send an email to a server if there are errors in your form.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now that the project is out there and available to look at I will be looking to improve on it as the days and weeks come.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This will include</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Captcha functionality **to do** </li><li>+ Process a form but only if no validation errors! Do not submit if validation errors exist.  **to do** </li><li>+ html5 Input Types - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://www.w3schools.com/html/html_form_input_types.asp\">https://www.w3schools.com/html/html_form_input_types.asp</a>  </li><li>+ Styling of radio buttons and checkboxes </li><li>+ Prevent multiple form submissions </li></ul>\n<!-- /wp:list -->', 'A project with web forms', '', 'inherit', 'closed', 'closed', '', '91-revision-v1', '', '', '2019-10-03 13:40:59', '2019-10-03 12:40:59', '', 91, 'https://blog.jonniegrieve.co.uk/91-revision-v1/', 0, 'revision', '', 0),
(95, 1, '2019-10-03 15:23:14', '2019-10-03 14:23:14', '', 'form_project', '', 'inherit', 'open', 'closed', '', 'form_project', '', '', '2019-10-03 15:23:14', '2019-10-03 14:23:14', '', 91, 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/10/form_project.png', 0, 'attachment', 'image/png', 0),
(96, 1, '2019-10-03 15:30:08', '2019-10-03 14:30:08', '<!-- wp:paragraph -->\n<p>I\'m pleased to now show you all the latest project I\'ve been working on in the last few weeks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\"} -->\n<p style=\"text-align:center\"><a href=\"https://projects.jonniegrieve.co.uk/form_project/index/index.php\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">And here it is!</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":95} -->\n<figure class=\"wp-block-image\"><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/10/form_project-1024x1024.png\" alt=\"\" class=\"wp-image-95\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Why I\'ve done it</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This one has been a long time coming. It\'s a collection of web forms I\'ve made for various reasons and purposes. Functional forms that send data to a server and/or send emails.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\'ve been in the tech/web design industry for a long time. And one of the things I\'ve struggled with the most in my journey is how to write a good form.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I mean by a good form is one that sends an email but only when all validation checks have been passed. And not only this but how to adequately convey to a frustrated user of a form that an error has occurred and how to fix it.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using a form is fundamental to using the internet. Pretty much everything we do on it requires us to interact with a form. So I\'m really pleased I\'ve finally set aside good time to work on this. As I write this, it all still seems like a big mountain to climb but at least now I can see the summit in view.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I wanted to create a set of forms that handled email, returned values from the full range of form inputs, hidden form inputs, handles form redirects and submits data across more than one page. As it stands at the time of publishing I have a set of forms that do these things. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>How I did it</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once I\'d decided I wanted to do this, I spent a lot of time researching tutorials and examples of web forms out there including validation of web forms on both the client-side and the server-side. These are some of the links I found. They all formed the basis of my web form examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Why you should be using HTML5 form validation: a tour <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html\">https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html</a> </li><li>Jorem Rapini - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution\">http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution</a> </li><li>MDN  - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li><li>Instant form validation example client side <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek\">https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek</a> </li><li>Dave Rupert - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://daverupert.com/2017/11/happier-html5-forms/\">https://daverupert.com/2017/11/happier-html5-forms/</a> </li><li>Mozilla Developer link - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Before this, I had a hard time getting my head around certain truths about web forms. Let me summarise a couple.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> <strong>\"php doesn\'t stop the form from processing\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first is that PHP forms will not pause submission even if it picks up validation errors. That\'s not how it works. So in my mind I was just thinking to myself... \"then how on earth can I stop empty or duplicate forms being sent to a client\".  That was the very question that prompted me to get on to do this entire project.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to stop the form from submitting with its default behaviour, you need to use another language such as JavaScript. That\'s where it can get tricky because some users elect to switch JavaScript functionality off from their browser. So as well as client side validation, you need to take care of validation on the server side too. So I kept thinking to myself \"but that means without JavaScript I\'m back to square one\" </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>\"You should only think of client-side validation as something you use to improve/hence the user experience\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Which brings me to my second point; you should only think of JS validation as a courtesy to the user. A means to provide a good UX experience for a user filling in a form. But if JavaScript is not available PHP (or server side validation is your failsafe.  Form validation in the server side is not about pausing submission of a form when there\'s failing validation, but writing the script to perform different actions based on when data is returned. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\"managing the project in the best way.\" </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I want to discuss a little bit about how I developed the project as it got bigger and more forms were introduced. This has not been without its problems and I\'ve had to overcome some issues along the way.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Because of the way I have structured this project, by putting each form example in its own directory structure; I had to find a way of getting the base styles (that is the styles used throughout the website) to apply in each directory so that I didn\'t have to copy the sass partials over every time I wanted to make a change in one area. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To do this I made sure each directory and file structure was the same and simply imported the Sass partials using an @import directive on each equivalent partial from the base directory to that directory. I then import lime this....  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[code] </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then I am free to add more sass partials for styles that can take a new place in the cascade, rather one style constantly overriding the other.  I started out that way and it got messy very quickly causing funny things to happen in the browser.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This fix was great but it does mean of course that I have to run several different sass commands every time I make such a change but I felt that it was a better solution than trawling endlessly through files in my text editor. This way I can run the changes via the command line and let Sass do the heavy lifting. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[commands]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>In a similar way I imported php files using PHP\'s require method.  This is a good way of compartmentalising scripts so one file that would otherwise be filled with too many lines of code doesn\'t feel so big </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n[code]\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p> The penny dropping____ </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is only by spending the time that I have done that the penny dropped.   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Sort out the PHP validation first and then think about providing a good UX experience with JavaScript.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s only by spending the time that I have I was able to work out how to separate email functionality from the from handling part of the script and build a script that will not send an email to a server if there are errors in your form.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now that the project is out there and available to look at I will be looking to improve on it as the days and weeks come.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This will include</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Captcha functionality **to do** </li><li>+ Process a form but only if no validation errors! Do not submit if validation errors exist.  **to do** </li><li>+ html5 Input Types - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://www.w3schools.com/html/html_form_input_types.asp\">https://www.w3schools.com/html/html_form_input_types.asp</a>  </li><li>+ Styling of radio buttons and checkboxes </li><li>+ Prevent multiple form submissions </li></ul>\n<!-- /wp:list -->', 'A project with web forms', '', 'inherit', 'closed', 'closed', '', '91-revision-v1', '', '', '2019-10-03 15:30:08', '2019-10-03 14:30:08', '', 91, 'https://blog.jonniegrieve.co.uk/91-revision-v1/', 0, 'revision', '', 0),
(97, 1, '2019-10-03 15:48:16', '2019-10-03 14:48:16', '<!-- wp:paragraph -->\n<p>I\'m pleased to now show you all the latest project I\'ve been working on in the last few weeks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\"} -->\n<p style=\"text-align:center\"><a href=\"https://projects.jonniegrieve.co.uk/form_project/index/index.php\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">And here it is!</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":95} -->\n<figure class=\"wp-block-image\"><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/10/form_project-1024x1024.png\" alt=\"\" class=\"wp-image-95\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Why I\'ve done it</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This one has been a long time coming. It\'s a collection of web forms I\'ve made for various reasons and purposes. Functional forms that send data to a server and/or send emails.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\'ve been in the tech/web design industry for a long time. And one of the things I\'ve struggled with the most in my journey is how to write a good form.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I mean by a good form is one that sends an email but only when all validation checks have been passed. And not only this but how to adequately convey to a frustrated user of a form that an error has occurred and how to fix it.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using a form is fundamental to using the internet. Pretty much everything we do on it requires us to interact with a form. So I\'m really pleased I\'ve finally set aside good time to work on this. As I write this, it all still seems like a big mountain to climb but at least now I can see the summit in view.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I wanted to create a set of forms that handled email, returned values from the full range of form inputs, hidden form inputs, handles form redirects and submits data across more than one page. As it stands at the time of publishing I have a set of forms that do these things. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>How I did it</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once I\'d decided I wanted to do this, I spent a lot of time researching tutorials and examples of web forms out there including validation of web forms on both the client-side and the server-side. These are some of the links I found. They all formed the basis of my web form examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Why you should be using HTML5 form validation: a tour <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html\">https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html</a> </li><li>Jorem Rapini - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution\">http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution</a> </li><li>MDN  - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li><li>Instant form validation example client-side <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek\">https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek</a> </li><li>Dave Rupert - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://daverupert.com/2017/11/happier-html5-forms/\">https://daverupert.com/2017/11/happier-html5-forms/</a> </li><li>Mozilla Developer link - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Before this, I had a hard time getting my head around certain truths about web forms. Let me summarise a couple.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> <strong>\"php doesn\'t stop the form from processing\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first is that PHP forms will not pause submission even if it picks up validation errors. It doesn\'t work that way. So in my mind, I was just thinking to myself... \"<em>then how on earth can I stop empty or duplicate forms being sent to a client</em>\".  That was the very question that prompted me to get on to do this entire project.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to stop a form from submitting with its default behaviour, you need to use another language such as JavaScript. That\'s where it can get tricky because some users elect to switch JavaScript functionality off from their browser. So as well as client-side<em> validation, you need to take care of validation on the server-side too. So at that point,</em> you think <em>\"but that means without JavaScript I\'m back to square one\"! </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>\"You should only think of client-side validation as something you use to improve/hence the user experience\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Which brings me to my second point; you should only think of JavaScript validation as a courtesy to the user. A means to provide a good UX experience for a user filling in an online form. But if JavaScript is not available then PHP (or server-side validation) is your failsafe.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Form validation in the server-side is not about pausing submission of a form when there\'s failing validation, but writing the script to perform different actions based on when data is returned. And it is easier than I ever thought to make sure an email does not send when validation fails.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Managing the project </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I want to discuss a little bit about how I developed the project as it got bigger and more forms were introduced. This has not been without its problems and I\'ve had to overcome some issues along the way.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Because of the way I have structured this project; by putting each form example in its own directory structure; I had to find a way of getting the base styles (that is the styles that stay the same throughout the website) to apply to the pages for each form example. So that I didn\'t have to copy the SASS partials over every time I wanted to make a change.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To do this I made sure each directory and file structure was the same and simply imported the SASS partials using an @import directive on each equivalent partial from the base directory to that directory. I then import like this....  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n@import \"../../../form_project/assets/styles/common/pages/main.scss\";\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Then I am free to add more SASS partials for unique styles. Styles that won\'t be the same across plages.  This means that they\'d take a new place in the cascade, rather than one style constantly overriding the other.  I started out that way and it got messy very quickly causing funny things to happen in the browser.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This fix was great but it did mean of course that I had to run several different sass commands every time I make such a change but I felt that it was a better solution than trawling endlessly through files in my text editor. This way I can run the changes via the command line and let SASS do the heavy lifting. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\ncd ../../assets/styles\nsass --watch style.scss:style.css\ncd ../../form_handling/styles\nsass --watch style.scss:style.css\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>In a similar way, I imported PHP files using PHP\'s <em>require</em> method.  This is a good way of compartmentalising scripts so one file that would otherwise be filled with too many lines of code doesn\'t feel so big </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n<?php require \"../assets/forms/form_handling.php\"; ?>\n<!-- /wp:shortcode -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>When the penny dropped</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It is only by spending the time that I have done that the penny dropped. The best way to learn is to immerse yourself in the technology.   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s only by spending the time that I have I was able to work out how to separate email functionality from the from handling part of the script and build a script that will not send an email to a server if there are errors in your form.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So to answer the questions I raised above,  <em>Sort out the PHP validation first and then think about providing a good UX experience with JavaScrip</em>t.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now that the project is out there and available to look at I will be looking to improve on it as the days and weeks come.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This will include</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Captcha functionality </li><li>Process a form but only if no validation errors! Do not submit if validation errors exist.  </li><li>html5 Input Types - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://www.w3schools.com/html/html_form_input_types.asp\">https://www.w3schools.com/html/html_form_input_types.asp</a>  </li><li>Styling of radio buttons and checkboxes </li><li>Dismissing error notifications that appear using JavaScript/jQuery</li><li>Prevent multiple form submissions </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>And I\'m very much looking forward to doing so.</p>\n<!-- /wp:paragraph -->', 'A project with Web Forms', '', 'inherit', 'closed', 'closed', '', '91-revision-v1', '', '', '2019-10-03 15:48:16', '2019-10-03 14:48:16', '', 91, 'https://blog.jonniegrieve.co.uk/91-revision-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(98, 1, '2019-10-03 15:50:57', '2019-10-03 14:50:57', '<!-- wp:paragraph -->\n<p>I\'m pleased to now show you all the latest project I\'ve been working on in the last few weeks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\"} -->\n<p style=\"text-align:center\"><a href=\"https://projects.jonniegrieve.co.uk/form_project/index/index.php\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">And here it is!</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":95} -->\n<figure class=\"wp-block-image\"><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/10/form_project-1024x1024.png\" alt=\"\" class=\"wp-image-95\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Why I\'ve done it</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This one has been a long time coming. It\'s a collection of web forms I\'ve made for various reasons and purposes. Functional forms that send data to a server and/or send emails.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\'ve been in the tech/web design industry for a long time. And one of the things I\'ve struggled with the most in my journey is how to write a good form.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I mean by a good form is one that sends an email but only when all validation checks have been passed. And not only this but how to adequately convey to a frustrated user of a form that an error has occurred and how to fix it.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using a form is fundamental to using the internet. Pretty much everything we do on it requires us to interact with a form. So I\'m really pleased I\'ve finally set aside good time to work on this. As I write this, it all still seems like a big mountain to climb but at least now I can see the summit in view.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I wanted to create a set of forms that handled email, returned values from the full range of form inputs, hidden form inputs, handles form redirects and submits data across more than one page. As it stands at the time of publishing I have a set of forms that do these things. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>How I did it</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once I\'d decided I wanted to do this, I spent a lot of time researching tutorials and examples of web forms out there including validation of web forms on both the client-side and the server-side. These are some of the links I found. They all formed the basis of my web form examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Why you should be using HTML5 form validation: a tour <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html\">https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html</a> </li><li>Jorem Rapini - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution\">http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution</a> </li><li>MDN  - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li><li>Instant form validation example client-side <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek\">https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek</a> </li><li>Dave Rupert - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://daverupert.com/2017/11/happier-html5-forms/\">https://daverupert.com/2017/11/happier-html5-forms/</a> </li><li>Mozilla Developer link - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Before this, I had a hard time getting my head around certain truths about web forms. Let me summarise a couple.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> <strong>\"php doesn\'t stop the form from processing\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first is that PHP forms will not pause submission even if it picks up validation errors. It doesn\'t work that way. So in my mind, I was just thinking to myself... \"<em>then how on earth can I stop empty or duplicate forms being sent to a client</em>\".  That was the very question that prompted me to get on to do this entire project.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to stop a form from submitting with its default behaviour, you need to use another language such as JavaScript. That\'s where it can get tricky because some users elect to switch JavaScript functionality off from their browser. So as well as client-side<em> validation, you need to take care of validation on the server-side too. So at that point,</em> you think <em>\"but that means without JavaScript I\'m back to square one\"! </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>\"You should only think of client-side validation as something you use to improve/hence the user experience\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Which brings me to my second point; you should only think of JavaScript validation as a courtesy to the user. A means to provide a good UX experience for a user filling in an online form. But if JavaScript is not available then PHP (or server-side validation) is your failsafe.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Form validation in the server-side is not about pausing submission of a form when there\'s failing validation, but writing the script to perform different actions based on when data is returned. And it is easier than I ever thought to make sure an email does not send when validation fails.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Managing the project </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I want to discuss a little bit about how I developed the project as it got bigger and more forms were introduced. This has not been without its problems and I\'ve had to overcome some issues along the way.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Because of the way I have structured this project; by putting each form example in its own directory structure; I had to find a way of getting the base styles (that is the styles that stay the same throughout the website) to apply to the pages for each form example. So that I didn\'t have to copy the SASS partials over every time I wanted to make a change.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To do this I made sure each directory and file structure was the same and simply imported the SASS partials using an @import directive on each equivalent partial from the base directory to that directory. I then import like this....  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<p>@import \"../../../form_project/assets/styles/common/pages/main.scss\";</p>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Then I am free to add more SASS partials for unique styles. Styles that won\'t be the same across plages.  This means that they\'d take a new place in the cascade, rather than one style constantly overriding the other.  I started out that way and it got messy very quickly causing funny things to happen in the browser.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This fix was great but it did mean of course that I had to run several different sass commands every time I make such a change but I felt that it was a better solution than trawling endlessly through files in my text editor. This way I can run the changes via the command line and let SASS do the heavy lifting. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\ncd ../../assets/styles\nsass --watch style.scss:style.css\ncd ../../form_handling/styles\nsass --watch style.scss:style.css\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>In a similar way, I imported PHP files using PHP\'s <em>require</em> method.  This is a good way of compartmentalising scripts so one file that would otherwise be filled with too many lines of code doesn\'t feel so big </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n<?php require \"../assets/forms/form_handling.php\"; ?>\n<!-- /wp:shortcode -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>When the penny dropped</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It is only by spending the time that I have done that the penny dropped. The best way to learn is to immerse yourself in the technology.   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s only by spending the time that I have I was able to work out how to separate email functionality from the from handling part of the script and build a script that will not send an email to a server if there are errors in your form.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So to answer the questions I raised above,  <em>Sort out the PHP validation first and then think about providing a good UX experience with JavaScrip</em>t.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now that the project is out there and available to look at I will be looking to improve on it as the days and weeks come.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This will include</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Captcha functionality </li><li>Process a form but only if no validation errors! Do not submit if validation errors exist.  </li><li>html5 Input Types - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://www.w3schools.com/html/html_form_input_types.asp\">https://www.w3schools.com/html/html_form_input_types.asp</a>  </li><li>Styling of radio buttons and checkboxes </li><li>Dismissing error notifications that appear using JavaScript/jQuery</li><li>Prevent multiple form submissions </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>And I\'m very much looking forward to doing so.</p>\n<!-- /wp:paragraph -->', 'A project with Web Forms', '', 'inherit', 'closed', 'closed', '', '91-revision-v1', '', '', '2019-10-03 15:50:57', '2019-10-03 14:50:57', '', 91, 'https://blog.jonniegrieve.co.uk/91-revision-v1/', 0, 'revision', '', 0),
(99, 1, '2019-10-03 15:52:27', '2019-10-03 14:52:27', '<!-- wp:paragraph -->\n<p>I\'m pleased to now show you all the latest project I\'ve been working on in the last few weeks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\"} -->\n<p style=\"text-align:center\"><a href=\"https://projects.jonniegrieve.co.uk/form_project/index/index.php\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">And here it is!</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":95} -->\n<figure class=\"wp-block-image\"><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/10/form_project-1024x1024.png\" alt=\"\" class=\"wp-image-95\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Why I\'ve done it</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This one has been a long time coming. It\'s a collection of web forms I\'ve made for various reasons and purposes. Functional forms that send data to a server and/or send emails.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\'ve been in the tech/web design industry for a long time. And one of the things I\'ve struggled with the most in my journey is how to write a good form.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I mean by a good form is one that sends an email but only when all validation checks have been passed. And not only this but how to adequately convey to a frustrated user of a form that an error has occurred and how to fix it.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using a form is fundamental to using the internet. Pretty much everything we do on it requires us to interact with a form. So I\'m really pleased I\'ve finally set aside good time to work on this. As I write this, it all still seems like a big mountain to climb but at least now I can see the summit in view.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I wanted to create a set of forms that handled email, returned values from the full range of form inputs, hidden form inputs, handles form redirects and submits data across more than one page. As it stands at the time of publishing I have a set of forms that do these things. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>How I did it</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once I\'d decided I wanted to do this, I spent a lot of time researching tutorials and examples of web forms out there including validation of web forms on both the client-side and the server-side. These are some of the links I found. They all formed the basis of my web form examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Why you should be using HTML5 form validation: a tour <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html\">https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html</a> </li><li>Jorem Rapini - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution\">http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution</a> </li><li>MDN  - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li><li>Instant form validation example client-side <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek\">https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek</a> </li><li>Dave Rupert - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://daverupert.com/2017/11/happier-html5-forms/\">https://daverupert.com/2017/11/happier-html5-forms/</a> </li><li>Mozilla Developer link - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Before this, I had a hard time getting my head around certain truths about web forms. Let me summarise a couple.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> <strong>\"php doesn\'t stop the form from processing\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first is that PHP forms will not pause submission even if it picks up validation errors. It doesn\'t work that way. So in my mind, I was just thinking to myself... \"<em>then how on earth can I stop empty or duplicate forms being sent to a client</em>\".  That was the very question that prompted me to get on to do this entire project.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to stop a form from submitting with its default behaviour, you need to use another language such as JavaScript. That\'s where it can get tricky because some users elect to switch JavaScript functionality off from their browser. So as well as client-side<em> validation, you need to take care of validation on the server-side too. So at that point,</em> you think <em>\"but that means without JavaScript I\'m back to square one\"! </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>\"You should only think of client-side validation as something you use to improve/hence the user experience\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Which brings me to my second point; you should only think of JavaScript validation as a courtesy to the user. A means to provide a good UX experience for a user filling in an online form. But if JavaScript is not available then PHP (or server-side validation) is your failsafe.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Form validation in the server-side is not about pausing submission of a form when there\'s failing validation, but writing the script to perform different actions based on when data is returned. And it is easier than I ever thought to make sure an email does not send when validation fails.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Managing the project </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I want to discuss a little bit about how I developed the project as it got bigger and more forms were introduced. This has not been without its problems and I\'ve had to overcome some issues along the way.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Because of the way I have structured this project; by putting each form example in its own directory structure; I had to find a way of getting the base styles (that is the styles that stay the same throughout the website) to apply to the pages for each form example. So that I didn\'t have to copy the SASS partials over every time I wanted to make a change.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To do this I made sure each directory and file structure was the same and simply imported the SASS partials using an @import directive on each equivalent partial from the base directory to that directory. I then import like this....  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<p>@import \"../../../form_project/assets/styles/common/pages/main.scss\";</p>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Then I am free to add more SASS partials for unique styles. Styles that won\'t be the same across plages.  This means that they\'d take a new place in the cascade, rather than one style constantly overriding the other.  I started out that way and it got messy very quickly causing funny things to happen in the browser.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This fix was great but it did mean of course that I had to run several different sass commands every time I make such a change but I felt that it was a better solution than trawling endlessly through files in my text editor. This way I can run the changes via the command line and let SASS do the heavy lifting. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\ncd ../../assets/styles\nsass --watch style.scss:style.css\ncd ../../form_handling/styles\nsass --watch style.scss:style.css\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>In a similar way, I imported PHP files using PHP\'s <em>require</em> method.  This is a good way of compartmentalising scripts so one file that would otherwise be filled with too many lines of code doesn\'t feel so big </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n\"<?php require \"../assets/forms/form_handling.php\"; ?>\"\n<!-- /wp:shortcode -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>When the penny dropped</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It is only by spending the time that I have done that the penny dropped. The best way to learn is to immerse yourself in the technology.   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s only by spending the time that I have I was able to work out how to separate email functionality from the from handling part of the script and build a script that will not send an email to a server if there are errors in your form.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So to answer the questions I raised above,  <em>Sort out the PHP validation first and then think about providing a good UX experience with JavaScrip</em>t.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now that the project is out there and available to look at I will be looking to improve on it as the days and weeks come.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This will include</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Captcha functionality </li><li>Process a form but only if no validation errors! Do not submit if validation errors exist.  </li><li>html5 Input Types - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://www.w3schools.com/html/html_form_input_types.asp\">https://www.w3schools.com/html/html_form_input_types.asp</a>  </li><li>Styling of radio buttons and checkboxes </li><li>Dismissing error notifications that appear using JavaScript/jQuery</li><li>Prevent multiple form submissions </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>And I\'m very much looking forward to doing so.</p>\n<!-- /wp:paragraph -->', 'A project with Web Forms', '', 'inherit', 'closed', 'closed', '', '91-revision-v1', '', '', '2019-10-03 15:52:27', '2019-10-03 14:52:27', '', 91, 'https://blog.jonniegrieve.co.uk/91-revision-v1/', 0, 'revision', '', 0),
(100, 1, '2019-10-03 15:54:02', '2019-10-03 14:54:02', '<!-- wp:paragraph -->\n<p>I\'m pleased to now show you all the latest project I\'ve been working on in the last few weeks.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\"} -->\n<p style=\"text-align:center\"><a href=\"https://projects.jonniegrieve.co.uk/form_project/index/index.php\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">And here it is!</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":95} -->\n<figure class=\"wp-block-image\"><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/10/form_project-1024x1024.png\" alt=\"\" class=\"wp-image-95\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Why I\'ve done it</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This one has been a long time coming. It\'s a collection of web forms I\'ve made for various reasons and purposes. Functional forms that send data to a server and/or send emails.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\'ve been in the tech/web design industry for a long time. And one of the things I\'ve struggled with the most in my journey is how to write a good form.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I mean by a good form is one that sends an email but only when all validation checks have been passed. And not only this but how to adequately convey to a frustrated user of a form that an error has occurred and how to fix it.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using a form is fundamental to using the internet. Pretty much everything we do on it requires us to interact with a form. So I\'m really pleased I\'ve finally set aside good time to work on this. As I write this, it all still seems like a big mountain to climb but at least now I can see the summit in view.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I wanted to create a set of forms that handled email, returned values from the full range of form inputs, hidden form inputs, handles form redirects and submits data across more than one page. As it stands at the time of publishing I have a set of forms that do these things. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>How I did it</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once I\'d decided I wanted to do this, I spent a lot of time researching tutorials and examples of web forms out there including validation of web forms on both the client-side and the server-side. These are some of the links I found. They all formed the basis of my web form examples.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Why you should be using HTML5 form validation: a tour <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html\">https://pageclip.co/blog/2018-02-20-you-should-use-html5-form-validation.html</a> </li><li>Jorem Rapini - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution\">http://jorenrapini.com/blog/javascript/the-simple-quick-and-small-jquery-html-form-validation-solution</a> </li><li>MDN  - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li><li>Instant form validation example client-side <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek\">https://dev.to/snowleo208/how-to-create-your-instant-form-validation-39ek</a> </li><li>Dave Rupert - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://daverupert.com/2017/11/happier-html5-forms/\">https://daverupert.com/2017/11/happier-html5-forms/</a> </li><li>Mozilla Developer link - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple\">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validation_constraints_on_input_elements_%E2%80%94_starting_simple</a> </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Before this, I had a hard time getting my head around certain truths about web forms. Let me summarise a couple.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> <strong>\"php doesn\'t stop the form from processing\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first is that PHP forms will not pause submission even if it picks up validation errors. It doesn\'t work that way. So in my mind, I was just thinking to myself... \"<em>then how on earth can I stop empty or duplicate forms being sent to a client</em>\".  That was the very question that prompted me to get on to do this entire project.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to stop a form from submitting with its default behaviour, you need to use another language such as JavaScript. That\'s where it can get tricky because some users elect to switch JavaScript functionality off from their browser. So as well as client-side<em> validation, you need to take care of validation on the server-side too. So at that point,</em> you think <em>\"but that means without JavaScript I\'m back to square one\"! </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>\"You should only think of client-side validation as something you use to improve/hence the user experience\"</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Which brings me to my second point; you should only think of JavaScript validation as a courtesy to the user. A means to provide a good UX experience for a user filling in an online form. But if JavaScript is not available then PHP (or server-side validation) is your failsafe.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Form validation in the server-side is not about pausing submission of a form when there\'s failing validation, but writing the script to perform different actions based on when data is returned. And it is easier than I ever thought to make sure an email does not send when validation fails.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Managing the project </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I want to discuss a little bit about how I developed the project as it got bigger and more forms were introduced. This has not been without its problems and I\'ve had to overcome some issues along the way.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Because of the way I have structured this project; by putting each form example in its own directory structure; I had to find a way of getting the base styles (that is the styles that stay the same throughout the website) to apply to the pages for each form example. So that I didn\'t have to copy the SASS partials over every time I wanted to make a change.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To do this I made sure each directory and file structure was the same and simply imported the SASS partials using an @import directive on each equivalent partial from the base directory to that directory. I then import like this....  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<p>@import \"../../../form_project/assets/styles/common/pages/main.scss\";</p>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Then I am free to add more SASS partials for unique styles. Styles that won\'t be the same across plages.  This means that they\'d take a new place in the cascade, rather than one style constantly overriding the other.  I started out that way and it got messy very quickly causing funny things to happen in the browser.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This fix was great but it did mean of course that I had to run several different sass commands every time I make such a change but I felt that it was a better solution than trawling endlessly through files in my text editor. This way I can run the changes via the command line and let SASS do the heavy lifting. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\ncd ../../assets/styles\nsass --watch style.scss:style.css\ncd ../../form_handling/styles\nsass --watch style.scss:style.css\n<!-- /wp:shortcode -->\n\n<!-- wp:paragraph -->\n<p>In a similar way, I imported PHP files using PHP\'s <em>require</em> method.  This is a good way of compartmentalising scripts so one file that would otherwise be filled with too many lines of code doesn\'t feel so big </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:shortcode -->\n< ?php require \"../assets/forms/form_handling.php\"; ? >\n<!-- /wp:shortcode -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>When the penny dropped</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It is only by spending the time that I have done that the penny dropped. The best way to learn is to immerse yourself in the technology.   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s only by spending the time that I have I was able to work out how to separate email functionality from the from handling part of the script and build a script that will not send an email to a server if there are errors in your form.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So to answer the questions I raised above,  <em>Sort out the PHP validation first and then think about providing a good UX experience with JavaScrip</em>t.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now that the project is out there and available to look at I will be looking to improve on it as the days and weeks come.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This will include</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Captcha functionality </li><li>Process a form but only if no validation errors! Do not submit if validation errors exist.  </li><li>html5 Input Types - <a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://www.w3schools.com/html/html_form_input_types.asp\">https://www.w3schools.com/html/html_form_input_types.asp</a>  </li><li>Styling of radio buttons and checkboxes </li><li>Dismissing error notifications that appear using JavaScript/jQuery</li><li>Prevent multiple form submissions </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>And I\'m very much looking forward to doing so.</p>\n<!-- /wp:paragraph -->', 'A project with Web Forms', '', 'inherit', 'closed', 'closed', '', '91-revision-v1', '', '', '2019-10-03 15:54:02', '2019-10-03 14:54:02', '', 91, 'https://blog.jonniegrieve.co.uk/91-revision-v1/', 0, 'revision', '', 0),
(102, 1, '2019-11-13 12:00:32', '2019-11-13 12:00:32', '<!-- wp:paragraph -->\n<p>Over the last few weeks, I have spent some time learning about how to improve my <a href=\"https://www.jonniegrieve.co.uk\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"website\'s front end performance (opens in a new tab)\">website\'s front end performance</a> i.e. the speed in which all assets load in an effort to retain visitors and hopefully even improve my search ranking.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This involves looking at the number of requests I\'m making\nto my server, how my images and web files are optimised, how I can make savings\nand even how the code is rendered.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the start of this process, I had a look at the figures via <strong>ChromeDev</strong> Tools. They tally up the resources, HTTP Requests and bandwidth used and this is the crux of where I started out with.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>38 requests -&nbsp; 134 KB transferred&nbsp; - 2.2 MB resources - Finish: 1.67 </strong></p><cite>first check</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>It\'s worth pointing out at this point that some of these numbers are network dependent and some are finite.&nbsp;It shows that as of a few weeks ago (October 2019), I was serving up to <strong>2.2MB</strong> of data, only <strong>134kb</strong> of which I was actually choosing to render in the HTML. So not exactly the most bandwidth straining of websites, but this is deliberately so. And it\'s not necessarily the case that this means a 100% speedy experience but again that depends on what your network speed is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally, after a brief check, there did not appear to be any unused assets so no HTTP 404 errors were returned and no wasted resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Optimising images </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Most of the 2.2mb total consists of images that were simply not optimised. Indeed the design includes a main background image that is fixed on scroll that I edited a little bit on Photoshop and exported as an image file with barely a second thought to optimisation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\'s look at the main background image as an example.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>interior-darker.png&nbsp; - 1,739.kb<br> img/ios-bg.png&nbsp;&nbsp; - 14kb</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>So those background images on their own represented the vast majority of the resources I was using.&nbsp; So what could be done to reduce that load?&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I went back into Photoshop and opened the image up and exported the file using \"save for web\". Using this, I saved a copy of the image with a 60% quality level with progressive download style and this time I saved it as a jpeg.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4,323,001 bytes reduced to 473,322kb&nbsp; (a saving of 3,849,679 bytes) 4,323,001&nbsp; - 3,849,679 is an <strong>89.05%</strong> saving&nbsp;&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An 89% saving just on the background image served alone.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>35 requests&nbsp; 129 KB transferred&nbsp; 2.1 MB resources&nbsp; Finish: 2.01 s&nbsp;&nbsp;&nbsp; </strong></p><cite>The latest savings</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading -->\n<h2>SVG Sprite Maps</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The \"Service\" section images on my <a rel=\"noreferrer noopener\" aria-label=\"website (opens in a new tab)\" href=\"https://www.jonniegrieve.co.uk\" target=\"_blank\">website</a> are served via a font <strong>Content Delivery Network (CDN)</strong>. So these are not images that could have been easily targeted to reduce resources. I wanted to see if there was a way to serve some of my service icons the same sprite map but these are fonts rather than SVG\'s but that\'s not the case.&nbsp; I was, however, able to use SVG for social media icons. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using this method I created a sprite map of several\ncontained SVG’s in one resource so only one HTTP Request was taken up.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>31 requests&nbsp; 156 KB transferred&nbsp; 1.1 MB resources Finish: 1.51 s&nbsp; Load: 1.52 s</strong></p><cite>Performance Savings: Round 3</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Having looked at my main background images and social media\nicons I then turned my attention to the rest of the images and how they could\nbe optimised. Most of my images are stored in directories according to their\nintended use.&nbsp; As I began the process,\nthis is the total size of each directory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Featured directory:&nbsp; 2.4mb<br>Services directory:&nbsp; 200kb</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These were all <strong>.PNG</strong> files. I switched the majority of PNG\'s now from PNG to JPG using the same export settings for the main background image (60% quality compared to the PNG\'S and progressive download). &nbsp;The result of this was that resources and transfers now <strong>total less than 1mb</strong>.&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Featured directory: 992 KB (1,015,808 bytes)<br>Services Directory:&nbsp; 135kb</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>31 requests 754 KB transferred&nbsp; 993 KB resources&nbsp; Finish: 2.39 s&nbsp; Load: 1.77 s</strong></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>So, for the first time the resources show up as taking less than a 1mb in served resources. Great!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There is a video asset in this website. Videos typically take up more bandwidth than image files whether they are served by an external CDN or not. I made the decision to stick to an HTML5 video tag rather than embedding a YouTube link. I may investigate further but for now, the video takes up the bandwidth.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Minifying the JavaScript and CSS </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Minifying files is the process of reducing the file size of CSS and JS assets by stripping out comments and any spaces in the code. Typically this is done using a build tool which can add to the website payload, but since this is only a small website, I opted to use online tools to minify my files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Minifying files like this saved me a further <strong>6kb</strong> which is a minimal benefit in this case but I felt it only right to do it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>34 requests 739 KB transferred 859 KB resources Finish: 4.25 s Load: 3.71 s</strong></p><cite>Last check.  - remember some of these results are network dependent</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading -->\n<h2>Resizes and Compressed Images</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The last thing I want to talk about is the process of image display resolution.&nbsp;Display resolution refers to how devices display images in their browsers.  Correctly sizing and compressing images can help save a little space but is also an important consideration for retina display devices.&nbsp; Delivering images that are appropriately compressed and sized to their container will reduce file sizes, otherwise, it is wasted bandwidth.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The theory is that by halving the size of the image when you export the file reduces the number of pixels that need to be displayed by the time it is shown in the browser.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So when you start exporting in your image editor: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li> 1024 by 768 becomes </li><li> 532 by 399&nbsp;&nbsp; (twice the resolution) </li><li> 266 by 200 pixels </li><li> Natural 532 by 399  </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>So the pixels rendered should be showing reduced compared to natural/intrinsic value. But as of the day of posting this blog, this is not happening for me.&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I\'m going to look at this further but for now I\'m happy with the performance savings I have so far made.&nbsp; I’ve reduced the bandwidth by more than half and significantly increased my website speed.&nbsp; I’ve learned a lot during this process and the techniques I\'ve learned in this blog are standard I intend to follow going forward. </p>\n<!-- /wp:paragraph -->', 'A Learning Process: Front End Performance Optimisation', '', 'publish', 'open', 'open', '', 'a-learning-process-front-end-performance-optimisation', '', '', '2019-11-13 12:03:31', '2019-11-13 12:03:31', '', 0, 'https://blog.jonniegrieve.co.uk/?p=102', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(103, 1, '2019-11-13 11:34:56', '2019-11-13 11:34:56', '<!-- wp:paragraph -->\n<p>Over the last few weeks, I have spent some time learning about how to improve my website\'s front end performance i.e. the speed in which all assets load in an effort to retain visitors and hopefully even improve my search ranking.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This involves looking at the number of requests I\'m making\nto my server, how my images and web files are optimised, how I can make savings\nand even how the code is rendered.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the start of this process, I had a look at the figures via <strong>ChromeDev</strong> Tools. They tally up the resource, HTTP Requests and bandwidth used and this is the crux of where I started out with.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>38 requests -  134 KB transferred  - 2.2 MB resources - Finish: 1.67 </strong></p><cite>first check</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>It\'s worth pointing out at this point that some of these numbers are network dependent and some are finite. It shows that as of a few weeks ago (October 2019), I was serving up to <strong>2.2MB</strong> of data, only 134kb of which I was actually choosing to render in the HTML. So not exactly the most bandwidth straining of websites, but this is deliberately so.  And it\'s not necessarily the case that this means a 100% speedy experience but again depending on what your network speed is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally, after a brief check, there did not appear to be any\nunused assets so no http 404 errors were returned.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>Optimising images </h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Most of the 2.2mb consist of images that were simply not\noptimised. Indeed the design includes a main background image that is fixed on\nscroll that I edited a little bit on Photoshop and exported as an image file\nwith barely a second thought to optimisation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\'s look at the main background image as an example.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>interior-darker.png&nbsp; -\n1,739.kb<br>\nimg/ios-bg.png&nbsp;&nbsp; - 14kb</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So those background images on their own represented the vast\nmajority of the resources I was using.&nbsp;\nSo what could be done to reduce that load?&nbsp; I went back into Photoshop and opened the\nimage up and exported the file using \"save for web\". Using this I\nsaved a copy of the image with a 60% quality level with progressive download\nstyle and this time I saved it as a jpeg.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4,323,001 bytes reduced to 473,322kb&nbsp; (a saving of 3,849,679 bytes)<br>\n4,323,001&nbsp; - 3,849,679<br>\n89.05% saving&nbsp;&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>35 requests&nbsp; 129 KB transferred&nbsp; 2.1 MB resources&nbsp; Finish: 2.01 s&nbsp;&nbsp;&nbsp; </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The \"Service\" section images on my website are\nserved via a font Content Delivery Network (CDN). So these are not images that\ncould have been easily targeted to reduce resources. I wanted to see if there\nwas a way to serve some of my service icons the same sprite map but these are\nfonts rather than SVG\'s but that\'s not the case.&nbsp; I was however able to use SVG for the social\nmedia icons. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using this method I created a sprite map of several\ncontained SVG’s in one resource so only one HTTP Request was taken up.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>31 requests&nbsp; 156 KB transferred&nbsp; 1.1 MB resources Finish: 1.51 s&nbsp; Load: 1.52 s</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Having looked at my main background images and social media\nicons I then turned my attention to the rest of the images and how they could\nbe optimised. Most of my images are stored in directories according to their\nintended use.&nbsp; As I began the process,\nthis is the total size of each directory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Featured directory:&nbsp;\n2.4mb<br>\nServices directory:&nbsp; 200kb</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These were all png files. I switched the majority of PNG\'s\nnow from PNG to JPG using the same export settings for the main background\nimage (60% quality compared to the PNG\'S and progressive download). &nbsp;The result of this was that resources and\ntransfers now total less than 1mb.&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Featured directory: 992 KB (1,015,808 bytes)<br>\nServices Directory:&nbsp; 135kb</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>35 requests 754 KB\ntransferred&nbsp; 993 KB resources&nbsp; Finish: 2.39 s&nbsp; Load: 1.77 s</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now for the first time the resources show up as taking less\nthan a 1mb in served resources. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There is a video asset in this website. Videos typically\ntake up more bandwidth than image files wetther they are served by an external\nCDN or not. . I made the decision to stick to html5 video tag rather than\nembedding a &nbsp;youtube link. I may\ninvestigate further but for now the video takes up the bandwidth.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>minifying the js and css </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Minifying files is the process of reducing the file size of\nCSS and JS assets by stripping out comments and any spaces in the code. Typically\nthis is done using a build tool which can add to the website payload, but since\nthis is olty a small website, I opted to use online tools to minify my files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>files saves a further 6kb which is a minimal benefit but I\nfelt it only right to do it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>34 requests 739 KB\ntransferred 859 KB resources Finish: 4.25 s Load: 3.71 s</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Resizes and Compressed Images</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The last thing I want to talk about is the process of image\nresolution.&nbsp; This can help save a little\nspace but is also helpful for retina display devices.&nbsp; Delivering images that are appropriately\ncompressed and sized to their container will reduce file sizes, otherwise it is\nwasted bandwidth so compressing and resizing is an attempt to reduce this\nwaste. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The theory is that by halving the size of the image when you\nexport the file</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1024 by 768 becomes</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>532 by 399&nbsp;&nbsp; (twice\nthe resolution)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>266 by 200 pixels</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Natural 532 by 399</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So the pixels rendered should be showing reduced compared to\nnatural/intrinsic value. But at the moment, this is not happening.&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I\'m going to look at this further but for now I\'m happy\nwith the performance savings I have so far made.&nbsp; I’ve reduced the bandwidth by more than half\nand significantly increased my website speed.&nbsp;\nI’ve learned a lot during this process and is the standard I intend to follow\ngoing forward. </p>\n<!-- /wp:paragraph -->', 'Blog:  Front End performance optimisation', '', 'inherit', 'closed', 'closed', '', '102-revision-v1', '', '', '2019-11-13 11:34:56', '2019-11-13 11:34:56', '', 102, 'https://blog.jonniegrieve.co.uk/102-revision-v1/', 0, 'revision', '', 0),
(104, 1, '2019-11-13 11:38:52', '2019-11-13 11:38:52', '<!-- wp:paragraph -->\n<p>Over the last few weeks, I have spent some time learning about how to improve my website\'s front end performance i.e. the speed in which all assets load in an effort to retain visitors and hopefully even improve my search ranking.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This involves looking at the number of requests I\'m making\nto my server, how my images and web files are optimised, how I can make savings\nand even how the code is rendered.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the start of this process, I had a look at the figures via <strong>ChromeDev</strong> Tools. They tally up the resources, HTTP Requests and bandwidth used and this is the crux of where I started out with.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>38 requests -  134 KB transferred  - 2.2 MB resources - Finish: 1.67 </strong></p><cite>first check</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>It\'s worth pointing out at this point that some of these numbers are network dependent and some are finite. It shows that as of a few weeks ago (October 2019), I was serving up to <strong>2.2MB</strong> of data, only <strong>134kb</strong> of which I was actually choosing to render in the HTML. So not exactly the most bandwidth straining of websites, but this is deliberately so.  And it\'s not necessarily the case that this means a 100% speedy experience but again that depends on what your network speed is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally, after a brief check, there did not appear to be any unused assets so no http 404 errors were returned and no wasted resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Optimising images </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Most of the 2.2mb consist of images that were simply not\noptimised. Indeed the design includes a main background image that is fixed on\nscroll that I edited a little bit on Photoshop and exported as an image file\nwith barely a second thought to optimisation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\'s look at the main background image as an example.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>interior-darker.png  - 1,739.kb<br> img/ios-bg.png   - 14kb</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>So those background images on their own represented the vast majority of the resources I was using.  So what could be done to reduce that load?  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I went back into Photoshop and opened the image up and exported the file using \"save for web\". Using this, I saved a copy of the image with a 60% quality level with progressive download style and this time I saved it as a jpeg.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4,323,001 bytes reduced to 473,322kb  (a saving of 3,849,679 bytes)<br> 4,323,001  - 3,849,679 is an <strong>89.05%</strong> saving   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An 89% saving just on the background image served alone.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>35 requests  129 KB transferred  2.1 MB resources  Finish: 2.01 s    </strong></p><cite>The latest savings</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>The \"Service\" section images on my <a rel=\"noreferrer noopener\" aria-label=\"website (opens in a new tab)\" href=\"https://www.jonniegrieve.co.uk\" target=\"_blank\">website</a> are served via a font <strong>Content Delivery Network (CDN)</strong>. So these are not images that could have been easily targeted to reduce resources. I wanted to see if there was a way to serve some of my service icons the same sprite map but these are fonts rather than SVG\'s but that\'s not the case.  I was however able to use SVG for the social media icons. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using this method I created a sprite map of several\ncontained SVG’s in one resource so only one HTTP Request was taken up.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>31 requests&nbsp; 156 KB transferred&nbsp; 1.1 MB resources Finish: 1.51 s&nbsp; Load: 1.52 s</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Having looked at my main background images and social media\nicons I then turned my attention to the rest of the images and how they could\nbe optimised. Most of my images are stored in directories according to their\nintended use.&nbsp; As I began the process,\nthis is the total size of each directory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Featured directory:&nbsp;\n2.4mb<br>\nServices directory:&nbsp; 200kb</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These were all png files. I switched the majority of PNG\'s\nnow from PNG to JPG using the same export settings for the main background\nimage (60% quality compared to the PNG\'S and progressive download). &nbsp;The result of this was that resources and\ntransfers now total less than 1mb.&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Featured directory: 992 KB (1,015,808 bytes)<br>\nServices Directory:&nbsp; 135kb</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>35 requests 754 KB\ntransferred&nbsp; 993 KB resources&nbsp; Finish: 2.39 s&nbsp; Load: 1.77 s</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now for the first time the resources show up as taking less\nthan a 1mb in served resources. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There is a video asset in this website. Videos typically\ntake up more bandwidth than image files wetther they are served by an external\nCDN or not. . I made the decision to stick to html5 video tag rather than\nembedding a &nbsp;youtube link. I may\ninvestigate further but for now the video takes up the bandwidth.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>minifying the js and css </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Minifying files is the process of reducing the file size of\nCSS and JS assets by stripping out comments and any spaces in the code. Typically\nthis is done using a build tool which can add to the website payload, but since\nthis is olty a small website, I opted to use online tools to minify my files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>files saves a further 6kb which is a minimal benefit but I\nfelt it only right to do it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>34 requests 739 KB\ntransferred 859 KB resources Finish: 4.25 s Load: 3.71 s</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Resizes and Compressed Images</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The last thing I want to talk about is the process of image\nresolution.&nbsp; This can help save a little\nspace but is also helpful for retina display devices.&nbsp; Delivering images that are appropriately\ncompressed and sized to their container will reduce file sizes, otherwise it is\nwasted bandwidth so compressing and resizing is an attempt to reduce this\nwaste. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The theory is that by halving the size of the image when you\nexport the file</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1024 by 768 becomes</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>532 by 399&nbsp;&nbsp; (twice\nthe resolution)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>266 by 200 pixels</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Natural 532 by 399</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So the pixels rendered should be showing reduced compared to\nnatural/intrinsic value. But at the moment, this is not happening.&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I\'m going to look at this further but for now I\'m happy\nwith the performance savings I have so far made.&nbsp; I’ve reduced the bandwidth by more than half\nand significantly increased my website speed.&nbsp;\nI’ve learned a lot during this process and is the standard I intend to follow\ngoing forward. </p>\n<!-- /wp:paragraph -->', 'Blog:  Front End performance optimisation', '', 'inherit', 'closed', 'closed', '', '102-revision-v1', '', '', '2019-11-13 11:38:52', '2019-11-13 11:38:52', '', 102, 'https://blog.jonniegrieve.co.uk/102-revision-v1/', 0, 'revision', '', 0),
(105, 1, '2019-11-13 11:52:47', '2019-11-13 11:52:47', '<!-- wp:paragraph -->\n<p>Over the last few weeks, I have spent some time learning about how to improve my website\'s front end performance i.e. the speed in which all assets load in an effort to retain visitors and hopefully even improve my search ranking.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This involves looking at the number of requests I\'m making\nto my server, how my images and web files are optimised, how I can make savings\nand even how the code is rendered.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the start of this process, I had a look at the figures via <strong>ChromeDev</strong> Tools. They tally up the resources, HTTP Requests and bandwidth used and this is the crux of where I started out with.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>38 requests -  134 KB transferred  - 2.2 MB resources - Finish: 1.67 </strong></p><cite>first check</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>It\'s worth pointing out at this point that some of these numbers are network dependent and some are finite. It shows that as of a few weeks ago (October 2019), I was serving up to <strong>2.2MB</strong> of data, only <strong>134kb</strong> of which I was actually choosing to render in the HTML. So not exactly the most bandwidth straining of websites, but this is deliberately so.  And it\'s not necessarily the case that this means a 100% speedy experience but again that depends on what your network speed is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally, after a brief check, there did not appear to be any unused assets so no http 404 errors were returned and no wasted resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Optimising images </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Most of the 2.2mb consist of images that were simply not\noptimised. Indeed the design includes a main background image that is fixed on\nscroll that I edited a little bit on Photoshop and exported as an image file\nwith barely a second thought to optimisation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\'s look at the main background image as an example.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>interior-darker.png  - 1,739.kb<br> img/ios-bg.png   - 14kb</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>So those background images on their own represented the vast majority of the resources I was using.  So what could be done to reduce that load?  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I went back into Photoshop and opened the image up and exported the file using \"save for web\". Using this, I saved a copy of the image with a 60% quality level with progressive download style and this time I saved it as a jpeg.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4,323,001 bytes reduced to 473,322kb  (a saving of 3,849,679 bytes)<br> 4,323,001  - 3,849,679 is an <strong>89.05%</strong> saving   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An 89% saving just on the background image served alone.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>35 requests  129 KB transferred  2.1 MB resources  Finish: 2.01 s    </strong></p><cite>The latest savings</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading -->\n<h2>SVG Sprite Maps</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The \"Service\" section images on my <a rel=\"noreferrer noopener\" aria-label=\"website (opens in a new tab)\" href=\"https://www.jonniegrieve.co.uk\" target=\"_blank\">website</a> are served via a font <strong>Content Delivery Network (CDN)</strong>. So these are not images that could have been easily targeted to reduce resources. I wanted to see if there was a way to serve some of my service icons the same sprite map but these are fonts rather than SVG\'s but that\'s not the case.  I was, however, able to use SVG for social media icons. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using this method I created a sprite map of several\ncontained SVG’s in one resource so only one HTTP Request was taken up.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>31 requests  156 KB transferred  1.1 MB resources Finish: 1.51 s  Load: 1.52 s</strong></p><cite>Performance Savings: Round 3</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Having looked at my main background images and social media\nicons I then turned my attention to the rest of the images and how they could\nbe optimised. Most of my images are stored in directories according to their\nintended use.&nbsp; As I began the process,\nthis is the total size of each directory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Featured directory:  2.4mb<br>Services directory:  200kb</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These were all <strong>.PNG</strong> files. I switched the majority of PNG\'s now from PNG to JPG using the same export settings for the main background image (60% quality compared to the PNG\'S and progressive download).  The result of this was that resources and transfers now <strong>total less than 1mb</strong>.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Featured directory: 992 KB (1,015,808 bytes)<br>Services Directory:  135kb</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>31 requests 754 KB transferred  993 KB resources  Finish: 2.39 s  Load: 1.77 s</strong></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>So, for the first time the resources show up as taking less than a 1mb in served resources. Great!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There is a video asset in this website. Videos typically take up more bandwidth than image files whether they are served by an external CDN or not. I made the decision to stick to a HTML5 video tag rather than embedding a YouTube link. I may investigate further but for now the video takes up the bandwidth.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Minifying the JavaScript and CSS </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Minifying files is the process of reducing the file size of CSS and JS assets by stripping out comments and any spaces in the code. Typically this is done using a build tool which can add to the website payload, but since this is only a small website, I opted to use online tools to minify my files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Minifying files like this saved me a further <strong>6kb</strong> which is a minimal benefit in this case but I felt it only right to do it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>34 requests 739 KB transferred 859 KB resources Finish: 4.25 s Load: 3.71 s</strong></p><cite>Last check.  - remember some of these results are network dependent</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading -->\n<h2>Resizes and Compressed Images</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The last thing I want to talk about is the process of image display resolution. Display resolution refers to how devices display images in their browsers.  Correctly sizing and compressing images can help save a little space but is also an important consideration for retina display devices.  Delivering images that are appropriately compressed and sized to their container will reduce file sizes, otherwise, it is wasted bandwidth.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The theory is that by halving the size of the image when you export the file reduces the number of pixels that need to be displayed by the time it is shown in the browser.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So when you start exporting in your image editor: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li> 1024 by 768 becomes </li><li> 532 by 399   (twice the resolution) </li><li> 266 by 200 pixels </li><li> Natural 532 by 399  </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>So the pixels rendered should be showing reduced compared to natural/intrinsic value. But as of the day of posting this blog, this is not happening for me.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I\'m going to look at this further but for now I\'m happy with the performance savings I have so far made.  I’ve reduced the bandwidth by more than half and significantly increased my website speed.  I’ve learned a lot during this process and the techniques I\'ve learned in this blog are standard I intend to follow going forward. </p>\n<!-- /wp:paragraph -->', 'A Learning Process: Front End Performance Optimisation', '', 'inherit', 'closed', 'closed', '', '102-revision-v1', '', '', '2019-11-13 11:52:47', '2019-11-13 11:52:47', '', 102, 'https://blog.jonniegrieve.co.uk/102-revision-v1/', 0, 'revision', '', 0),
(106, 1, '2019-11-13 11:53:53', '2019-11-13 11:53:53', '<!-- wp:paragraph -->\n<p>Over the last few weeks, I have spent some time learning about how to improve my website\'s front end performance i.e. the speed in which all assets load in an effort to retain visitors and hopefully even improve my search ranking.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This involves looking at the number of requests I\'m making\nto my server, how my images and web files are optimised, how I can make savings\nand even how the code is rendered.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the start of this process, I had a look at the figures via <strong>ChromeDev</strong> Tools. They tally up the resources, HTTP Requests and bandwidth used and this is the crux of where I started out with.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>38 requests -  134 KB transferred  - 2.2 MB resources - Finish: 1.67 </strong></p><cite>first check</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>It\'s worth pointing out at this point that some of these numbers are network dependent and some are finite. It shows that as of a few weeks ago (October 2019), I was serving up to <strong>2.2MB</strong> of data, only <strong>134kb</strong> of which I was actually choosing to render in the HTML. So not exactly the most bandwidth straining of websites, but this is deliberately so.  And it\'s not necessarily the case that this means a 100% speedy experience but again that depends on what your network speed is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally, after a brief check, there did not appear to be any unused assets so no HTTP 404 errors were returned and no wasted resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Optimising images </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Most of the 2.2mb total consists of images that were simply not optimised. Indeed the design includes a main background image that is fixed on scroll that I edited a little bit on Photoshop and exported as an image file with barely a second thought to optimisation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\'s look at the main background image as an example.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>interior-darker.png  - 1,739.kb<br> img/ios-bg.png   - 14kb</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>So those background images on their own represented the vast majority of the resources I was using.  So what could be done to reduce that load?  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I went back into Photoshop and opened the image up and exported the file using \"save for web\". Using this, I saved a copy of the image with a 60% quality level with progressive download style and this time I saved it as a jpeg.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4,323,001 bytes reduced to 473,322kb  (a saving of 3,849,679 bytes)<br> 4,323,001  - 3,849,679 is an <strong>89.05%</strong> saving   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An 89% saving just on the background image served alone.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>35 requests  129 KB transferred  2.1 MB resources  Finish: 2.01 s    </strong></p><cite>The latest savings</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading -->\n<h2>SVG Sprite Maps</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The \"Service\" section images on my <a rel=\"noreferrer noopener\" aria-label=\"website (opens in a new tab)\" href=\"https://www.jonniegrieve.co.uk\" target=\"_blank\">website</a> are served via a font <strong>Content Delivery Network (CDN)</strong>. So these are not images that could have been easily targeted to reduce resources. I wanted to see if there was a way to serve some of my service icons the same sprite map but these are fonts rather than SVG\'s but that\'s not the case.  I was, however, able to use SVG for social media icons. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using this method I created a sprite map of several\ncontained SVG’s in one resource so only one HTTP Request was taken up.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>31 requests  156 KB transferred  1.1 MB resources Finish: 1.51 s  Load: 1.52 s</strong></p><cite>Performance Savings: Round 3</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Having looked at my main background images and social media\nicons I then turned my attention to the rest of the images and how they could\nbe optimised. Most of my images are stored in directories according to their\nintended use.&nbsp; As I began the process,\nthis is the total size of each directory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Featured directory:  2.4mb<br>Services directory:  200kb</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These were all <strong>.PNG</strong> files. I switched the majority of PNG\'s now from PNG to JPG using the same export settings for the main background image (60% quality compared to the PNG\'S and progressive download).  The result of this was that resources and transfers now <strong>total less than 1mb</strong>.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Featured directory: 992 KB (1,015,808 bytes)<br>Services Directory:  135kb</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>31 requests 754 KB transferred  993 KB resources  Finish: 2.39 s  Load: 1.77 s</strong></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>So, for the first time the resources show up as taking less than a 1mb in served resources. Great!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There is a video asset in this website. Videos typically take up more bandwidth than image files whether they are served by an external CDN or not. I made the decision to stick to a HTML5 video tag rather than embedding a YouTube link. I may investigate further but for now the video takes up the bandwidth.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Minifying the JavaScript and CSS </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Minifying files is the process of reducing the file size of CSS and JS assets by stripping out comments and any spaces in the code. Typically this is done using a build tool which can add to the website payload, but since this is only a small website, I opted to use online tools to minify my files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Minifying files like this saved me a further <strong>6kb</strong> which is a minimal benefit in this case but I felt it only right to do it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>34 requests 739 KB transferred 859 KB resources Finish: 4.25 s Load: 3.71 s</strong></p><cite>Last check.  - remember some of these results are network dependent</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading -->\n<h2>Resizes and Compressed Images</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The last thing I want to talk about is the process of image display resolution. Display resolution refers to how devices display images in their browsers.  Correctly sizing and compressing images can help save a little space but is also an important consideration for retina display devices.  Delivering images that are appropriately compressed and sized to their container will reduce file sizes, otherwise, it is wasted bandwidth.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The theory is that by halving the size of the image when you export the file reduces the number of pixels that need to be displayed by the time it is shown in the browser.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So when you start exporting in your image editor: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li> 1024 by 768 becomes </li><li> 532 by 399   (twice the resolution) </li><li> 266 by 200 pixels </li><li> Natural 532 by 399  </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>So the pixels rendered should be showing reduced compared to natural/intrinsic value. But as of the day of posting this blog, this is not happening for me.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I\'m going to look at this further but for now I\'m happy with the performance savings I have so far made.  I’ve reduced the bandwidth by more than half and significantly increased my website speed.  I’ve learned a lot during this process and the techniques I\'ve learned in this blog are standard I intend to follow going forward. </p>\n<!-- /wp:paragraph -->', 'A Learning Process: Front End Performance Optimisation', '', 'inherit', 'closed', 'closed', '', '102-revision-v1', '', '', '2019-11-13 11:53:53', '2019-11-13 11:53:53', '', 102, 'https://blog.jonniegrieve.co.uk/102-revision-v1/', 0, 'revision', '', 0),
(107, 1, '2019-11-13 11:55:32', '2019-11-13 11:55:32', '<!-- wp:paragraph -->\n<p>Over the last few weeks, I have spent some time learning about how to improve my <a href=\"https://www.jonniegrieve.co.uk\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"website\'s front end performance (opens in a new tab)\">website\'s front end performance</a> i.e. the speed in which all assets load in an effort to retain visitors and hopefully even improve my search ranking.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This involves looking at the number of requests I\'m making\nto my server, how my images and web files are optimised, how I can make savings\nand even how the code is rendered.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the start of this process, I had a look at the figures via <strong>ChromeDev</strong> Tools. They tally up the resources, HTTP Requests and bandwidth used and this is the crux of where I started out with.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>38 requests -  134 KB transferred  - 2.2 MB resources - Finish: 1.67 </strong></p><cite>first check</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>It\'s worth pointing out at this point that some of these numbers are network dependent and some are finite. It shows that as of a few weeks ago (October 2019), I was serving up to <strong>2.2MB</strong> of data, only <strong>134kb</strong> of which I was actually choosing to render in the HTML. So not exactly the most bandwidth straining of websites, but this is deliberately so. And it\'s not necessarily the case that this means a 100% speedy experience but again that depends on what your network speed is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally, after a brief check, there did not appear to be any unused assets so no HTTP 404 errors were returned and no wasted resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Optimising images </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Most of the 2.2mb total consists of images that were simply not optimised. Indeed the design includes a main background image that is fixed on scroll that I edited a little bit on Photoshop and exported as an image file with barely a second thought to optimisation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\'s look at the main background image as an example.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>interior-darker.png  - 1,739.kb<br> img/ios-bg.png   - 14kb</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>So those background images on their own represented the vast majority of the resources I was using.  So what could be done to reduce that load?  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I went back into Photoshop and opened the image up and exported the file using \"save for web\". Using this, I saved a copy of the image with a 60% quality level with progressive download style and this time I saved it as a jpeg.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4,323,001 bytes reduced to 473,322kb  (a saving of 3,849,679 bytes) 4,323,001  - 3,849,679 is an <strong>89.05%</strong> saving   </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An 89% saving just on the background image served alone.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>35 requests  129 KB transferred  2.1 MB resources  Finish: 2.01 s    </strong></p><cite>The latest savings</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading -->\n<h2>SVG Sprite Maps</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The \"Service\" section images on my <a rel=\"noreferrer noopener\" aria-label=\"website (opens in a new tab)\" href=\"https://www.jonniegrieve.co.uk\" target=\"_blank\">website</a> are served via a font <strong>Content Delivery Network (CDN)</strong>. So these are not images that could have been easily targeted to reduce resources. I wanted to see if there was a way to serve some of my service icons the same sprite map but these are fonts rather than SVG\'s but that\'s not the case.  I was, however, able to use SVG for social media icons. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using this method I created a sprite map of several\ncontained SVG’s in one resource so only one HTTP Request was taken up.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>31 requests  156 KB transferred  1.1 MB resources Finish: 1.51 s  Load: 1.52 s</strong></p><cite>Performance Savings: Round 3</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Having looked at my main background images and social media\nicons I then turned my attention to the rest of the images and how they could\nbe optimised. Most of my images are stored in directories according to their\nintended use.&nbsp; As I began the process,\nthis is the total size of each directory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Featured directory:  2.4mb<br>Services directory:  200kb</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These were all <strong>.PNG</strong> files. I switched the majority of PNG\'s now from PNG to JPG using the same export settings for the main background image (60% quality compared to the PNG\'S and progressive download).  The result of this was that resources and transfers now <strong>total less than 1mb</strong>.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Featured directory: 992 KB (1,015,808 bytes)<br>Services Directory:  135kb</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>31 requests 754 KB transferred  993 KB resources  Finish: 2.39 s  Load: 1.77 s</strong></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>So, for the first time the resources show up as taking less than a 1mb in served resources. Great!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There is a video asset in this website. Videos typically take up more bandwidth than image files whether they are served by an external CDN or not. I made the decision to stick to an HTML5 video tag rather than embedding a YouTube link. I may investigate further but for now, the video takes up the bandwidth.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Minifying the JavaScript and CSS </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Minifying files is the process of reducing the file size of CSS and JS assets by stripping out comments and any spaces in the code. Typically this is done using a build tool which can add to the website payload, but since this is only a small website, I opted to use online tools to minify my files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Minifying files like this saved me a further <strong>6kb</strong> which is a minimal benefit in this case but I felt it only right to do it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>34 requests 739 KB transferred 859 KB resources Finish: 4.25 s Load: 3.71 s</strong></p><cite>Last check.  - remember some of these results are network dependent</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading -->\n<h2>Resizes and Compressed Images</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The last thing I want to talk about is the process of image display resolution. Display resolution refers to how devices display images in their browsers.  Correctly sizing and compressing images can help save a little space but is also an important consideration for retina display devices.  Delivering images that are appropriately compressed and sized to their container will reduce file sizes, otherwise, it is wasted bandwidth.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The theory is that by halving the size of the image when you export the file reduces the number of pixels that need to be displayed by the time it is shown in the browser.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So when you start exporting in your image editor: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li> 1024 by 768 becomes </li><li> 532 by 399   (twice the resolution) </li><li> 266 by 200 pixels </li><li> Natural 532 by 399  </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>So the pixels rendered should be showing reduced compared to natural/intrinsic value. But as of the day of posting this blog, this is not happening for me.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I\'m going to look at this further but for now I\'m happy with the performance savings I have so far made.  I’ve reduced the bandwidth by more than half and significantly increased my website speed.  I’ve learned a lot during this process and the techniques I\'ve learned in this blog are standard I intend to follow going forward. </p>\n<!-- /wp:paragraph -->', 'A Learning Process: Front End Performance Optimisation', '', 'inherit', 'closed', 'closed', '', '102-revision-v1', '', '', '2019-11-13 11:55:32', '2019-11-13 11:55:32', '', 102, 'https://blog.jonniegrieve.co.uk/102-revision-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(108, 1, '2019-11-13 12:03:30', '2019-11-13 12:03:30', '<!-- wp:paragraph -->\n<p>Over the last few weeks, I have spent some time learning about how to improve my <a href=\"https://www.jonniegrieve.co.uk\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"website\'s front end performance (opens in a new tab)\">website\'s front end performance</a> i.e. the speed in which all assets load in an effort to retain visitors and hopefully even improve my search ranking.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This involves looking at the number of requests I\'m making\nto my server, how my images and web files are optimised, how I can make savings\nand even how the code is rendered.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the start of this process, I had a look at the figures via <strong>ChromeDev</strong> Tools. They tally up the resources, HTTP Requests and bandwidth used and this is the crux of where I started out with.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>38 requests -&nbsp; 134 KB transferred&nbsp; - 2.2 MB resources - Finish: 1.67 </strong></p><cite>first check</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>It\'s worth pointing out at this point that some of these numbers are network dependent and some are finite.&nbsp;It shows that as of a few weeks ago (October 2019), I was serving up to <strong>2.2MB</strong> of data, only <strong>134kb</strong> of which I was actually choosing to render in the HTML. So not exactly the most bandwidth straining of websites, but this is deliberately so. And it\'s not necessarily the case that this means a 100% speedy experience but again that depends on what your network speed is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally, after a brief check, there did not appear to be any unused assets so no HTTP 404 errors were returned and no wasted resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Optimising images </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Most of the 2.2mb total consists of images that were simply not optimised. Indeed the design includes a main background image that is fixed on scroll that I edited a little bit on Photoshop and exported as an image file with barely a second thought to optimisation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\'s look at the main background image as an example.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>interior-darker.png&nbsp; - 1,739.kb<br> img/ios-bg.png&nbsp;&nbsp; - 14kb</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>So those background images on their own represented the vast majority of the resources I was using.&nbsp; So what could be done to reduce that load?&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I went back into Photoshop and opened the image up and exported the file using \"save for web\". Using this, I saved a copy of the image with a 60% quality level with progressive download style and this time I saved it as a jpeg.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>4,323,001 bytes reduced to 473,322kb&nbsp; (a saving of 3,849,679 bytes) 4,323,001&nbsp; - 3,849,679 is an <strong>89.05%</strong> saving&nbsp;&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An 89% saving just on the background image served alone.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>35 requests&nbsp; 129 KB transferred&nbsp; 2.1 MB resources&nbsp; Finish: 2.01 s&nbsp;&nbsp;&nbsp; </strong></p><cite>The latest savings</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading -->\n<h2>SVG Sprite Maps</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The \"Service\" section images on my <a rel=\"noreferrer noopener\" aria-label=\"website (opens in a new tab)\" href=\"https://www.jonniegrieve.co.uk\" target=\"_blank\">website</a> are served via a font <strong>Content Delivery Network (CDN)</strong>. So these are not images that could have been easily targeted to reduce resources. I wanted to see if there was a way to serve some of my service icons the same sprite map but these are fonts rather than SVG\'s but that\'s not the case.&nbsp; I was, however, able to use SVG for social media icons. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using this method I created a sprite map of several\ncontained SVG’s in one resource so only one HTTP Request was taken up.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>31 requests&nbsp; 156 KB transferred&nbsp; 1.1 MB resources Finish: 1.51 s&nbsp; Load: 1.52 s</strong></p><cite>Performance Savings: Round 3</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Having looked at my main background images and social media\nicons I then turned my attention to the rest of the images and how they could\nbe optimised. Most of my images are stored in directories according to their\nintended use.&nbsp; As I began the process,\nthis is the total size of each directory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Featured directory:&nbsp; 2.4mb<br>Services directory:&nbsp; 200kb</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These were all <strong>.PNG</strong> files. I switched the majority of PNG\'s now from PNG to JPG using the same export settings for the main background image (60% quality compared to the PNG\'S and progressive download). &nbsp;The result of this was that resources and transfers now <strong>total less than 1mb</strong>.&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Featured directory: 992 KB (1,015,808 bytes)<br>Services Directory:&nbsp; 135kb</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>31 requests 754 KB transferred&nbsp; 993 KB resources&nbsp; Finish: 2.39 s&nbsp; Load: 1.77 s</strong></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>So, for the first time the resources show up as taking less than a 1mb in served resources. Great!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There is a video asset in this website. Videos typically take up more bandwidth than image files whether they are served by an external CDN or not. I made the decision to stick to an HTML5 video tag rather than embedding a YouTube link. I may investigate further but for now, the video takes up the bandwidth.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Minifying the JavaScript and CSS </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Minifying files is the process of reducing the file size of CSS and JS assets by stripping out comments and any spaces in the code. Typically this is done using a build tool which can add to the website payload, but since this is only a small website, I opted to use online tools to minify my files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Minifying files like this saved me a further <strong>6kb</strong> which is a minimal benefit in this case but I felt it only right to do it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong>34 requests 739 KB transferred 859 KB resources Finish: 4.25 s Load: 3.71 s</strong></p><cite>Last check.  - remember some of these results are network dependent</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading -->\n<h2>Resizes and Compressed Images</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The last thing I want to talk about is the process of image display resolution.&nbsp;Display resolution refers to how devices display images in their browsers.  Correctly sizing and compressing images can help save a little space but is also an important consideration for retina display devices.&nbsp; Delivering images that are appropriately compressed and sized to their container will reduce file sizes, otherwise, it is wasted bandwidth.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The theory is that by halving the size of the image when you export the file reduces the number of pixels that need to be displayed by the time it is shown in the browser.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So when you start exporting in your image editor: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li> 1024 by 768 becomes </li><li> 532 by 399&nbsp;&nbsp; (twice the resolution) </li><li> 266 by 200 pixels </li><li> Natural 532 by 399  </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>So the pixels rendered should be showing reduced compared to natural/intrinsic value. But as of the day of posting this blog, this is not happening for me.&nbsp; </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I\'m going to look at this further but for now I\'m happy with the performance savings I have so far made.&nbsp; I’ve reduced the bandwidth by more than half and significantly increased my website speed.&nbsp; I’ve learned a lot during this process and the techniques I\'ve learned in this blog are standard I intend to follow going forward. </p>\n<!-- /wp:paragraph -->', 'A Learning Process: Front End Performance Optimisation', '', 'inherit', 'closed', 'closed', '', '102-revision-v1', '', '', '2019-11-13 12:03:30', '2019-11-13 12:03:30', '', 102, 'https://blog.jonniegrieve.co.uk/102-revision-v1/', 0, 'revision', '', 0),
(110, 1, '2020-07-10 15:59:02', '2020-07-10 14:59:02', '<!-- wp:paragraph -->\n<p>Hi folks.   It\'s been some time since my last blog.  My head is always too wrapped up in other things to keep it up to date. Looking back it was November last year since I last made a posting and the world has changed since the last time I even thought to post something to my blog. One of the things I\'m always thinking about is how to keep my mind focussed, and organised. And ahead of this, it\'s about how to keep things on my radar. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As you can imagine with running a business, especially when you do it on your own you have a lot of things to occupy your mind and that is just things regarding the business.    </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It becomes even more difficult when you have a Dyspraxic brain. I\'ve spoken a lot about Dyspraxia before. <a rel=\"noreferrer noopener\" aria-label=\"ere\'s a bit more about it (opens in a new tab)\" href=\"https://blog.jonniegrieve.co.uk/my-workflow-as-a-dyspraxic-developer/\" target=\"_blank\">Here\'s a bit more about it</a> if you\'re not sure what it is and want to get up to speed. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So... having reiterated that, how do I keep things on my radar? How do I remember things? How can I make sure I am focussed on the things I need to be? </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some people use calendars. Some people use diaries. Some people have \"post its\" and booklets.  I use lists.  I love lists and <a rel=\"noreferrer noopener\" aria-label=\"Workflowy (opens in a new tab)\" href=\"https://workflowy.com/\" target=\"_blank\">Workflowy</a> is a fantastic tool for me to quite literally organise my brain. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With Workflowy I can organise the status of my projects, keep a handle on the priority tasks of my day. I can help myself remember which social media posts I have recently posted so I can keep my messaging fresh and I can keep myself up to date on which of my projects need the most attention.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Among my social media postings, I like to promote one project a day, with a link to them and something about that project. Most of them are complete and ready to view. Some are under review or are still to be built.  I have a list of all of these on this website. And it\'s powered with the below structured data</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"> <strong>{\n     \"projects\": [\n          {\n             \"project_name\": \"Auto Cleanse North East\",\n              \"project_url\": \"</strong><a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://www.autoc.co.uk/\"><strong>http://www.autoc.co.uk/</strong></a><strong>\",\n              \"img_url\": \"img/featured/autocleansenortheast.jpg\",    \n              \"project_alt\": \"Go to Auto Cleanse North East\",\n              \"project_type\": \"Website\",\n              \"project_status\": \"Complete\", \n              \"status\": true\n       }\n     ],\n              \"category\": [\n                 //data\n     ]\n} </strong></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>And this is what it looks like</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\"} -->\n<p style=\"text-align:center\"> <img class=\"wp-image-111\" style=\"width: 300px;\" src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2020/07/project_status.png\" alt=\"\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using JSON, JavaScript and CSS, I generated a dynamic list of all the data, and projects I have in mind, (and there are quite a few) in one location so I know which projects need more work, and which are to come.  Also, I can use the same list for different purposes and in different ways.  <br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So that\'s the \"how\".  It\'s a slow process or organising all the work I do and making sure nothing gets too much for me to handle. Because if I don\'t have a structure to my work it can all go haywire very easily.</p>\n<!-- /wp:paragraph -->', 'Keeping things on my radar', '', 'publish', 'open', 'open', '', 'keeping-things-on-my-radar', '', '', '2020-07-10 15:59:02', '2020-07-10 14:59:02', '', 0, 'https://blog.jonniegrieve.co.uk/?p=110', 0, 'post', '', 0),
(111, 1, '2020-07-10 15:47:38', '2020-07-10 14:47:38', '', 'project_status', '', 'inherit', 'open', 'closed', '', 'project_status', '', '', '2020-07-10 15:47:38', '2020-07-10 14:47:38', '', 0, 'https://blog.jonniegrieve.co.uk/wp-content/uploads/2020/07/project_status.png', 0, 'attachment', 'image/png', 0),
(112, 1, '2020-07-10 15:47:53', '2020-07-10 14:47:53', '<!-- wp:paragraph -->\n<p> Hi folks.   It\'s been some time since my last blog.  My head is always too wrapped up in other things to keep it up to date. And the world has changed since the last time I even thought to post something to my blog. One of the things I\'m always thinking about is how to keep my mind focussed, and organised. How to keep things on my radar. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As you can imagine with running a business, especially when you do it on your own you have a lot of things to occupy your mind and that is just things regarding the business.    </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It becomes even more difficult when you have a Dyspraxic brain. I\'ve spoken a lot about Dyspraxia before. Here\'s a bit more about it if you\'re not sure what it is and want to get up to speed. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So... having reiterated that, how do I keep things on my radar? How do I remember things? How and I make sure I am focussed on the things I need to be? Some people use calendars. Some people use diaries. Some people have post its and booklets.  I use lists.  I love lists and Workflowy is a fantastoc tool for me to quite literally organise my brain. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With Workflowy I can organise status of my projects, keep a handle on the priority tasks of my day. I can help myself remember which social media posts I have recently posted so I can keep my messaging fresh and I can keep myself up to date on which of my projects need the most attention.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Among my social media postings, I like to promote one project a day, with a link to them. Most of them are complete and ready to view. Some are under review or are still to be built.  I have a list of all of these on this website.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> {     \"projects\": [          {             \"project_name\": \"Auto Cleanse North East\",             \"project_url\": \"<a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://www.autoc.co.uk/\">http://www.autoc.co.uk/</a>\",             \"img_url\": \"img/featured/autocleansenortheast.jpg\",             \"project_alt\": \"Go to Auto Cleanse North East\",             \"project_type\": \"Website\",             \"project_status\": \"Complete\",             \"status\": true         }     ],      \"\": [        //data     ]    } </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\"} -->\n<p style=\"text-align:center\"> <img class=\"wp-image-111\" style=\"width: 150px;\" src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2020/07/project_status.png\" alt=\"\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using JSON, JavaScript and CSS, I generated a dynamic list of all the data, and projects I need, in one location so I know which projects need more work, and which are to come.  Also i can use the same list for different purposes and in different ways.  <br></p>\n<!-- /wp:paragraph -->', 'Keeping things on my radar', '', 'inherit', 'closed', 'closed', '', '110-revision-v1', '', '', '2020-07-10 15:47:53', '2020-07-10 14:47:53', '', 110, 'https://blog.jonniegrieve.co.uk/110-revision-v1/', 0, 'revision', '', 0),
(113, 1, '2020-07-10 15:55:30', '2020-07-10 14:55:30', '<!-- wp:paragraph -->\n<p>Hi folks.   It\'s been some time since my last blog.  My head is always too wrapped up in other things to keep it up to date. Looking back it was November last year since I last made a posting and the world has changed since the last time I even thought to post something to my blog. One of the things I\'m always thinking about is how to keep my mind focussed, and organised. And ahead of this it\'s about how to keep things on my radar. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As you can imagine with running a business, especially when you do it on your own you have a lot of things to occupy your mind and that is just things regarding the business.    </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It becomes even more difficult when you have a Dyspraxic brain. I\'ve spoken a lot about Dyspraxia before. <a rel=\"noreferrer noopener\" aria-label=\"ere\'s a bit more about it (opens in a new tab)\" href=\"https://blog.jonniegrieve.co.uk/my-workflow-as-a-dyspraxic-developer/\" target=\"_blank\">Here\'s a bit more about it</a> if you\'re not sure what it is and want to get up to speed. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So... having reiterated that, how do I keep things on my radar? How do I remember things? How can I make sure I am focussed on the things I need to be? </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some people use calendars. Some people use diaries. Some people have \"post its\" and booklets.  I use lists.  I love lists and <a rel=\"noreferrer noopener\" aria-label=\"Workflowy (opens in a new tab)\" href=\"https://workflowy.com/\" target=\"_blank\">Workflowy</a> is a fantastic tool for me to quite literally organise my brain. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With Workflowy I can organise the status of my projects, keep a handle on the priority tasks of my day. I can help myself remember which social media posts I have recently posted so I can keep my messaging fresh and I can keep myself up to date on which of my projects need the most attention.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Among my social media postings, I like to promote one project a day, with a link to them and something about that project. Most of them are complete and ready to view. Some are under review or are still to be built.  I have a list of all of these on this website. And it\'s powered with the below structured data</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"> {\n     \"projects\": [\n          {\n             \"project_name\": \"Auto Cleanse North East\",\n              \"project_url\": \"<a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://www.autoc.co.uk/\">http://www.autoc.co.uk/</a>\",\n              \"img_url\": \"img/featured/autocleansenortheast.jpg\",    \n              \"project_alt\": \"Go to Auto Cleanse North East\",\n              \"project_type\": \"Website\",\n              \"project_status\": \"Complete\", \n              \"status\": true\n       }\n     ],\n              \"category\": [\n                 //data\n     ]\n} </pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph {\"align\":\"center\"} -->\n<p style=\"text-align:center\"> <img class=\"wp-image-111\" style=\"width: 300px;\" src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2020/07/project_status.png\" alt=\"\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using JSON, JavaScript and CSS, I generated a dynamic list of all the data, and projects I need, in one location so I know which projects need more work, and which are to come.  Also i can use the same list for different purposes and in different ways.  <br></p>\n<!-- /wp:paragraph -->', 'Keeping things on my radar', '', 'inherit', 'closed', 'closed', '', '110-revision-v1', '', '', '2020-07-10 15:55:30', '2020-07-10 14:55:30', '', 110, 'https://blog.jonniegrieve.co.uk/110-revision-v1/', 0, 'revision', '', 0),
(114, 1, '2020-07-10 15:58:26', '2020-07-10 14:58:26', '<!-- wp:paragraph -->\n<p>Hi folks.   It\'s been some time since my last blog.  My head is always too wrapped up in other things to keep it up to date. Looking back it was November last year since I last made a posting and the world has changed since the last time I even thought to post something to my blog. One of the things I\'m always thinking about is how to keep my mind focussed, and organised. And ahead of this, it\'s about how to keep things on my radar. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As you can imagine with running a business, especially when you do it on your own you have a lot of things to occupy your mind and that is just things regarding the business.    </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It becomes even more difficult when you have a Dyspraxic brain. I\'ve spoken a lot about Dyspraxia before. <a rel=\"noreferrer noopener\" aria-label=\"ere\'s a bit more about it (opens in a new tab)\" href=\"https://blog.jonniegrieve.co.uk/my-workflow-as-a-dyspraxic-developer/\" target=\"_blank\">Here\'s a bit more about it</a> if you\'re not sure what it is and want to get up to speed. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So... having reiterated that, how do I keep things on my radar? How do I remember things? How can I make sure I am focussed on the things I need to be? </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some people use calendars. Some people use diaries. Some people have \"post its\" and booklets.  I use lists.  I love lists and <a rel=\"noreferrer noopener\" aria-label=\"Workflowy (opens in a new tab)\" href=\"https://workflowy.com/\" target=\"_blank\">Workflowy</a> is a fantastic tool for me to quite literally organise my brain. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With Workflowy I can organise the status of my projects, keep a handle on the priority tasks of my day. I can help myself remember which social media posts I have recently posted so I can keep my messaging fresh and I can keep myself up to date on which of my projects need the most attention.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Among my social media postings, I like to promote one project a day, with a link to them and something about that project. Most of them are complete and ready to view. Some are under review or are still to be built.  I have a list of all of these on this website. And it\'s powered with the below structured data</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"> {\n     \"projects\": [\n          {\n             \"project_name\": \"Auto Cleanse North East\",\n              \"project_url\": \"<a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://www.autoc.co.uk/\">http://www.autoc.co.uk/</a>\",\n              \"img_url\": \"img/featured/autocleansenortheast.jpg\",    \n              \"project_alt\": \"Go to Auto Cleanse North East\",\n              \"project_type\": \"Website\",\n              \"project_status\": \"Complete\", \n              \"status\": true\n       }\n     ],\n              \"category\": [\n                 //data\n     ]\n} </pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>And this is what it looks like</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\"} -->\n<p style=\"text-align:center\"> <img class=\"wp-image-111\" style=\"width: 300px;\" src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2020/07/project_status.png\" alt=\"\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using JSON, JavaScript and CSS, I generated a dynamic list of all the data, and projects I have in mind, (and there are quite a few) in one location so I know which projects need more work, and which are to come.  Also, I can use the same list for different purposes and in different ways.  <br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So that\'s the \"how\".  It\'s a slow process or organising all the work I do and making sure nothing gets too much for me to handle. Because if I don\'t have a structure to my work it can all go haywire very easily.</p>\n<!-- /wp:paragraph -->', 'Keeping things on my radar', '', 'inherit', 'closed', 'closed', '', '110-revision-v1', '', '', '2020-07-10 15:58:26', '2020-07-10 14:58:26', '', 110, 'https://blog.jonniegrieve.co.uk/110-revision-v1/', 0, 'revision', '', 0),
(115, 1, '2020-07-10 15:58:43', '2020-07-10 14:58:43', '<!-- wp:paragraph -->\n<p>Hi folks.   It\'s been some time since my last blog.  My head is always too wrapped up in other things to keep it up to date. Looking back it was November last year since I last made a posting and the world has changed since the last time I even thought to post something to my blog. One of the things I\'m always thinking about is how to keep my mind focussed, and organised. And ahead of this, it\'s about how to keep things on my radar. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As you can imagine with running a business, especially when you do it on your own you have a lot of things to occupy your mind and that is just things regarding the business.    </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It becomes even more difficult when you have a Dyspraxic brain. I\'ve spoken a lot about Dyspraxia before. <a rel=\"noreferrer noopener\" aria-label=\"ere\'s a bit more about it (opens in a new tab)\" href=\"https://blog.jonniegrieve.co.uk/my-workflow-as-a-dyspraxic-developer/\" target=\"_blank\">Here\'s a bit more about it</a> if you\'re not sure what it is and want to get up to speed. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So... having reiterated that, how do I keep things on my radar? How do I remember things? How can I make sure I am focussed on the things I need to be? </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some people use calendars. Some people use diaries. Some people have \"post its\" and booklets.  I use lists.  I love lists and <a rel=\"noreferrer noopener\" aria-label=\"Workflowy (opens in a new tab)\" href=\"https://workflowy.com/\" target=\"_blank\">Workflowy</a> is a fantastic tool for me to quite literally organise my brain. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With Workflowy I can organise the status of my projects, keep a handle on the priority tasks of my day. I can help myself remember which social media posts I have recently posted so I can keep my messaging fresh and I can keep myself up to date on which of my projects need the most attention.  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Among my social media postings, I like to promote one project a day, with a link to them and something about that project. Most of them are complete and ready to view. Some are under review or are still to be built.  I have a list of all of these on this website. And it\'s powered with the below structured data</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"> <strong>{\n     \"projects\": [\n          {\n             \"project_name\": \"Auto Cleanse North East\",\n              \"project_url\": \"</strong><a rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://www.autoc.co.uk/\"><strong>http://www.autoc.co.uk/</strong></a><strong>\",\n              \"img_url\": \"img/featured/autocleansenortheast.jpg\",    \n              \"project_alt\": \"Go to Auto Cleanse North East\",\n              \"project_type\": \"Website\",\n              \"project_status\": \"Complete\", \n              \"status\": true\n       }\n     ],\n              \"category\": [\n                 //data\n     ]\n} </strong></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>And this is what it looks like</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\"} -->\n<p style=\"text-align:center\"> <img class=\"wp-image-111\" style=\"width: 300px;\" src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2020/07/project_status.png\" alt=\"\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using JSON, JavaScript and CSS, I generated a dynamic list of all the data, and projects I have in mind, (and there are quite a few) in one location so I know which projects need more work, and which are to come.  Also, I can use the same list for different purposes and in different ways.  <br></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So that\'s the \"how\".  It\'s a slow process or organising all the work I do and making sure nothing gets too much for me to handle. Because if I don\'t have a structure to my work it can all go haywire very easily.</p>\n<!-- /wp:paragraph -->', 'Keeping things on my radar', '', 'inherit', 'closed', 'closed', '', '110-revision-v1', '', '', '2020-07-10 15:58:43', '2020-07-10 14:58:43', '', 110, 'https://blog.jonniegrieve.co.uk/110-revision-v1/', 0, 'revision', '', 0),
(117, 1, '2020-12-03 15:57:15', '2020-12-03 15:57:15', '<div id=\"sp-page\" class=\"spBgcover sp-content-4\" style=\"background-color: rgb(255, 255, 255); font-family: \'Helvetica Neue\', Arial, sans-serif; font-weight: 400;\"><section id=\"sp-ks8a8s\" class=\"sp-el-section \" style=\"width: 600px; max-width: 100%; padding: 10px;\"><div id=\"sp-vw3kvy\" class=\"sp-el-row sm:sp-flex sp-justify-between sp-w-full  sp-m-auto\" style=\"padding: 0px; width: auto; max-width: 750px;\"><div id=\"sp-ggzp6w\" class=\"sp-el-col sp-p-4  sp-w-full\" style=\"width: calc(100% - 8px); padding: 10px;\"><figure id=\"sp-brhhwi\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"http://assets.seedprod.com/clock.png\" alt=\"\" style=\"width: 85px;\"></span></figure><h1 id=\"sp-jkhbii\" class=\"sp-css-target\" style=\"font-size: 52px; font-weight: bold; color: rgb(50, 27, 38); text-align: center; padding: 10px; margin-top: 0px;\">Coming Soon</h1><figure id=\"sp-yftr9d\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/FacebookProfilepic.png\" alt=\"New Blog platform coming soon!\"></span></figure><div id=\"sp-jdj1i9\" class=\"sp-css-target sp-text-wrapper\" style=\"font-size: 16px; color: rgb(50, 27, 38); padding: 10px; margin-top: 0px; text-align: center;\"><p><strong>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</strong></p></div></div></div></section></div>', '', '', 'publish', 'closed', 'closed', '', '117', '', '', '2020-12-03 15:58:37', '2020-12-03 15:58:37', '{\"no_conflict_mode\":true,\"no_index\":false,\"seo_title\":\"\",\"seo_description\":\"\",\"favicon\":\"\",\"social_thumbnail\":\"\",\"enable_recaptcha\":false,\"template_id\":373,\"post_title\":\"\",\"post_name\":\"117\",\"post_status\":\"publish\",\"show_powered_by_link\":false,\"affiliate_url\":\"\",\"header_scripts\":\"\",\"body_scripts\":\"\",\"footer_scripts\":\"\",\"conversion_scripts\":\"\",\"disable_default_excluded_urls\":false,\"include_exclude_type\":\"0\",\"include_list\":\"\",\"exclude_list\":\"\",\"bypass_phrase\":\"\",\"bypass_expires\":\"2\",\"bypass_cookie\":false,\"access_by_ip\":\"\",\"access_by_role\":[],\"redirect_mode\":false,\"redirect_url\":\"\",\"domain_mapping_status\":false,\"domain_mapping\":\"\",\"domain_mapping_force_https\":false,\"exclude_list_404\":\"\",\"email_integration_id\":\"\",\"is_new\":false,\"page_type\":\"cs\",\"document\":{\"sections\":[{\"id\":\"ks8a8s\",\"type\":\"section\",\"rows\":[{\"id\":\"vw3kvy\",\"type\":\"row\",\"colType\":\"1-col\",\"cols\":[{\"id\":\"ggzp6w\",\"type\":\"col\",\"blocks\":[{\"id\":\"brhhwi\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"unit\":\"px\",\"src\":\"http://assets.seedprod.com/clock.png\",\"altTxt\":\"\",\"link\":\"\",\"width\":\"85\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false,\"openNewWindow\":false,\"noFollow\":false}},{\"id\":\"jkhbii\",\"elType\":\"block\",\"type\":\"header\",\"settings\":{\"headerTxt\":\"Coming Soon\",\"tag\":\"h1\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":52,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":true,\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}},{\"id\":\"yftr9d\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"link\":\"\",\"openNewWindow\":false,\"noFollow\":false,\"unit\":\"px\",\"src\":\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/FacebookProfilepic.png\",\"altTxt\":\"New Blog platform coming soon!\",\"width\":\"\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false}},{\"id\":\"jdj1i9\",\"elType\":\"block\",\"type\":\"text\",\"settings\":{\"txt\":\"<p><strong>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</strong></p>\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":16,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":\"\",\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colWidth\":\"\",\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colGutter\":8,\"width\":750,\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"0\",\"paddingBottom\":\"0\",\"paddingLeft\":\"0\",\"paddingRight\":\"0\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"contentWidth\":\"2\",\"width\":600,\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"10\",\"paddingBottom\":\"10\",\"paddingLeft\":\"10\",\"paddingRight\":\"10\",\"paddingSync\":true,\"borderRadius\":\"\",\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\",\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"bgColor\":\"#FFFFFF\",\"bgImage\":\"\",\"bgDimming\":0,\"bgOverlayColor\":\"\",\"bgPosition\":\"cover\",\"buttonColor\":\"#000000\",\"headerColor\":\"#000000\",\"linkColor\":\"#FF0000\",\"linkDarkerColor\":\"#cc0000\",\"textColor\":\"#272727\",\"textFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"textFontVariant\":\"400\",\"headerFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"headerFontVariant\":\"400\",\"contentPosition\":\"4\",\"customCss\":\"\",\"headCss\":\"#sp-page{color:#272727} #sp-page .sp-header-tag-h1,#sp-page .sp-header-tag-h2,#sp-page .sp-header-tag-h3,#sp-page .sp-header-tag-h4,#sp-page .sp-header-tag-h5,#sp-page .sp-header-tag-h6{color:#000000}#sp-page h1,#sp-page h2,#sp-page h3,#sp-page h4,#sp-page h5,#sp-page h6{color:#000000; font-family:\'Helvetica Neue\', Arial, sans-serif;font-weight:400;font-style:normal} #sp-page a{color:#FF0000} #sp-page a:hover{color:#cc0000}#sp-page .btn{background-color:#000000}body{background-color:#FFFFFF; background-image:;}\",\"mobileCss\":\"\",\"placeholderCss\":\"\",\"useVideoBg\":false,\"useVideoBgUrl\":\"\",\"useSlideshowBg\":false,\"useSlideshowImgs\":[\"\"]}}}', 0, 'https://blog.jonniegrieve.co.uk/?post_type=seedprod&#038;p=117', 0, 'seedprod', '', 0),
(118, 1, '2020-12-03 15:50:51', '2020-12-03 15:50:51', '', 'sp-cs', '', 'inherit', 'closed', 'closed', '', '117-revision-v1', '', '', '2020-12-03 15:50:51', '2020-12-03 15:50:51', '', 117, 'https://blog.jonniegrieve.co.uk/117-revision-v1/', 0, 'revision', '', 0),
(119, 1, '2020-12-03 15:52:13', '2020-12-03 15:52:13', '<div id=\"sp-page\" class=\"spBgcover sp-content-4\" style=\"background-color: rgb(255, 255, 255); font-family: \'Helvetica Neue\', Arial, sans-serif; font-weight: 400;\"><section id=\"sp-ks8a8s\" class=\"sp-el-section \" style=\"width: 600px; max-width: 100%; padding: 10px;\"><div id=\"sp-vw3kvy\" class=\"sp-el-row sm:sp-flex sp-justify-between sp-w-full  sp-m-auto\" style=\"padding: 0px; width: auto; max-width: 1000px;\"><div id=\"sp-ggzp6w\" class=\"sp-el-col sp-p-4  sp-w-full\" style=\"width: calc(100% - 0px); padding: 10px;\"><figure id=\"sp-brhhwi\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"http://assets.seedprod.com/clock.png\" alt=\"\"></span></figure><h1 id=\"sp-jkhbii\" class=\"sp-css-target\" style=\"font-size: 52px; font-weight: bold; color: rgb(50, 27, 38); text-align: center; padding: 10px; margin-top: 0px;\">Coming Soon</h1><div id=\"tiny-vue_94764494731607010670295\" class=\"sp-css-target sp-text-wrapper mce-content-body html4-captions\"  style=\"font-size: 16px; color: rgb(50, 27, 38); padding: 10px; margin-top: 0px; text-align: center; position: relative;\" ><p>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</p></div></div></div></section></div>', '', '', 'inherit', 'closed', 'closed', '', '117-autosave-v1', '', '', '2020-12-03 15:52:13', '2020-12-03 15:52:13', '{\"no_conflict_mode\":true,\"no_index\":false,\"seo_title\":\"\",\"seo_description\":\"\",\"favicon\":\"\",\"social_thumbnail\":\"\",\"enable_recaptcha\":false,\"template_id\":373,\"post_title\":\"\",\"post_name\":\"\",\"post_status\":\"draft\",\"show_powered_by_link\":false,\"affiliate_url\":\"\",\"header_scripts\":\"\",\"body_scripts\":\"\",\"footer_scripts\":\"\",\"conversion_scripts\":\"\",\"disable_default_excluded_urls\":false,\"include_exclude_type\":\"0\",\"include_list\":\"\",\"exclude_list\":\"\",\"bypass_phrase\":\"\",\"bypass_expires\":\"2\",\"bypass_cookie\":false,\"access_by_ip\":\"\",\"access_by_role\":[],\"redirect_mode\":false,\"redirect_url\":\"\",\"domain_mapping_status\":false,\"domain_mapping\":\"\",\"domain_mapping_force_https\":false,\"exclude_list_404\":\"\",\"email_integration_id\":\"\",\"is_new\":false,\"page_type\":\"cs\",\"document\":{\"sections\":[{\"id\":\"ks8a8s\",\"type\":\"section\",\"rows\":[{\"id\":\"vw3kvy\",\"type\":\"row\",\"colType\":\"1-col\",\"cols\":[{\"id\":\"ggzp6w\",\"type\":\"col\",\"blocks\":[{\"id\":\"brhhwi\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"unit\":\"px\",\"src\":\"http://assets.seedprod.com/clock.png\",\"altTxt\":\"\",\"link\":\"\",\"width\":\"\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false,\"openNewWindow\":false,\"noFollow\":false}},{\"id\":\"jkhbii\",\"elType\":\"block\",\"type\":\"header\",\"settings\":{\"headerTxt\":\"Coming Soon\",\"tag\":\"h1\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":52,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":true,\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}},{\"id\":\"jdj1i9\",\"elType\":\"block\",\"type\":\"text\",\"settings\":{\"txt\":\"<p>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</p>\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":16,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":\"\",\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colWidth\":\"\",\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colGutter\":0,\"width\":\"1000\",\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"0\",\"paddingBottom\":\"0\",\"paddingLeft\":\"0\",\"paddingRight\":\"0\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"contentWidth\":\"2\",\"width\":600,\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"10\",\"paddingBottom\":\"10\",\"paddingLeft\":\"10\",\"paddingRight\":\"10\",\"paddingSync\":true,\"borderRadius\":\"\",\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\",\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"bgColor\":\"#FFFFFF\",\"bgImage\":\"\",\"bgDimming\":0,\"bgOverlayColor\":\"\",\"bgPosition\":\"cover\",\"buttonColor\":\"#000000\",\"headerColor\":\"#000000\",\"linkColor\":\"#FF0000\",\"linkDarkerColor\":\"#cc0000\",\"textColor\":\"#272727\",\"textFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"textFontVariant\":\"400\",\"headerFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"headerFontVariant\":\"400\",\"contentPosition\":\"4\",\"customCss\":\"\",\"headCss\":\"#sp-page{color:#272727} #sp-page .sp-header-tag-h1,#sp-page .sp-header-tag-h2,#sp-page .sp-header-tag-h3,#sp-page .sp-header-tag-h4,#sp-page .sp-header-tag-h5,#sp-page .sp-header-tag-h6{color:#000000}#sp-page h1,#sp-page h2,#sp-page h3,#sp-page h4,#sp-page h5,#sp-page h6{color:#000000; font-family:\'Helvetica Neue\', Arial, sans-serif;font-weight:400;font-style:normal} #sp-page a{color:#FF0000} #sp-page a:hover{color:#cc0000}#sp-page .btn{background-color:#000000}body{background-color:#FFFFFF; background-image:;}\",\"mobileCss\":\"\",\"placeholderCss\":\"\",\"useVideoBg\":false,\"useVideoBgUrl\":\"\",\"useSlideshowBg\":false,\"useSlideshowImgs\":[\"\"]}}}', 117, 'https://blog.jonniegrieve.co.uk/117-autosave-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(120, 1, '2020-12-03 15:52:19', '2020-12-03 15:52:19', '<div id=\"sp-page\" class=\"spBgcover sp-content-4\" style=\"background-color: rgb(255, 255, 255); font-family: \'Helvetica Neue\', Arial, sans-serif; font-weight: 400;\"><section id=\"sp-ks8a8s\" class=\"sp-el-section \" style=\"width: 600px; max-width: 100%; padding: 10px;\"><div id=\"sp-vw3kvy\" class=\"sp-el-row sm:sp-flex sp-justify-between sp-w-full  sp-m-auto\" style=\"padding: 0px; width: auto; max-width: 1000px;\"><div id=\"sp-ggzp6w\" class=\"sp-el-col sp-p-4  sp-w-full\" style=\"width: calc(100% - 0px); padding: 10px;\"><figure id=\"sp-brhhwi\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"http://assets.seedprod.com/clock.png\" alt=\"\"></span></figure><h1 id=\"sp-jkhbii\" class=\"sp-css-target\" style=\"font-size: 52px; font-weight: bold; color: rgb(50, 27, 38); text-align: center; padding: 10px; margin-top: 0px;\">Coming Soon</h1><div id=\"sp-jdj1i9\" class=\"sp-css-target sp-text-wrapper\" style=\"font-size: 16px; color: rgb(50, 27, 38); padding: 10px; margin-top: 0px; text-align: center;\"><p>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</p></div></div></div></section></div>', '', '', 'inherit', 'closed', 'closed', '', '117-revision-v1', '', '', '2020-12-03 15:52:19', '2020-12-03 15:52:19', '{\"no_conflict_mode\":true,\"no_index\":false,\"seo_title\":\"\",\"seo_description\":\"\",\"favicon\":\"\",\"social_thumbnail\":\"\",\"enable_recaptcha\":false,\"template_id\":373,\"post_title\":\"\",\"post_name\":\"\",\"post_status\":\"draft\",\"show_powered_by_link\":false,\"affiliate_url\":\"\",\"header_scripts\":\"\",\"body_scripts\":\"\",\"footer_scripts\":\"\",\"conversion_scripts\":\"\",\"disable_default_excluded_urls\":false,\"include_exclude_type\":\"0\",\"include_list\":\"\",\"exclude_list\":\"\",\"bypass_phrase\":\"\",\"bypass_expires\":\"2\",\"bypass_cookie\":false,\"access_by_ip\":\"\",\"access_by_role\":[],\"redirect_mode\":false,\"redirect_url\":\"\",\"domain_mapping_status\":false,\"domain_mapping\":\"\",\"domain_mapping_force_https\":false,\"exclude_list_404\":\"\",\"email_integration_id\":\"\",\"is_new\":false,\"page_type\":\"cs\",\"document\":{\"sections\":[{\"id\":\"ks8a8s\",\"type\":\"section\",\"rows\":[{\"id\":\"vw3kvy\",\"type\":\"row\",\"colType\":\"1-col\",\"cols\":[{\"id\":\"ggzp6w\",\"type\":\"col\",\"blocks\":[{\"id\":\"brhhwi\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"unit\":\"px\",\"src\":\"http://assets.seedprod.com/clock.png\",\"altTxt\":\"\",\"link\":\"\",\"width\":\"\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false,\"openNewWindow\":false,\"noFollow\":false}},{\"id\":\"jkhbii\",\"elType\":\"block\",\"type\":\"header\",\"settings\":{\"headerTxt\":\"Coming Soon\",\"tag\":\"h1\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":52,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":true,\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}},{\"id\":\"jdj1i9\",\"elType\":\"block\",\"type\":\"text\",\"settings\":{\"txt\":\"<p>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</p>\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":16,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":\"\",\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colWidth\":\"\",\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colGutter\":0,\"width\":\"1000\",\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"0\",\"paddingBottom\":\"0\",\"paddingLeft\":\"0\",\"paddingRight\":\"0\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"contentWidth\":\"2\",\"width\":600,\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"10\",\"paddingBottom\":\"10\",\"paddingLeft\":\"10\",\"paddingRight\":\"10\",\"paddingSync\":true,\"borderRadius\":\"\",\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\",\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"bgColor\":\"#FFFFFF\",\"bgImage\":\"\",\"bgDimming\":0,\"bgOverlayColor\":\"\",\"bgPosition\":\"cover\",\"buttonColor\":\"#000000\",\"headerColor\":\"#000000\",\"linkColor\":\"#FF0000\",\"linkDarkerColor\":\"#cc0000\",\"textColor\":\"#272727\",\"textFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"textFontVariant\":\"400\",\"headerFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"headerFontVariant\":\"400\",\"contentPosition\":\"4\",\"customCss\":\"\",\"headCss\":\"#sp-page{color:#272727} #sp-page .sp-header-tag-h1,#sp-page .sp-header-tag-h2,#sp-page .sp-header-tag-h3,#sp-page .sp-header-tag-h4,#sp-page .sp-header-tag-h5,#sp-page .sp-header-tag-h6{color:#000000}#sp-page h1,#sp-page h2,#sp-page h3,#sp-page h4,#sp-page h5,#sp-page h6{color:#000000; font-family:\'Helvetica Neue\', Arial, sans-serif;font-weight:400;font-style:normal} #sp-page a{color:#FF0000} #sp-page a:hover{color:#cc0000}#sp-page .btn{background-color:#000000}body{background-color:#FFFFFF; background-image:;}\",\"mobileCss\":\"\",\"placeholderCss\":\"\",\"useVideoBg\":false,\"useVideoBgUrl\":\"\",\"useSlideshowBg\":false,\"useSlideshowImgs\":[\"\"]}}}', 117, 'https://blog.jonniegrieve.co.uk/117-revision-v1/', 0, 'revision', '', 0),
(121, 1, '2020-12-03 15:53:11', '2020-12-03 15:53:11', '<div id=\"sp-page\" class=\"spBgcover sp-content-4\" style=\"background-color: rgb(255, 255, 255); font-family: \'Helvetica Neue\', Arial, sans-serif; font-weight: 400;\"><section id=\"sp-ks8a8s\" class=\"sp-el-section \" style=\"width: 600px; max-width: 100%; padding: 10px;\"><div id=\"sp-vw3kvy\" class=\"sp-el-row sm:sp-flex sp-justify-between sp-w-full  sp-m-auto\" style=\"padding: 0px; width: auto; max-width: 1000px;\"><div id=\"sp-ggzp6w\" class=\"sp-el-col sp-p-4  sp-w-full\" style=\"width: calc(100% - 0px); padding: 10px;\"><figure id=\"sp-brhhwi\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"http://assets.seedprod.com/clock.png\" alt=\"\"></span></figure><h1 id=\"sp-jkhbii\" class=\"sp-css-target\" style=\"font-size: 52px; font-weight: bold; color: rgb(50, 27, 38); text-align: center; padding: 10px; margin-top: 0px;\">Coming Soon</h1><figure id=\"sp-yftr9d\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/FacebookProfilepic.png\" alt=\"New Blog platform coming soon!\"></span></figure><div id=\"sp-jdj1i9\" class=\"sp-css-target sp-text-wrapper\" style=\"font-size: 16px; color: rgb(50, 27, 38); padding: 10px; margin-top: 0px; text-align: center;\"><p>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</p></div></div></div></section></div>', '', '', 'inherit', 'closed', 'closed', '', '117-revision-v1', '', '', '2020-12-03 15:53:11', '2020-12-03 15:53:11', '{\"no_conflict_mode\":true,\"no_index\":false,\"seo_title\":\"\",\"seo_description\":\"\",\"favicon\":\"\",\"social_thumbnail\":\"\",\"enable_recaptcha\":false,\"template_id\":373,\"post_title\":\"\",\"post_name\":\"\",\"post_status\":\"draft\",\"show_powered_by_link\":false,\"affiliate_url\":\"\",\"header_scripts\":\"\",\"body_scripts\":\"\",\"footer_scripts\":\"\",\"conversion_scripts\":\"\",\"disable_default_excluded_urls\":false,\"include_exclude_type\":\"0\",\"include_list\":\"\",\"exclude_list\":\"\",\"bypass_phrase\":\"\",\"bypass_expires\":\"2\",\"bypass_cookie\":false,\"access_by_ip\":\"\",\"access_by_role\":[],\"redirect_mode\":false,\"redirect_url\":\"\",\"domain_mapping_status\":false,\"domain_mapping\":\"\",\"domain_mapping_force_https\":false,\"exclude_list_404\":\"\",\"email_integration_id\":\"\",\"is_new\":false,\"page_type\":\"cs\",\"document\":{\"sections\":[{\"id\":\"ks8a8s\",\"type\":\"section\",\"rows\":[{\"id\":\"vw3kvy\",\"type\":\"row\",\"colType\":\"1-col\",\"cols\":[{\"id\":\"ggzp6w\",\"type\":\"col\",\"blocks\":[{\"id\":\"brhhwi\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"unit\":\"px\",\"src\":\"http://assets.seedprod.com/clock.png\",\"altTxt\":\"\",\"link\":\"\",\"width\":\"\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false,\"openNewWindow\":false,\"noFollow\":false}},{\"id\":\"jkhbii\",\"elType\":\"block\",\"type\":\"header\",\"settings\":{\"headerTxt\":\"Coming Soon\",\"tag\":\"h1\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":52,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":true,\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}},{\"id\":\"yftr9d\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"link\":\"\",\"openNewWindow\":false,\"noFollow\":false,\"unit\":\"px\",\"src\":\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/FacebookProfilepic.png\",\"altTxt\":\"New Blog platform coming soon!\",\"width\":\"\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false}},{\"id\":\"jdj1i9\",\"elType\":\"block\",\"type\":\"text\",\"settings\":{\"txt\":\"<p>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</p>\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":16,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":\"\",\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colWidth\":\"\",\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colGutter\":0,\"width\":\"1000\",\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"0\",\"paddingBottom\":\"0\",\"paddingLeft\":\"0\",\"paddingRight\":\"0\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"contentWidth\":\"2\",\"width\":600,\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"10\",\"paddingBottom\":\"10\",\"paddingLeft\":\"10\",\"paddingRight\":\"10\",\"paddingSync\":true,\"borderRadius\":\"\",\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\",\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"bgColor\":\"#FFFFFF\",\"bgImage\":\"\",\"bgDimming\":0,\"bgOverlayColor\":\"\",\"bgPosition\":\"cover\",\"buttonColor\":\"#000000\",\"headerColor\":\"#000000\",\"linkColor\":\"#FF0000\",\"linkDarkerColor\":\"#cc0000\",\"textColor\":\"#272727\",\"textFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"textFontVariant\":\"400\",\"headerFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"headerFontVariant\":\"400\",\"contentPosition\":\"4\",\"customCss\":\"\",\"headCss\":\"#sp-page{color:#272727} #sp-page .sp-header-tag-h1,#sp-page .sp-header-tag-h2,#sp-page .sp-header-tag-h3,#sp-page .sp-header-tag-h4,#sp-page .sp-header-tag-h5,#sp-page .sp-header-tag-h6{color:#000000}#sp-page h1,#sp-page h2,#sp-page h3,#sp-page h4,#sp-page h5,#sp-page h6{color:#000000; font-family:\'Helvetica Neue\', Arial, sans-serif;font-weight:400;font-style:normal} #sp-page a{color:#FF0000} #sp-page a:hover{color:#cc0000}#sp-page .btn{background-color:#000000}body{background-color:#FFFFFF; background-image:;}\",\"mobileCss\":\"\",\"placeholderCss\":\"\",\"useVideoBg\":false,\"useVideoBgUrl\":\"\",\"useSlideshowBg\":false,\"useSlideshowImgs\":[\"\"]}}}', 117, 'https://blog.jonniegrieve.co.uk/117-revision-v1/', 0, 'revision', '', 0),
(122, 1, '2020-12-03 15:54:35', '2020-12-03 15:54:35', '<div id=\"sp-page\" class=\"spBgcover sp-content-4\" style=\"background-color: rgb(255, 255, 255); font-family: \'Helvetica Neue\', Arial, sans-serif; font-weight: 400;\"><section id=\"sp-ks8a8s\" class=\"sp-el-section \" style=\"width: 600px; max-width: 100%; padding: 10px;\"><div id=\"sp-vw3kvy\" class=\"sp-el-row sm:sp-flex sp-justify-between sp-w-full  sp-m-auto\" style=\"padding: 0px; width: auto; max-width: 750px;\"><div id=\"sp-ggzp6w\" class=\"sp-el-col sp-p-4  sp-w-full\" style=\"width: calc(100% - 8px); padding: 10px;\"><figure id=\"sp-brhhwi\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"http://assets.seedprod.com/clock.png\" alt=\"\" draggable=\"false\" style=\"width: 85px;\"></span></figure><h1 id=\"sp-jkhbii\" class=\"sp-css-target\" style=\"font-size: 52px; font-weight: bold; color: rgb(50, 27, 38); text-align: center; padding: 10px; margin-top: 0px;\">Coming Soon</h1><figure id=\"sp-yftr9d\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/FacebookProfilepic.png\" alt=\"New Blog platform coming soon!\"></span></figure><div id=\"sp-jdj1i9\" class=\"sp-css-target sp-text-wrapper\" style=\"font-size: 16px; color: rgb(50, 27, 38); padding: 10px; margin-top: 0px; text-align: center;\"><p>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</p></div></div></div></section></div>', '', '', 'inherit', 'closed', 'closed', '', '117-revision-v1', '', '', '2020-12-03 15:54:35', '2020-12-03 15:54:35', '{\"no_conflict_mode\":true,\"no_index\":false,\"seo_title\":\"\",\"seo_description\":\"\",\"favicon\":\"\",\"social_thumbnail\":\"\",\"enable_recaptcha\":false,\"template_id\":373,\"post_title\":\"\",\"post_name\":\"\",\"post_status\":\"draft\",\"show_powered_by_link\":false,\"affiliate_url\":\"\",\"header_scripts\":\"\",\"body_scripts\":\"\",\"footer_scripts\":\"\",\"conversion_scripts\":\"\",\"disable_default_excluded_urls\":false,\"include_exclude_type\":\"0\",\"include_list\":\"\",\"exclude_list\":\"\",\"bypass_phrase\":\"\",\"bypass_expires\":\"2\",\"bypass_cookie\":false,\"access_by_ip\":\"\",\"access_by_role\":[],\"redirect_mode\":false,\"redirect_url\":\"\",\"domain_mapping_status\":false,\"domain_mapping\":\"\",\"domain_mapping_force_https\":false,\"exclude_list_404\":\"\",\"email_integration_id\":\"\",\"is_new\":false,\"page_type\":\"cs\",\"document\":{\"sections\":[{\"id\":\"ks8a8s\",\"type\":\"section\",\"rows\":[{\"id\":\"vw3kvy\",\"type\":\"row\",\"colType\":\"1-col\",\"cols\":[{\"id\":\"ggzp6w\",\"type\":\"col\",\"blocks\":[{\"id\":\"brhhwi\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"unit\":\"px\",\"src\":\"http://assets.seedprod.com/clock.png\",\"altTxt\":\"\",\"link\":\"\",\"width\":\"85\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false,\"openNewWindow\":false,\"noFollow\":false}},{\"id\":\"jkhbii\",\"elType\":\"block\",\"type\":\"header\",\"settings\":{\"headerTxt\":\"Coming Soon\",\"tag\":\"h1\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":52,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":true,\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}},{\"id\":\"yftr9d\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"link\":\"\",\"openNewWindow\":false,\"noFollow\":false,\"unit\":\"px\",\"src\":\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/FacebookProfilepic.png\",\"altTxt\":\"New Blog platform coming soon!\",\"width\":\"\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false}},{\"id\":\"jdj1i9\",\"elType\":\"block\",\"type\":\"text\",\"settings\":{\"txt\":\"<p>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</p>\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":16,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":\"\",\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colWidth\":\"\",\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colGutter\":8,\"width\":750,\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"0\",\"paddingBottom\":\"0\",\"paddingLeft\":\"0\",\"paddingRight\":\"0\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"contentWidth\":\"2\",\"width\":600,\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"10\",\"paddingBottom\":\"10\",\"paddingLeft\":\"10\",\"paddingRight\":\"10\",\"paddingSync\":true,\"borderRadius\":\"\",\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\",\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"bgColor\":\"#FFFFFF\",\"bgImage\":\"\",\"bgDimming\":0,\"bgOverlayColor\":\"\",\"bgPosition\":\"cover\",\"buttonColor\":\"#000000\",\"headerColor\":\"#000000\",\"linkColor\":\"#FF0000\",\"linkDarkerColor\":\"#cc0000\",\"textColor\":\"#272727\",\"textFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"textFontVariant\":\"400\",\"headerFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"headerFontVariant\":\"400\",\"contentPosition\":\"4\",\"customCss\":\"\",\"headCss\":\"#sp-page{color:#272727} #sp-page .sp-header-tag-h1,#sp-page .sp-header-tag-h2,#sp-page .sp-header-tag-h3,#sp-page .sp-header-tag-h4,#sp-page .sp-header-tag-h5,#sp-page .sp-header-tag-h6{color:#000000}#sp-page h1,#sp-page h2,#sp-page h3,#sp-page h4,#sp-page h5,#sp-page h6{color:#000000; font-family:\'Helvetica Neue\', Arial, sans-serif;font-weight:400;font-style:normal} #sp-page a{color:#FF0000} #sp-page a:hover{color:#cc0000}#sp-page .btn{background-color:#000000}body{background-color:#FFFFFF; background-image:;}\",\"mobileCss\":\"\",\"placeholderCss\":\"\",\"useVideoBg\":false,\"useVideoBgUrl\":\"\",\"useSlideshowBg\":false,\"useSlideshowImgs\":[\"\"]}}}', 117, 'https://blog.jonniegrieve.co.uk/117-revision-v1/', 0, 'revision', '', 0),
(123, 1, '2020-12-03 15:56:01', '2020-12-03 15:56:01', '<div id=\"sp-page\" class=\"spBgcover sp-content-4\" style=\"background-color: rgb(255, 255, 255); font-family: \'Helvetica Neue\', Arial, sans-serif; font-weight: 400;\"><section id=\"sp-ks8a8s\" class=\"sp-el-section \" style=\"width: 600px; max-width: 100%; padding: 10px;\"><div id=\"sp-vw3kvy\" class=\"sp-el-row sm:sp-flex sp-justify-between sp-w-full  sp-m-auto\" style=\"padding: 0px; width: auto; max-width: 750px;\"><div id=\"sp-ggzp6w\" class=\"sp-el-col sp-p-4  sp-w-full\" style=\"width: calc(100% - 8px); padding: 10px;\"><figure id=\"sp-brhhwi\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"http://assets.seedprod.com/clock.png\" alt=\"\" style=\"width: 85px;\"></span></figure><h1 id=\"sp-jkhbii\" class=\"sp-css-target\" style=\"font-size: 52px; font-weight: bold; color: rgb(50, 27, 38); text-align: center; padding: 10px; margin-top: 0px;\">Coming Soon</h1><figure id=\"sp-yftr9d\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/FacebookProfilepic.png\" alt=\"New Blog platform coming soon!\"></span></figure><div id=\"tiny-vue_20287098421607010923077\" class=\"sp-css-target sp-text-wrapper mce-content-body html4-captions\"  style=\"font-size: 16px; color: rgb(50, 27, 38); padding: 10px; margin-top: 0px; text-align: center; position: relative;\" ><p><strong>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</strong></p></div></div></div></section></div>', '', '', 'inherit', 'closed', 'closed', '', '117-revision-v1', '', '', '2020-12-03 15:56:01', '2020-12-03 15:56:01', '{\"no_conflict_mode\":true,\"no_index\":false,\"seo_title\":\"\",\"seo_description\":\"\",\"favicon\":\"\",\"social_thumbnail\":\"\",\"enable_recaptcha\":false,\"template_id\":373,\"post_title\":\"\",\"post_name\":\"\",\"post_status\":\"draft\",\"show_powered_by_link\":false,\"affiliate_url\":\"\",\"header_scripts\":\"\",\"body_scripts\":\"\",\"footer_scripts\":\"\",\"conversion_scripts\":\"\",\"disable_default_excluded_urls\":false,\"include_exclude_type\":\"0\",\"include_list\":\"\",\"exclude_list\":\"\",\"bypass_phrase\":\"\",\"bypass_expires\":\"2\",\"bypass_cookie\":false,\"access_by_ip\":\"\",\"access_by_role\":[],\"redirect_mode\":false,\"redirect_url\":\"\",\"domain_mapping_status\":false,\"domain_mapping\":\"\",\"domain_mapping_force_https\":false,\"exclude_list_404\":\"\",\"email_integration_id\":\"\",\"is_new\":false,\"page_type\":\"cs\",\"document\":{\"sections\":[{\"id\":\"ks8a8s\",\"type\":\"section\",\"rows\":[{\"id\":\"vw3kvy\",\"type\":\"row\",\"colType\":\"1-col\",\"cols\":[{\"id\":\"ggzp6w\",\"type\":\"col\",\"blocks\":[{\"id\":\"brhhwi\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"unit\":\"px\",\"src\":\"http://assets.seedprod.com/clock.png\",\"altTxt\":\"\",\"link\":\"\",\"width\":\"85\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false,\"openNewWindow\":false,\"noFollow\":false}},{\"id\":\"jkhbii\",\"elType\":\"block\",\"type\":\"header\",\"settings\":{\"headerTxt\":\"Coming Soon\",\"tag\":\"h1\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":52,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":true,\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}},{\"id\":\"yftr9d\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"link\":\"\",\"openNewWindow\":false,\"noFollow\":false,\"unit\":\"px\",\"src\":\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/FacebookProfilepic.png\",\"altTxt\":\"New Blog platform coming soon!\",\"width\":\"\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false}},{\"id\":\"jdj1i9\",\"elType\":\"block\",\"type\":\"text\",\"settings\":{\"txt\":\"<p><strong>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</strong></p>\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":16,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":\"\",\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colWidth\":\"\",\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colGutter\":8,\"width\":750,\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"0\",\"paddingBottom\":\"0\",\"paddingLeft\":\"0\",\"paddingRight\":\"0\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"contentWidth\":\"2\",\"width\":600,\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"10\",\"paddingBottom\":\"10\",\"paddingLeft\":\"10\",\"paddingRight\":\"10\",\"paddingSync\":true,\"borderRadius\":\"\",\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\",\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"bgColor\":\"#FFFFFF\",\"bgImage\":\"\",\"bgDimming\":0,\"bgOverlayColor\":\"\",\"bgPosition\":\"cover\",\"buttonColor\":\"#000000\",\"headerColor\":\"#000000\",\"linkColor\":\"#FF0000\",\"linkDarkerColor\":\"#cc0000\",\"textColor\":\"#272727\",\"textFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"textFontVariant\":\"400\",\"headerFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"headerFontVariant\":\"400\",\"contentPosition\":\"4\",\"customCss\":\"\",\"headCss\":\"#sp-page{color:#272727} #sp-page .sp-header-tag-h1,#sp-page .sp-header-tag-h2,#sp-page .sp-header-tag-h3,#sp-page .sp-header-tag-h4,#sp-page .sp-header-tag-h5,#sp-page .sp-header-tag-h6{color:#000000}#sp-page h1,#sp-page h2,#sp-page h3,#sp-page h4,#sp-page h5,#sp-page h6{color:#000000; font-family:\'Helvetica Neue\', Arial, sans-serif;font-weight:400;font-style:normal} #sp-page a{color:#FF0000} #sp-page a:hover{color:#cc0000}#sp-page .btn{background-color:#000000}body{background-color:#FFFFFF; background-image:;}\",\"mobileCss\":\"\",\"placeholderCss\":\"\",\"useVideoBg\":false,\"useVideoBgUrl\":\"\",\"useSlideshowBg\":false,\"useSlideshowImgs\":[\"\"]}}}', 117, 'https://blog.jonniegrieve.co.uk/117-revision-v1/', 0, 'revision', '', 0),
(124, 1, '2020-12-03 15:56:02', '2020-12-03 15:56:02', '<div id=\"sp-page\" class=\"spBgcover sp-content-4\" style=\"background-color: rgb(255, 255, 255); font-family: \'Helvetica Neue\', Arial, sans-serif; font-weight: 400;\"><section id=\"sp-ks8a8s\" class=\"sp-el-section \" style=\"width: 600px; max-width: 100%; padding: 10px;\"><div id=\"sp-vw3kvy\" class=\"sp-el-row sm:sp-flex sp-justify-between sp-w-full  sp-m-auto\" style=\"padding: 0px; width: auto; max-width: 750px;\"><div id=\"sp-ggzp6w\" class=\"sp-el-col sp-p-4  sp-w-full\" style=\"width: calc(100% - 8px); padding: 10px;\"><figure id=\"sp-brhhwi\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"http://assets.seedprod.com/clock.png\" alt=\"\" style=\"width: 85px;\"></span></figure><h1 id=\"sp-jkhbii\" class=\"sp-css-target\" style=\"font-size: 52px; font-weight: bold; color: rgb(50, 27, 38); text-align: center; padding: 10px; margin-top: 0px;\">Coming Soon</h1><figure id=\"sp-yftr9d\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/FacebookProfilepic.png\" alt=\"New Blog platform coming soon!\"></span></figure><div id=\"sp-jdj1i9\" class=\"sp-css-target sp-text-wrapper\" style=\"font-size: 16px; color: rgb(50, 27, 38); padding: 10px; margin-top: 0px; text-align: center;\"><p><strong>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</strong></p></div></div></div></section></div>', '', '', 'inherit', 'closed', 'closed', '', '117-revision-v1', '', '', '2020-12-03 15:56:02', '2020-12-03 15:56:02', '{\"no_conflict_mode\":true,\"no_index\":false,\"seo_title\":\"\",\"seo_description\":\"\",\"favicon\":\"\",\"social_thumbnail\":\"\",\"enable_recaptcha\":false,\"template_id\":373,\"post_title\":\"\",\"post_name\":\"\",\"post_status\":\"draft\",\"show_powered_by_link\":false,\"affiliate_url\":\"\",\"header_scripts\":\"\",\"body_scripts\":\"\",\"footer_scripts\":\"\",\"conversion_scripts\":\"\",\"disable_default_excluded_urls\":false,\"include_exclude_type\":\"0\",\"include_list\":\"\",\"exclude_list\":\"\",\"bypass_phrase\":\"\",\"bypass_expires\":\"2\",\"bypass_cookie\":false,\"access_by_ip\":\"\",\"access_by_role\":[],\"redirect_mode\":false,\"redirect_url\":\"\",\"domain_mapping_status\":false,\"domain_mapping\":\"\",\"domain_mapping_force_https\":false,\"exclude_list_404\":\"\",\"email_integration_id\":\"\",\"is_new\":false,\"page_type\":\"cs\",\"document\":{\"sections\":[{\"id\":\"ks8a8s\",\"type\":\"section\",\"rows\":[{\"id\":\"vw3kvy\",\"type\":\"row\",\"colType\":\"1-col\",\"cols\":[{\"id\":\"ggzp6w\",\"type\":\"col\",\"blocks\":[{\"id\":\"brhhwi\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"unit\":\"px\",\"src\":\"http://assets.seedprod.com/clock.png\",\"altTxt\":\"\",\"link\":\"\",\"width\":\"85\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false,\"openNewWindow\":false,\"noFollow\":false}},{\"id\":\"jkhbii\",\"elType\":\"block\",\"type\":\"header\",\"settings\":{\"headerTxt\":\"Coming Soon\",\"tag\":\"h1\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":52,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":true,\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}},{\"id\":\"yftr9d\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"link\":\"\",\"openNewWindow\":false,\"noFollow\":false,\"unit\":\"px\",\"src\":\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/FacebookProfilepic.png\",\"altTxt\":\"New Blog platform coming soon!\",\"width\":\"\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false}},{\"id\":\"jdj1i9\",\"elType\":\"block\",\"type\":\"text\",\"settings\":{\"txt\":\"<p><strong>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</strong></p>\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":16,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":\"\",\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colWidth\":\"\",\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colGutter\":8,\"width\":750,\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"0\",\"paddingBottom\":\"0\",\"paddingLeft\":\"0\",\"paddingRight\":\"0\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"contentWidth\":\"2\",\"width\":600,\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"10\",\"paddingBottom\":\"10\",\"paddingLeft\":\"10\",\"paddingRight\":\"10\",\"paddingSync\":true,\"borderRadius\":\"\",\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\",\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"bgColor\":\"#FFFFFF\",\"bgImage\":\"\",\"bgDimming\":0,\"bgOverlayColor\":\"\",\"bgPosition\":\"cover\",\"buttonColor\":\"#000000\",\"headerColor\":\"#000000\",\"linkColor\":\"#FF0000\",\"linkDarkerColor\":\"#cc0000\",\"textColor\":\"#272727\",\"textFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"textFontVariant\":\"400\",\"headerFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"headerFontVariant\":\"400\",\"contentPosition\":\"4\",\"customCss\":\"\",\"headCss\":\"#sp-page{color:#272727} #sp-page .sp-header-tag-h1,#sp-page .sp-header-tag-h2,#sp-page .sp-header-tag-h3,#sp-page .sp-header-tag-h4,#sp-page .sp-header-tag-h5,#sp-page .sp-header-tag-h6{color:#000000}#sp-page h1,#sp-page h2,#sp-page h3,#sp-page h4,#sp-page h5,#sp-page h6{color:#000000; font-family:\'Helvetica Neue\', Arial, sans-serif;font-weight:400;font-style:normal} #sp-page a{color:#FF0000} #sp-page a:hover{color:#cc0000}#sp-page .btn{background-color:#000000}body{background-color:#FFFFFF; background-image:;}\",\"mobileCss\":\"\",\"placeholderCss\":\"\",\"useVideoBg\":false,\"useVideoBgUrl\":\"\",\"useSlideshowBg\":false,\"useSlideshowImgs\":[\"\"]}}}', 117, 'https://blog.jonniegrieve.co.uk/117-revision-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(125, 1, '2020-12-03 15:57:19', '2020-12-03 15:57:19', '<div id=\"sp-page\" class=\"spBgcover sp-content-4\" style=\"background-color: rgb(255, 255, 255); font-family: \'Helvetica Neue\', Arial, sans-serif; font-weight: 400;\"><section id=\"sp-ks8a8s\" class=\"sp-el-section \" style=\"width: 600px; max-width: 100%; padding: 10px;\"><div id=\"sp-vw3kvy\" class=\"sp-el-row sm:sp-flex sp-justify-between sp-w-full  sp-m-auto\" style=\"padding: 0px; width: auto; max-width: 750px;\"><div id=\"sp-ggzp6w\" class=\"sp-el-col sp-p-4  sp-w-full\" style=\"width: calc(100% - 8px); padding: 10px;\"><figure id=\"sp-brhhwi\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"http://assets.seedprod.com/clock.png\" alt=\"\" style=\"width: 85px;\"></span></figure><h1 id=\"sp-jkhbii\" class=\"sp-css-target\" style=\"font-size: 52px; font-weight: bold; color: rgb(50, 27, 38); text-align: center; padding: 10px; margin-top: 0px;\">Coming Soon</h1><figure id=\"sp-yftr9d\" class=\"sp-image-wrapper\" style=\"margin-top: 0px; padding: 10px; text-align: center;\"><span><img src=\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/FacebookProfilepic.png\" alt=\"New Blog platform coming soon!\"></span></figure><div id=\"sp-jdj1i9\" class=\"sp-css-target sp-text-wrapper\" style=\"font-size: 16px; color: rgb(50, 27, 38); padding: 10px; margin-top: 0px; text-align: center;\"><p><strong>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</strong></p></div></div></div></section></div>', '', '', 'inherit', 'closed', 'closed', '', '117-revision-v1', '', '', '2020-12-03 15:57:19', '2020-12-03 15:57:19', '{\"no_conflict_mode\":true,\"no_index\":false,\"seo_title\":\"\",\"seo_description\":\"\",\"favicon\":\"\",\"social_thumbnail\":\"\",\"enable_recaptcha\":false,\"template_id\":373,\"post_title\":\"\",\"post_name\":\"117\",\"post_status\":\"publish\",\"show_powered_by_link\":false,\"affiliate_url\":\"\",\"header_scripts\":\"\",\"body_scripts\":\"\",\"footer_scripts\":\"\",\"conversion_scripts\":\"\",\"disable_default_excluded_urls\":false,\"include_exclude_type\":\"0\",\"include_list\":\"\",\"exclude_list\":\"\",\"bypass_phrase\":\"\",\"bypass_expires\":\"2\",\"bypass_cookie\":false,\"access_by_ip\":\"\",\"access_by_role\":[],\"redirect_mode\":false,\"redirect_url\":\"\",\"domain_mapping_status\":false,\"domain_mapping\":\"\",\"domain_mapping_force_https\":false,\"exclude_list_404\":\"\",\"email_integration_id\":\"\",\"is_new\":false,\"page_type\":\"cs\",\"document\":{\"sections\":[{\"id\":\"ks8a8s\",\"type\":\"section\",\"rows\":[{\"id\":\"vw3kvy\",\"type\":\"row\",\"colType\":\"1-col\",\"cols\":[{\"id\":\"ggzp6w\",\"type\":\"col\",\"blocks\":[{\"id\":\"brhhwi\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"unit\":\"px\",\"src\":\"http://assets.seedprod.com/clock.png\",\"altTxt\":\"\",\"link\":\"\",\"width\":\"85\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false,\"openNewWindow\":false,\"noFollow\":false}},{\"id\":\"jkhbii\",\"elType\":\"block\",\"type\":\"header\",\"settings\":{\"headerTxt\":\"Coming Soon\",\"tag\":\"h1\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":52,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":true,\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}},{\"id\":\"yftr9d\",\"elType\":\"block\",\"type\":\"image\",\"settings\":{\"link\":\"\",\"openNewWindow\":false,\"noFollow\":false,\"unit\":\"px\",\"src\":\"https://blog.jonniegrieve.co.uk/wp-content/uploads/2019/02/FacebookProfilepic.png\",\"altTxt\":\"New Blog platform coming soon!\",\"width\":\"\",\"height\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"imagePadding\":\"\",\"align\":\"center\",\"shadow\":\"\",\"imageBorderRadius\":\"\",\"imageBorderTop\":\"0\",\"imageBorderBottom\":\"0\",\"imageBorderLeft\":\"0\",\"imageBorderRight\":\"0\",\"imageBorderSync\":true,\"imageBorderStyle\":\"solid\",\"imageBorderColor\":\"\",\"blockTemplateId\":false}},{\"id\":\"jdj1i9\",\"elType\":\"block\",\"type\":\"text\",\"settings\":{\"txt\":\"<p><strong>Get ready!&nbsp; My new Blog platform for Jonnie Grieve Digital Media is coming!!</strong></p>\",\"textColor\":\"#321B26\",\"bgColor\":\"\",\"beforeIcon\":\"\",\"afterIcon\":\"\",\"marginTop\":\"0\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadius\":\"\",\"border\":\"\",\"borderStyle\":\"\",\"borderSize\":\"\",\"borderColor\":\"\",\"shadow\":\"\",\"textShadow\":\"\",\"font\":\"\",\"fontVariant\":\"\",\"fontSize\":16,\"fontSize_mobile\":\"\",\"lineHeight\":\"\",\"lineHeight_mobile\":\"\",\"letterSpacing\":\"\",\"letterSpacing_mobile\":\"\",\"typographyBold\":\"\",\"typographyItalic\":\"\",\"typographyUnderline\":\"\",\"align\":\"center\",\"typographyLetterCase\":\"\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colWidth\":\"\",\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"paddingLeft\":\"\",\"paddingRight\":\"\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"colGutter\":8,\"width\":750,\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"0\",\"paddingBottom\":\"0\",\"paddingLeft\":\"0\",\"paddingRight\":\"0\",\"paddingSync\":true,\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true,\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\"}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"contentWidth\":\"2\",\"width\":600,\"bgColor\":\"\",\"bgImage\":\"\",\"bgPosition\":\"\",\"marginTop\":\"\",\"shadow\":\"\",\"paddingTop\":\"10\",\"paddingBottom\":\"10\",\"paddingLeft\":\"10\",\"paddingRight\":\"10\",\"paddingSync\":true,\"borderRadius\":\"\",\"borderTop\":\"0\",\"borderBottom\":\"0\",\"borderLeft\":\"0\",\"borderRight\":\"0\",\"borderSync\":true,\"borderStyle\":\"solid\",\"borderRadiusTL\":\"\",\"borderRadiusTR\":\"\",\"borderRadiusBL\":\"\",\"borderRadiusBR\":\"\",\"borderRadiusSync\":true}}],\"settings\":{\"bgStyle\":\"s\",\"bgGradient\":{\"type\":\"linear\",\"position\":\"center\",\"angle\":0,\"color1\":\"\",\"color1location\":0,\"color2\":\"\",\"color2location\":100},\"bgColor\":\"#FFFFFF\",\"bgImage\":\"\",\"bgDimming\":0,\"bgOverlayColor\":\"\",\"bgPosition\":\"cover\",\"buttonColor\":\"#000000\",\"headerColor\":\"#000000\",\"linkColor\":\"#FF0000\",\"linkDarkerColor\":\"#cc0000\",\"textColor\":\"#272727\",\"textFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"textFontVariant\":\"400\",\"headerFont\":\"\'Helvetica Neue\', Arial, sans-serif\",\"headerFontVariant\":\"400\",\"contentPosition\":\"4\",\"customCss\":\"\",\"headCss\":\"#sp-page{color:#272727} #sp-page .sp-header-tag-h1,#sp-page .sp-header-tag-h2,#sp-page .sp-header-tag-h3,#sp-page .sp-header-tag-h4,#sp-page .sp-header-tag-h5,#sp-page .sp-header-tag-h6{color:#000000}#sp-page h1,#sp-page h2,#sp-page h3,#sp-page h4,#sp-page h5,#sp-page h6{color:#000000; font-family:\'Helvetica Neue\', Arial, sans-serif;font-weight:400;font-style:normal} #sp-page a{color:#FF0000} #sp-page a:hover{color:#cc0000}#sp-page .btn{background-color:#000000}body{background-color:#FFFFFF; background-image:;}\",\"mobileCss\":\"\",\"placeholderCss\":\"\",\"useVideoBg\":false,\"useVideoBgUrl\":\"\",\"useSlideshowBg\":false,\"useSlideshowImgs\":[\"\"]}}}', 117, 'https://blog.jonniegrieve.co.uk/117-revision-v1/', 0, 'revision', '', 0),
(126, 1, '2020-12-21 13:47:16', '0000-00-00 00:00:00', '', 'Auto Draft', '', 'auto-draft', 'open', 'open', '', '', '', '', '2020-12-21 13:47:16', '0000-00-00 00:00:00', '', 0, 'https://blog.jonniegrieve.co.uk/?p=126', 0, 'post', '', 0);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `wp_posts`
--
ALTER TABLE `wp_posts`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `post_name` (`post_name`(191)),
  ADD KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  ADD KEY `post_parent` (`post_parent`),
  ADD KEY `post_author` (`post_author`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `wp_posts`
--
ALTER TABLE `wp_posts`
  MODIFY `ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=127;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
